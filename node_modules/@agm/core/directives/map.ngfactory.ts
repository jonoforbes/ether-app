/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@agm/core/directives/map';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/linker/debug_context';
import * as import5 from '@agm/core/services/google-maps-api-wrapper';
import * as import6 from '@agm/core/services/managers/marker-manager';
import * as import7 from '@agm/core/services/managers/info-window-manager';
import * as import8 from '@agm/core/services/managers/circle-manager';
import * as import9 from '@agm/core/services/managers/polyline-manager';
import * as import10 from '@agm/core/services/managers/polygon-manager';
import * as import11 from '@agm/core/services/managers/kml-layer-manager';
import * as import12 from '@agm/core/services/managers/data-layer-manager';
import * as import13 from '@angular/core/src/render/api';
import * as import14 from '@angular/core/src/metadata/view';
import * as import15 from '@angular/core/src/linker/view_type';
import * as import16 from '@angular/core/src/change_detection/constants';
import * as import17 from '@angular/core/src/zone/ng_zone';
import * as import18 from '@angular/core/src/linker/component_factory';
import * as import19 from '@agm/core/services/maps-api-loader/maps-api-loader';
import * as import20 from '@angular/core/src/linker/element_ref';
export class Wrapper_AgmMap {
  /*private*/ _eventHandler:Function;
  context:import0.AgmMap;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  /*private*/ _expr_19:any;
  /*private*/ _expr_20:any;
  /*private*/ _expr_21:any;
  /*private*/ _expr_22:any;
  /*private*/ _expr_23:any;
  /*private*/ _expr_24:any;
  /*private*/ _expr_25:any;
  /*private*/ _expr_26:any;
  /*private*/ _expr_27:any;
  /*private*/ _expr_28:any;
  /*private*/ _expr_29:any;
  /*private*/ _expr_30:any;
  /*private*/ _expr_31:any;
  /*private*/ _expr_32:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  subscription4:any;
  subscription5:any;
  subscription6:any;
  subscription7:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import0.AgmMap(p0,p1);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
    this._expr_9 = import1.UNINITIALIZED;
    this._expr_10 = import1.UNINITIALIZED;
    this._expr_11 = import1.UNINITIALIZED;
    this._expr_12 = import1.UNINITIALIZED;
    this._expr_13 = import1.UNINITIALIZED;
    this._expr_14 = import1.UNINITIALIZED;
    this._expr_15 = import1.UNINITIALIZED;
    this._expr_16 = import1.UNINITIALIZED;
    this._expr_17 = import1.UNINITIALIZED;
    this._expr_18 = import1.UNINITIALIZED;
    this._expr_19 = import1.UNINITIALIZED;
    this._expr_20 = import1.UNINITIALIZED;
    this._expr_21 = import1.UNINITIALIZED;
    this._expr_22 = import1.UNINITIALIZED;
    this._expr_23 = import1.UNINITIALIZED;
    this._expr_24 = import1.UNINITIALIZED;
    this._expr_25 = import1.UNINITIALIZED;
    this._expr_26 = import1.UNINITIALIZED;
    this._expr_27 = import1.UNINITIALIZED;
    this._expr_28 = import1.UNINITIALIZED;
    this._expr_29 = import1.UNINITIALIZED;
    this._expr_30 = import1.UNINITIALIZED;
    this._expr_31 = import1.UNINITIALIZED;
    this._expr_32 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
    (this.subscription4 && this.subscription4.unsubscribe());
    (this.subscription5 && this.subscription5.unsubscribe());
    (this.subscription6 && this.subscription6.unsubscribe());
    (this.subscription7 && this.subscription7.unsubscribe());
  }
  check_longitude(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.longitude = currValue;
      this._changes['longitude'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_latitude(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.latitude = currValue;
      this._changes['latitude'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_zoom(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.zoom = currValue;
      this._changes['zoom'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_minZoom(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.minZoom = currValue;
      this._changes['minZoom'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_maxZoom(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.maxZoom = currValue;
      this._changes['maxZoom'] = new import1.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_draggable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.draggable = currValue;
      this._changes['draggable'] = new import1.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_disableDoubleClickZoom(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.disableDoubleClickZoom = currValue;
      this._changes['disableDoubleClickZoom'] = new import1.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  check_disableDefaultUI(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.disableDefaultUI = currValue;
      this._changes['disableDefaultUI'] = new import1.SimpleChange(this._expr_7,currValue);
      this._expr_7 = currValue;
    }
  }
  check_scrollwheel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.scrollwheel = currValue;
      this._changes['scrollwheel'] = new import1.SimpleChange(this._expr_8,currValue);
      this._expr_8 = currValue;
    }
  }
  check_backgroundColor(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context.backgroundColor = currValue;
      this._changes['backgroundColor'] = new import1.SimpleChange(this._expr_9,currValue);
      this._expr_9 = currValue;
    }
  }
  check_draggableCursor(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this._changed = true;
      this.context.draggableCursor = currValue;
      this._changes['draggableCursor'] = new import1.SimpleChange(this._expr_10,currValue);
      this._expr_10 = currValue;
    }
  }
  check_draggingCursor(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this._changed = true;
      this.context.draggingCursor = currValue;
      this._changes['draggingCursor'] = new import1.SimpleChange(this._expr_11,currValue);
      this._expr_11 = currValue;
    }
  }
  check_keyboardShortcuts(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_12,currValue))) {
      this._changed = true;
      this.context.keyboardShortcuts = currValue;
      this._changes['keyboardShortcuts'] = new import1.SimpleChange(this._expr_12,currValue);
      this._expr_12 = currValue;
    }
  }
  check_zoomControl(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_13,currValue))) {
      this._changed = true;
      this.context.zoomControl = currValue;
      this._changes['zoomControl'] = new import1.SimpleChange(this._expr_13,currValue);
      this._expr_13 = currValue;
    }
  }
  check_zoomControlOptions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_14,currValue))) {
      this._changed = true;
      this.context.zoomControlOptions = currValue;
      this._changes['zoomControlOptions'] = new import1.SimpleChange(this._expr_14,currValue);
      this._expr_14 = currValue;
    }
  }
  check_styles(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_15,currValue))) {
      this._changed = true;
      this.context.styles = currValue;
      this._changes['styles'] = new import1.SimpleChange(this._expr_15,currValue);
      this._expr_15 = currValue;
    }
  }
  check_usePanning(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_16,currValue))) {
      this._changed = true;
      this.context.usePanning = currValue;
      this._changes['usePanning'] = new import1.SimpleChange(this._expr_16,currValue);
      this._expr_16 = currValue;
    }
  }
  check_streetViewControl(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_17,currValue))) {
      this._changed = true;
      this.context.streetViewControl = currValue;
      this._changes['streetViewControl'] = new import1.SimpleChange(this._expr_17,currValue);
      this._expr_17 = currValue;
    }
  }
  check_streetViewControlOptions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_18,currValue))) {
      this._changed = true;
      this.context.streetViewControlOptions = currValue;
      this._changes['streetViewControlOptions'] = new import1.SimpleChange(this._expr_18,currValue);
      this._expr_18 = currValue;
    }
  }
  check_fitBounds(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_19,currValue))) {
      this._changed = true;
      this.context.fitBounds = currValue;
      this._changes['fitBounds'] = new import1.SimpleChange(this._expr_19,currValue);
      this._expr_19 = currValue;
    }
  }
  check_mapTypeControl(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_20,currValue))) {
      this._changed = true;
      this.context.mapTypeControl = currValue;
      this._changes['mapTypeControl'] = new import1.SimpleChange(this._expr_20,currValue);
      this._expr_20 = currValue;
    }
  }
  check_mapTypeControlOptions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_21,currValue))) {
      this._changed = true;
      this.context.mapTypeControlOptions = currValue;
      this._changes['mapTypeControlOptions'] = new import1.SimpleChange(this._expr_21,currValue);
      this._expr_21 = currValue;
    }
  }
  check_panControlOptions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_22,currValue))) {
      this._changed = true;
      this.context.panControlOptions = currValue;
      this._changes['panControlOptions'] = new import1.SimpleChange(this._expr_22,currValue);
      this._expr_22 = currValue;
    }
  }
  check_rotateControl(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_23,currValue))) {
      this._changed = true;
      this.context.rotateControl = currValue;
      this._changes['rotateControl'] = new import1.SimpleChange(this._expr_23,currValue);
      this._expr_23 = currValue;
    }
  }
  check_rotateControlOptions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_24,currValue))) {
      this._changed = true;
      this.context.rotateControlOptions = currValue;
      this._changes['rotateControlOptions'] = new import1.SimpleChange(this._expr_24,currValue);
      this._expr_24 = currValue;
    }
  }
  check_fullscreenControl(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_25,currValue))) {
      this._changed = true;
      this.context.fullscreenControl = currValue;
      this._changes['fullscreenControl'] = new import1.SimpleChange(this._expr_25,currValue);
      this._expr_25 = currValue;
    }
  }
  check_fullscreenControlOptions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_26,currValue))) {
      this._changed = true;
      this.context.fullscreenControlOptions = currValue;
      this._changes['fullscreenControlOptions'] = new import1.SimpleChange(this._expr_26,currValue);
      this._expr_26 = currValue;
    }
  }
  check_scaleControl(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_27,currValue))) {
      this._changed = true;
      this.context.scaleControl = currValue;
      this._changes['scaleControl'] = new import1.SimpleChange(this._expr_27,currValue);
      this._expr_27 = currValue;
    }
  }
  check_scaleControlOptions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_28,currValue))) {
      this._changed = true;
      this.context.scaleControlOptions = currValue;
      this._changes['scaleControlOptions'] = new import1.SimpleChange(this._expr_28,currValue);
      this._expr_28 = currValue;
    }
  }
  check_mapTypeId(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_29,currValue))) {
      this._changed = true;
      this.context.mapTypeId = currValue;
      this._changes['mapTypeId'] = new import1.SimpleChange(this._expr_29,currValue);
      this._expr_29 = currValue;
    }
  }
  check_clickableIcons(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_30,currValue))) {
      this._changed = true;
      this.context.clickableIcons = currValue;
      this._changes['clickableIcons'] = new import1.SimpleChange(this._expr_30,currValue);
      this._expr_30 = currValue;
    }
  }
  check_gestureHandling(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_31,currValue))) {
      this._changed = true;
      this.context.gestureHandling = currValue;
      this._changes['gestureHandling'] = new import1.SimpleChange(this._expr_31,currValue);
      this._expr_31 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if (changed) {
        this.context.ngOnChanges(this._changes);
        this._changes = {};
      }
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
    }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_32:any = true;
    if (import3.checkBinding(throwOnChange,this._expr_32,currVal_32)) {
      view.renderer.setElementClass(el,'sebm-google-map-container',currVal_32);
      this._expr_32 = currVal_32;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean,emit4:boolean,emit5:boolean,emit6:boolean,emit7:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.mapClick.subscribe(_eventHandler.bind(view,'mapClick'))); }
    if (emit1) { (this.subscription1 = this.context.mapRightClick.subscribe(_eventHandler.bind(view,'mapRightClick'))); }
    if (emit2) { (this.subscription2 = this.context.mapDblClick.subscribe(_eventHandler.bind(view,'mapDblClick'))); }
    if (emit3) { (this.subscription3 = this.context.centerChange.subscribe(_eventHandler.bind(view,'centerChange'))); }
    if (emit4) { (this.subscription4 = this.context.idle.subscribe(_eventHandler.bind(view,'idle'))); }
    if (emit5) { (this.subscription5 = this.context.boundsChange.subscribe(_eventHandler.bind(view,'boundsChange'))); }
    if (emit6) { (this.subscription6 = this.context.zoomChange.subscribe(_eventHandler.bind(view,'zoomChange'))); }
    if (emit7) { (this.subscription7 = this.context.mapReady.subscribe(_eventHandler.bind(view,'mapReady'))); }
  }
}
  const nodeDebugInfos_AgmMap_Host0:import4.StaticNodeDebugInfo[] = [new import4.StaticNodeDebugInfo([
    import5.GoogleMapsAPIWrapper,
    import0.AgmMap,
    import6.MarkerManager,
    import7.InfoWindowManager,
    import8.CircleManager,
    import9.PolylineManager,
    import10.PolygonManager,
    import11.KmlLayerManager,
    import12.DataLayerManager
  ]
,import0.AgmMap,{})];
var renderType_AgmMap_Host:import13.RenderComponentType = import3.createRenderComponentType('',0,import14.ViewEncapsulation.None,([] as any[]),{});
class View_AgmMap_Host0 extends import2.DebugAppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.AgmMap>;
  _GoogleMapsAPIWrapper_0_3:import5.GoogleMapsAPIWrapper;
  _AgmMap_0_4:Wrapper_AgmMap;
  __MarkerManager_0_5:import6.MarkerManager;
  __InfoWindowManager_0_6:import7.InfoWindowManager;
  __CircleManager_0_7:import8.CircleManager;
  __PolylineManager_0_8:import9.PolylineManager;
  __PolygonManager_0_9:import10.PolygonManager;
  __KmlLayerManager_0_10:import11.KmlLayerManager;
  __DataLayerManager_0_11:import12.DataLayerManager;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AgmMap_Host0,renderType_AgmMap_Host,import15.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import16.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_AgmMap_Host0);
  }
  get _MarkerManager_0_5():import6.MarkerManager {
    this.debug(0,0,0);
    if ((this.__MarkerManager_0_5 == null)) { (this.__MarkerManager_0_5 = new import6.MarkerManager(this._GoogleMapsAPIWrapper_0_3,this.injectorGet(import17.NgZone,this.parentIndex))); }
    return this.__MarkerManager_0_5;
  }
  get _InfoWindowManager_0_6():import7.InfoWindowManager {
    this.debug(0,0,0);
    if ((this.__InfoWindowManager_0_6 == null)) { (this.__InfoWindowManager_0_6 = new import7.InfoWindowManager(this._GoogleMapsAPIWrapper_0_3,this.injectorGet(import17.NgZone,this.parentIndex),this._MarkerManager_0_5)); }
    return this.__InfoWindowManager_0_6;
  }
  get _CircleManager_0_7():import8.CircleManager {
    this.debug(0,0,0);
    if ((this.__CircleManager_0_7 == null)) { (this.__CircleManager_0_7 = new import8.CircleManager(this._GoogleMapsAPIWrapper_0_3,this.injectorGet(import17.NgZone,this.parentIndex))); }
    return this.__CircleManager_0_7;
  }
  get _PolylineManager_0_8():import9.PolylineManager {
    this.debug(0,0,0);
    if ((this.__PolylineManager_0_8 == null)) { (this.__PolylineManager_0_8 = new import9.PolylineManager(this._GoogleMapsAPIWrapper_0_3,this.injectorGet(import17.NgZone,this.parentIndex))); }
    return this.__PolylineManager_0_8;
  }
  get _PolygonManager_0_9():import10.PolygonManager {
    this.debug(0,0,0);
    if ((this.__PolygonManager_0_9 == null)) { (this.__PolygonManager_0_9 = new import10.PolygonManager(this._GoogleMapsAPIWrapper_0_3,this.injectorGet(import17.NgZone,this.parentIndex))); }
    return this.__PolygonManager_0_9;
  }
  get _KmlLayerManager_0_10():import11.KmlLayerManager {
    this.debug(0,0,0);
    if ((this.__KmlLayerManager_0_10 == null)) { (this.__KmlLayerManager_0_10 = new import11.KmlLayerManager(this._GoogleMapsAPIWrapper_0_3,this.injectorGet(import17.NgZone,this.parentIndex))); }
    return this.__KmlLayerManager_0_10;
  }
  get _DataLayerManager_0_11():import12.DataLayerManager {
    this.debug(0,0,0);
    if ((this.__DataLayerManager_0_11 == null)) { (this.__DataLayerManager_0_11 = new import12.DataLayerManager(this._GoogleMapsAPIWrapper_0_3,this.injectorGet(import17.NgZone,this.parentIndex))); }
    return this.__DataLayerManager_0_11;
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'agm-map',import3.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_AgmMap0(this.viewUtils,this,0,this._el_0);
    this._GoogleMapsAPIWrapper_0_3 = new import5.GoogleMapsAPIWrapper(this.injectorGet(import19.MapsAPILoader,this.parentIndex),this.injectorGet(import17.NgZone,this.parentIndex));
    this._AgmMap_0_4 = new Wrapper_AgmMap(new import20.ElementRef(this._el_0),this._GoogleMapsAPIWrapper_0_3);
    this.compView_0.create(this._AgmMap_0_4.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import18.ComponentRef_<any>(0,this,this._el_0,this._AgmMap_0_4.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import5.GoogleMapsAPIWrapper) && (0 === requestNodeIndex))) { return this._GoogleMapsAPIWrapper_0_3; }
    if (((token === import0.AgmMap) && (0 === requestNodeIndex))) { return this._AgmMap_0_4.context; }
    if (((token === import6.MarkerManager) && (0 === requestNodeIndex))) { return this._MarkerManager_0_5; }
    if (((token === import7.InfoWindowManager) && (0 === requestNodeIndex))) { return this._InfoWindowManager_0_6; }
    if (((token === import8.CircleManager) && (0 === requestNodeIndex))) { return this._CircleManager_0_7; }
    if (((token === import9.PolylineManager) && (0 === requestNodeIndex))) { return this._PolylineManager_0_8; }
    if (((token === import10.PolygonManager) && (0 === requestNodeIndex))) { return this._PolygonManager_0_9; }
    if (((token === import11.KmlLayerManager) && (0 === requestNodeIndex))) { return this._KmlLayerManager_0_10; }
    if (((token === import12.DataLayerManager) && (0 === requestNodeIndex))) { return this._DataLayerManager_0_11; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._AgmMap_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    this._AgmMap_0_4.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._AgmMap_0_4.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const AgmMapNgFactory:import18.ComponentFactory<import0.AgmMap> = new import18.ComponentFactory<import0.AgmMap>('agm-map',View_AgmMap_Host0,import0.AgmMap);
const styles_AgmMap:any[] = ['.agm-map-container-inner[_ngcontent-%COMP%] {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content[_ngcontent-%COMP%] {\n      display:none;\n    }'];
const nodeDebugInfos_AgmMap0:import4.StaticNodeDebugInfo[] = [
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_AgmMap:import13.RenderComponentType = import3.createRenderComponentType('/Users/jonoforbes/Developer/Ether/ether-app/node_modules/@agm/core/directives/map.d.ts class AgmMap - inline template',1,import14.ViewEncapsulation.Emulated,styles_AgmMap,{});
export class View_AgmMap0 extends import2.DebugAppView<import0.AgmMap> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  _text_6:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AgmMap0,renderType_AgmMap,import15.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import16.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_AgmMap0);
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',this.debug(0,0,0));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','agm-map-container-inner sebm-google-map-container-inner'),this.debug(1,1,4));
    this._text_2 = this.renderer.createText(parentRenderNode,'\n    ',this.debug(2,1,79));
    this._el_3 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','agm-map-content'),this.debug(3,2,4));
    this._text_4 = this.renderer.createText(this._el_3,'\n      ',this.debug(4,2,33));
    this.debug((null as any),3,6);
    this.projectNodes(this._el_3,0);
    this._text_5 = this.renderer.createText(this._el_3,'\n    ',this.debug(5,3,31));
    this._text_6 = this.renderer.createText(parentRenderNode,'\n  ',this.debug(6,4,10));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5,
      this._text_6
    ]
    ),(null as any));
    return (null as any);
  }
}