{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/json-tree/types.ts"],"names":[],"mappings":"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","sourcesContent":["import { compose } from '@ngrx/core/compose';\n\n\nexport const KNOWN = {\n  Array: 'array',\n  Object: 'object',\n  Null: 'null',\n  Undefined: 'undefined',\n  Boolean: 'boolean',\n  Number: 'number',\n  String: 'string',\n  Symbol: 'symbol',\n  Function: 'function',\n  Iterable: 'iterable'\n};\n\nexport function getTypeOf(object: any) {\n  const literalType = typeof object;\n\n  if (literalType === 'object') {\n    if (Array.isArray(object)) {\n      return KNOWN.Array;\n    }\n    if (object === null) {\n      return KNOWN.Null;\n    }\n    if (typeof object[Symbol.iterator] === 'function') {\n      return KNOWN.Iterable;\n    }\n  }\n\n  return literalType;\n}\n\nconst arrayLength = (value: any[]) => value.length;\nconst lengthLabel = (single: string, plural: string) => (length: number) => `${length} ${length === 1 ? single : plural }`;\nconst typeIndicator = (typeIndicator: string) => (input: string) => `${typeIndicator} ${input}`;\nconst typeIdentity = (type: string) => () => type;\nconst withQuotes = (val: string) => `\"${val}\"`;\nconst toString = (val: Object) => val.toString();\nconst iterableToArray = (value: Iterable<any>) => Array.from(value);\n\nconst labelFactoriesForTypes = {\n  [KNOWN.Array]: compose(typeIndicator('[]'), lengthLabel('item', 'items'), arrayLength),\n  [KNOWN.Object]: compose(typeIndicator('{}'), lengthLabel('key', 'keys'), arrayLength, Object.getOwnPropertyNames),\n  [KNOWN.Null]: typeIdentity(KNOWN.Null),\n  [KNOWN.Undefined]: typeIdentity(KNOWN.Undefined),\n  [KNOWN.Boolean]: (val: boolean) => val ? 'true' : 'false',\n  [KNOWN.Number]: toString,\n  [KNOWN.String]: withQuotes,\n  [KNOWN.Symbol]: compose(withQuotes, toString),\n  [KNOWN.Function]: typeIdentity(KNOWN.Function),\n  [KNOWN.Iterable]: compose(typeIndicator('()'), lengthLabel('entry', 'entries'), arrayLength, iterableToArray)\n};\n\nconst lookupLabelForType = (type: string) => labelFactoriesForTypes[type];\n\nexport const getLabelFor = (object: any) => labelFactoriesForTypes[getTypeOf(object)](object);\n\nexport function getChildrenFor(object: any): any[] {\n  const literalType = getTypeOf(object);\n\n  if (literalType === KNOWN.Object) {\n    return Object.getOwnPropertyNames(object).map(name => {\n      return { key: name, value: object[name] };\n    });\n  }\n  else if (literalType === KNOWN.Array) {\n    return object.map((value, index) => {\n      return { key: index, value };\n    });\n  }\n  else if (literalType === KNOWN.Iterable) {\n    return Array.from(object).map((value, index) => {\n      return { key: index, value };\n    });\n  }\n\n  throw new TypeError(`Tried to get children for non-enumerable type \"${literalType}\"`);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}