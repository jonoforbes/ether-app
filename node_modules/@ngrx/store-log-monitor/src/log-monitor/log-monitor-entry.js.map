{"version":3,"file":"log-monitor-entry.js","sourceRoot":"","sources":["../../../src/log-monitor/log-monitor-entry.ts"],"names":[],"mappings":"OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,eAAe;AAKtE;IAAA;QAIG,kBAAa,GAAY,KAAK,CAAC;QAC/B,aAAQ,GAAY,KAAK,CAAC;QAa1B,WAAM,GAAG,IAAI,YAAY,EAAE,CAAC;IAwD/B,CAAC;IApEE,sBAAI,0CAAI;aAQT;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;aAVA,UAAS,KAAmB;YAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,eAAe,GAAG;gBACrB,KAAK,EAAE,KAAK,CAAC,KAAK;gBAClB,MAAM,EAAE,KAAK,CAAC,MAAM;aACrB,CAAC;QACJ,CAAC;;;OAAA;IAQD,+CAAY,GAAZ;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAED,6CAAU,GAAV;QACE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED,2CAAQ,GAAR;QACE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IACI,mCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,mBAAmB;oBAC7B,QAAQ,EAAE,8TAOT;oBACD,MAAM,EAAE,CAAC,yWAkBR,CAAC;iBACH,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,uCAAc,GAA6D,EACjF,CAAC;IACK,uCAAc,GAA2C;QAChE,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACnC,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9B,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KAC5B,CAAC;IACF,+BAAC;AAAD,CAAC,AA1ED,IA0EC","sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { LogEntryItem } from './log-entry-item';\n\n\n\nexport class LogMonitorEntryComponent {\n  private _item: LogEntryItem;\n  public stateActionPair;\n\n   expandEntries: boolean = false;\n   disabled: boolean = false;\n   set item(value: LogEntryItem) {\n    this._item = value;\n    this.stateActionPair = {\n      state: value.state,\n      action: value.action\n    };\n  }\n\n  get item() {\n    return this._item;\n  }\n\n   toggle = new EventEmitter();\n\n  handleToggle() {\n    if (!this.disabled) {\n      this.toggle.next({ id: this.item.actionId });\n    }\n  }\n\n  logPayload() {\n    console.log(this.item.action);\n  }\n\n  logState() {\n    console.log(this.item.state);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'log-monitor-entry',\n  template: `\n    <div class=\"title-bar\" [ngClass]=\"{ collapsed: item.collapsed }\" (click)=\"handleToggle()\">\n      {{ item.action.type }}\n    </div>\n    <div class=\"action-bar\" *ngIf=\"!item.collapsed\">\n      <ngrx-json-tree [value]=\"stateActionPair\" [expanded]=\"expandEntries\"></ngrx-json-tree>\n    </div>\n  `,\n  styles: [`\n    :host{\n      color: #FFFFFF;\n      background-color: #4F5A65;\n      cursor: pointer;\n    }\n    .title-bar{\n      padding: 8px 0 7px 16px;\n      background-color: rgba(0,0,0,0.1);\n    }\n    .action-bar{\n      padding: 20px;\n    }\n    .collapsed{\n      text-decoration: line-through;\n      font-style: italic;\n      opacity: 0.5;\n    }\n  `]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'expandEntries': [{ type: Input },],\n'disabled': [{ type: Input },],\n'item': [{ type: Input },],\n'toggle': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}