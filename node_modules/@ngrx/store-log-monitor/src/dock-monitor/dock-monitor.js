import { Component, ChangeDetectionStrategy, Input, EventEmitter } from '@angular/core';
import { select } from '@ngrx/core/operator/select';
import { StoreDevtools } from '@ngrx/store-devtools';
import { merge } from 'rxjs/observable/merge';
import { map } from 'rxjs/operator/map';
import { DockActions } from './actions';
export var DockMonitorComponent = (function () {
    function DockMonitorComponent(tools, actions) {
        this.state$ = select.call(tools.liftedState, function (s) { return s.monitorState; });
        this.visible$ = select.call(this.state$, function (s) { return s.visible; });
        this.position$ = select.call(this.state$, function (s) { return s.position; });
        this.size$ = select.call(this.state$, function (s) { return s.size; });
        this.toggle$ = new EventEmitter();
        this.changePosition$ = new EventEmitter();
        this.actionsSubscription = merge(map.call(this.toggle$, function () { return actions.toggleVisibility(); }), map.call(this.changePosition$, function () { return actions.changePosition(); })).subscribe(tools);
    }
    DockMonitorComponent.prototype.ngOnDestroy = function () {
        this.actionsSubscription.unsubscribe();
    };
    DockMonitorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'dock-monitor',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: "\n    <ngrx-commander [shortcut]=\"toggleCommand\" (command)=\"toggle$.emit($event)\"></ngrx-commander>\n    <ngrx-commander [shortcut]=\"positionCommand\" (command)=\"changePosition$.emit($event)\"></ngrx-commander>\n\n    <ngrx-dock [visible]=\"visible$ | async\" [position]=\"position$ | async\" [size]=\"size$ | async\">\n      <ng-content></ng-content>\n    </ngrx-dock>\n  "
                },] },
    ];
    /** @nocollapse */
    DockMonitorComponent.ctorParameters = [
        { type: StoreDevtools, },
        { type: DockActions, },
    ];
    DockMonitorComponent.propDecorators = {
        'toggleCommand': [{ type: Input },],
        'positionCommand': [{ type: Input },],
    };
    return DockMonitorComponent;
}());
//# sourceMappingURL=dock-monitor.js.map