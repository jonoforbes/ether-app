{"version":3,"file":"commander.js","sourceRoot":"","sources":["../../../src/dock-monitor/commander.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, Output, Renderer, EventEmitter } from '@angular/core';\nimport { filter } from 'rxjs/operator/filter';\nimport { map } from 'rxjs/operator/map';\nimport { Observable } from 'rxjs/Observable';\nimport { KEYCODES } from './keycodes';\n\n\nexport interface ParsedCommand {\n  name?: string;\n  ctrl: boolean;\n  meta: boolean;\n  shift: boolean;\n  alt: boolean;\n  sequence?: string;\n}\n\n\nexport class CommanderComponent {\n  public keydown$ = new EventEmitter<KeyboardEvent>();\n  private _ignoreTags = ['INPUT', 'SELECT', 'TEXTAREA'];\n\n   shortcut: string;\n   command: Observable<{ command: string }>;\n\n  constructor() {\n    this.keydown$ = new EventEmitter<KeyboardEvent>();\n\n    const filtered$ = filter.call(this.keydown$, (e: KeyboardEvent) => {\n      if (this._ignoreTags.indexOf((e.target as HTMLElement).tagName) !== -1) {\n        return false;\n      }\n\n      if ((e.target as HTMLElement).isContentEditable) {\n        return false;\n      }\n\n      const command = this.parseCommand(this.shortcut);\n\n      if (!command) {\n        return false;\n      }\n\n      const charCode = e.keyCode || e.which;\n      const char = String.fromCharCode(charCode);\n      return command.name.toUpperCase() === char.toUpperCase() &&\n        command.alt === e.altKey &&\n        command.ctrl === e.ctrlKey &&\n        command.meta === e.metaKey &&\n        command.shift === e.shiftKey;\n    });\n\n    this.command = map.call(filtered$, e => {\n      e.preventDefault();\n\n      return { command: this.shortcut };\n    });\n  }\n\n  parseCommand(s: string): ParsedCommand {\n    const keyString = s.trim().toLowerCase();\n\n    if ( !/^(ctrl-|shift-|alt-|meta-){0,4}\\w+$/.test(keyString) ) {\n      throw new Error('The string to parse needs to be of the format \"c\", \"ctrl-c\", \"shift-ctrl-c\".');\n    }\n\n    const parts = keyString.split('-');\n    const key: ParsedCommand = {\n      ctrl: false,\n      meta: false,\n      shift: false,\n      alt: false\n    };\n\n    let c;\n\n    key.name = parts.pop();\n\n    while ((c = parts.pop())) {\n      key[c] = true;\n    }\n\n    if (key.ctrl) {\n      key.sequence = KEYCODES.ctrl[key.name] || key.name;\n    }\n    else {\n      key.sequence = KEYCODES.nomod[key.name] || key.name;\n    }\n\n    if (key.shift && key.sequence && key.sequence.length === 1) {\n      key.sequence = key.sequence.toUpperCase();\n    }\n\n    return key;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngrx-commander',\n  template: '',\n  styles: [':host{ display: none }'],\n  host: {\n    '(document:keydown)': 'keydown$.emit($event)'\n  }\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'shortcut': [{ type: Input },],\n'command': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}