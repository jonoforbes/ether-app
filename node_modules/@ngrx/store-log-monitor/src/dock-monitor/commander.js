import { Component, Input, Output, EventEmitter } from '@angular/core';
import { filter } from 'rxjs/operator/filter';
import { map } from 'rxjs/operator/map';
import { KEYCODES } from './keycodes';
export var CommanderComponent = (function () {
    function CommanderComponent() {
        var _this = this;
        this.keydown$ = new EventEmitter();
        this._ignoreTags = ['INPUT', 'SELECT', 'TEXTAREA'];
        this.keydown$ = new EventEmitter();
        var filtered$ = filter.call(this.keydown$, function (e) {
            if (_this._ignoreTags.indexOf(e.target.tagName) !== -1) {
                return false;
            }
            if (e.target.isContentEditable) {
                return false;
            }
            var command = _this.parseCommand(_this.shortcut);
            if (!command) {
                return false;
            }
            var charCode = e.keyCode || e.which;
            var char = String.fromCharCode(charCode);
            return command.name.toUpperCase() === char.toUpperCase() &&
                command.alt === e.altKey &&
                command.ctrl === e.ctrlKey &&
                command.meta === e.metaKey &&
                command.shift === e.shiftKey;
        });
        this.command = map.call(filtered$, function (e) {
            e.preventDefault();
            return { command: _this.shortcut };
        });
    }
    CommanderComponent.prototype.parseCommand = function (s) {
        var keyString = s.trim().toLowerCase();
        if (!/^(ctrl-|shift-|alt-|meta-){0,4}\w+$/.test(keyString)) {
            throw new Error('The string to parse needs to be of the format "c", "ctrl-c", "shift-ctrl-c".');
        }
        var parts = keyString.split('-');
        var key = {
            ctrl: false,
            meta: false,
            shift: false,
            alt: false
        };
        var c;
        key.name = parts.pop();
        while ((c = parts.pop())) {
            key[c] = true;
        }
        if (key.ctrl) {
            key.sequence = KEYCODES.ctrl[key.name] || key.name;
        }
        else {
            key.sequence = KEYCODES.nomod[key.name] || key.name;
        }
        if (key.shift && key.sequence && key.sequence.length === 1) {
            key.sequence = key.sequence.toUpperCase();
        }
        return key;
    };
    CommanderComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngrx-commander',
                    template: '',
                    styles: [':host{ display: none }'],
                    host: {
                        '(document:keydown)': 'keydown$.emit($event)'
                    }
                },] },
    ];
    /** @nocollapse */
    CommanderComponent.ctorParameters = [];
    CommanderComponent.propDecorators = {
        'shortcut': [{ type: Input },],
        'command': [{ type: Output },],
    };
    return CommanderComponent;
}());
//# sourceMappingURL=commander.js.map