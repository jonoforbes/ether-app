(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@ngrx/store'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define(['exports', '@ngrx/store', '@angular/core'], factory) :
    (factory((global.ngrx-undo = global.ngrx-undo || {}),global.ngrx.store,global.ng.core));
}(this, (function (exports,_ngrx_store,_angular_core) { 'use strict';

function handleUndo(rootReducer, bufferSize) {
    var executedActions = [];
    var initialState = undefined;
    return function (state, action) {
        if (action.type === UNDO_ACTION) {
            // if the action is UNDO_ACTION,
            // then call all the actions again on the rootReducer,
            // except the one we want to rollback
            var newState_1 = initialState;
            executedActions = executedActions.filter(function (eAct) { return eAct !== action.payload; });
            // update the state for every action untill we get the
            // exact same state as before, but without the action we want to rollback
            executedActions.forEach(function (executedAction) {
                return newState_1 = rootReducer(newState_1, executedAction);
            });
            return newState_1;
        }
        // push every action that isn't an UNDO_ACTION to the executedActions property
        executedActions.push(action);
        var updatedState = rootReducer(state, action);
        if (executedActions.length === bufferSize + 1) {
            var firstAction = executedActions[0];
            // calculate the state x (buffersize) actions ago
            initialState = rootReducer(initialState, firstAction);
            // keep the correct actions
            executedActions = executedActions.slice(1, bufferSize + 1);
        }
        return updatedState;
    };
}

function createReducer(dispatcher, reducer, options) {
    return new _ngrx_store.Reducer(dispatcher, handleUndo(reducer, options.bufferSize));
}

var UNDO_DEVTOOLS_CONFIG = new _angular_core.OpaqueToken('@ngrx/undodevtools Options');
var UNDO_ACTION = "ngrx-undo/UNDO_ACTION";
var StoreUndoModule = (function () {
    function StoreUndoModule() {
    }
    StoreUndoModule.interceptStore = function (options) {
        if (options === void 0) { options = { bufferSize: 100 }; }
        return {
            ngModule: StoreUndoModule,
            providers: [
                { provide: UNDO_DEVTOOLS_CONFIG, useValue: options },
                {
                    provide: _ngrx_store.Reducer,
                    deps: [_ngrx_store.Dispatcher, _ngrx_store.INITIAL_REDUCER, UNDO_DEVTOOLS_CONFIG],
                    useFactory: createReducer
                }
            ]
        };
    };
    StoreUndoModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    imports: [
                        _ngrx_store.StoreModule
                    ]
                },] },
    ];
    /** @nocollapse */
    StoreUndoModule.ctorParameters = [];
    return StoreUndoModule;
}());

exports.UNDO_DEVTOOLS_CONFIG = UNDO_DEVTOOLS_CONFIG;
exports.UNDO_ACTION = UNDO_ACTION;
exports.StoreUndoModule = StoreUndoModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));