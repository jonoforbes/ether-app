/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/grid-list/grid-list';
import * as import2 from '@angular/material/core/compatibility/compatibility';
import * as import3 from '@angular/material/core/line/line';
import * as import4 from '@angular/core/src/di/injector';
import * as import5 from '@angular/core/src/change_detection/change_detection_util';
import * as import6 from '@angular/core/src/linker/view';
import * as import7 from '@angular/core/src/linker/view_utils';
import * as import8 from '@angular/core/src/linker/debug_context';
import * as import9 from '@angular/core/src/render/api';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/query_list';
import * as import12 from '@angular/core/src/linker/view_type';
import * as import13 from '@angular/core/src/change_detection/constants';
import * as import14 from '@angular/core/src/linker/component_factory';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from '@angular/material/core/rtl/dir';
import * as import17 from './grid-list.css.ngstyle';
class MdGridListModuleInjector extends import0.NgModuleInjector<import1.MdGridListModule> {
  _CompatibilityModule_0:import2.CompatibilityModule;
  _MdLineModule_1:import3.MdLineModule;
  _MdGridListModule_2:import1.MdGridListModule;
  constructor(parent:import4.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.MdGridListModule {
    this._CompatibilityModule_0 = new import2.CompatibilityModule();
    this._MdLineModule_1 = new import3.MdLineModule();
    this._MdGridListModule_2 = new import1.MdGridListModule();
    return this._MdGridListModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CompatibilityModule)) { return this._CompatibilityModule_0; }
    if ((token === import3.MdLineModule)) { return this._MdLineModule_1; }
    if ((token === import1.MdGridListModule)) { return this._MdGridListModule_2; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdGridListModuleNgFactory:import0.NgModuleFactory<import1.MdGridListModule> = new import0.NgModuleFactory(MdGridListModuleInjector,import1.MdGridListModule);
export class Wrapper_MdGridList {
  /*private*/ _eventHandler:Function;
  context:import1.MdGridList;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import1.MdGridList(p0,p1,p2);
    this._expr_0 = import5.UNINITIALIZED;
    this._expr_1 = import5.UNINITIALIZED;
    this._expr_2 = import5.UNINITIALIZED;
    this._expr_3 = import5.UNINITIALIZED;
  }
  ngOnDetach(view:import6.AppView<any>,componentView:import6.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_cols(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import7.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.cols = currValue;
      this._expr_0 = currValue;
    }
  }
  check_gutterSize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import7.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.gutterSize = currValue;
      this._expr_1 = currValue;
    }
  }
  check_rowHeight(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import7.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.rowHeight = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import6.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import6.AppView<any>,componentView:import6.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_3:any = true;
    if (import7.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementClass(el,'mat-grid-list',currVal_3);
      this._expr_3 = currVal_3;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import6.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdGridList_Host0:import8.StaticNodeDebugInfo[] = [new import8.StaticNodeDebugInfo([import1.MdGridList],import1.MdGridList,{})];
var renderType_MdGridList_Host:import9.RenderComponentType = import7.createRenderComponentType('',0,import10.ViewEncapsulation.None,([] as any[]),{});
class View_MdGridList_Host0 extends import6.DebugAppView<any> {
  _el_0:any;
  compView_0:import6.AppView<import1.MdGridList>;
  _MdGridList_0_3:Wrapper_MdGridList;
  _query_MdGridTile_0_0:import11.QueryList<any>;
  constructor(viewUtils:import7.ViewUtils,parentView:import6.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdGridList_Host0,renderType_MdGridList_Host,import12.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import13.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdGridList_Host0);
  }
  createInternal(rootSelector:string):import14.ComponentRef<any> {
    this._el_0 = import7.selectOrCreateRenderHostElement(this.renderer,'md-grid-list',new import7.InlineArray2(2,'role','list'),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdGridList0(this.viewUtils,this,0,this._el_0);
    this._MdGridList_0_3 = new Wrapper_MdGridList(this.renderer,new import15.ElementRef(this._el_0),this.injectorGet(import16.Dir,this.parentIndex,(null as any)));
    this._query_MdGridTile_0_0 = new import11.QueryList<any>();
    this.compView_0.create(this._MdGridList_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import14.ComponentRef_<any>(0,this,this._el_0,this._MdGridList_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdGridList) && (0 === requestNodeIndex))) { return this._MdGridList_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._MdGridList_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    if (!throwOnChange) {
      if (this._query_MdGridTile_0_0.dirty) {
        this._query_MdGridTile_0_0.reset(([] as any[]));
        this._MdGridList_0_3.context._tiles = this._query_MdGridTile_0_0;
        this._query_MdGridTile_0_0.notifyOnChanges();
      }
      this.debug(0,0,0);
      this._MdGridList_0_3.context.ngAfterContentChecked();
    }
    this._MdGridList_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const MdGridListNgFactory:import14.ComponentFactory<import1.MdGridList> = new import14.ComponentFactory<import1.MdGridList>('md-grid-list, mat-grid-list',View_MdGridList_Host0,import1.MdGridList);
const styles_MdGridList:any[] = [import17.styles];
const nodeDebugInfos_MdGridList0:import8.StaticNodeDebugInfo[] = [new import8.StaticNodeDebugInfo(([] as any[]),(null as any),{})];
var renderType_MdGridList:import9.RenderComponentType = import7.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/node_modules/@angular/material/grid-list/grid-list.html',1,import10.ViewEncapsulation.None,styles_MdGridList,{});
export class View_MdGridList0 extends import6.DebugAppView<import1.MdGridList> {
  _el_0:any;
  constructor(viewUtils:import7.ViewUtils,parentView:import6.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdGridList0,renderType_MdGridList,import12.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import13.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdGridList0);
  }
  createInternal(rootSelector:string):import14.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import7.createRenderElement(this.renderer,parentRenderNode,'div',import7.EMPTY_INLINE_ARRAY,this.debug(0,0,0));
    this.debug((null as any),0,5);
    this.projectNodes(this._el_0,0);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
}