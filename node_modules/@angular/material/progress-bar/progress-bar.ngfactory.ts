/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/progress-bar/progress-bar';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/material/core/compatibility/compatibility';
import * as import4 from '@angular/common/src/localization';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/i18n/tokens';
import * as import7 from '@angular/core/src/change_detection/change_detection_util';
import * as import8 from '@angular/core/src/linker/view';
import * as import9 from '@angular/core/src/linker/view_utils';
import * as import10 from '@angular/core/src/linker/debug_context';
import * as import11 from '@angular/core/src/render/api';
import * as import12 from '@angular/core/src/metadata/view';
import * as import13 from '@angular/core/src/linker/view_type';
import * as import14 from '@angular/core/src/change_detection/constants';
import * as import15 from '@angular/core/src/linker/component_factory';
import * as import16 from './progress-bar.css.shim.ngstyle';
import * as import17 from '@angular/common/src/directives/ng_style';
import * as import18 from '../../common/src/directives/ng_style.ngfactory';
import * as import19 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import20 from '@angular/core/src/linker/element_ref';
class MdProgressBarModuleInjector extends import0.NgModuleInjector<import1.MdProgressBarModule> {
  _CommonModule_0:import2.CommonModule;
  _CompatibilityModule_1:import3.CompatibilityModule;
  _MdProgressBarModule_2:import1.MdProgressBarModule;
  __NgLocalization_3:import4.NgLocaleLocalization;
  constructor(parent:import5.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _NgLocalization_3():import4.NgLocaleLocalization {
    if ((this.__NgLocalization_3 == null)) { (this.__NgLocalization_3 = new import4.NgLocaleLocalization(this.parent.get(import6.LOCALE_ID))); }
    return this.__NgLocalization_3;
  }
  createInternal():import1.MdProgressBarModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._CompatibilityModule_1 = new import3.CompatibilityModule();
    this._MdProgressBarModule_2 = new import1.MdProgressBarModule();
    return this._MdProgressBarModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import3.CompatibilityModule)) { return this._CompatibilityModule_1; }
    if ((token === import1.MdProgressBarModule)) { return this._MdProgressBarModule_2; }
    if ((token === import4.NgLocalization)) { return this._NgLocalization_3; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdProgressBarModuleNgFactory:import0.NgModuleFactory<import1.MdProgressBarModule> = new import0.NgModuleFactory(MdProgressBarModuleInjector,import1.MdProgressBarModule);
export class Wrapper_MdProgressBar {
  /*private*/ _eventHandler:Function;
  context:import1.MdProgressBar;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdProgressBar();
    this._expr_0 = import7.UNINITIALIZED;
    this._expr_1 = import7.UNINITIALIZED;
    this._expr_2 = import7.UNINITIALIZED;
    this._expr_3 = import7.UNINITIALIZED;
    this._expr_4 = import7.UNINITIALIZED;
    this._expr_5 = import7.UNINITIALIZED;
    this._expr_6 = import7.UNINITIALIZED;
    this._expr_7 = import7.UNINITIALIZED;
    this._expr_8 = import7.UNINITIALIZED;
    this._expr_9 = import7.UNINITIALIZED;
  }
  ngOnDetach(view:import8.AppView<any>,componentView:import8.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._expr_0 = currValue;
    }
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.value = currValue;
      this._expr_1 = currValue;
    }
  }
  check_bufferValue(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.bufferValue = currValue;
      this._expr_2 = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import9.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.mode = currValue;
      this._expr_3 = currValue;
    }
  }
  ngDoCheck(view:import8.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import8.AppView<any>,componentView:import8.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_4:any = (this.context.color == 'primary');
    if (import9.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementClass(el,'mat-primary',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = (this.context.color == 'accent');
    if (import9.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementClass(el,'mat-accent',currVal_5);
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = (this.context.color == 'warn');
    if (import9.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementClass(el,'mat-warn',currVal_6);
      this._expr_6 = currVal_6;
    }
    const currVal_7:any = true;
    if (import9.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      view.renderer.setElementClass(el,'mat-progress-bar',currVal_7);
      this._expr_7 = currVal_7;
    }
    const currVal_8:any = this.context.value;
    if (import9.checkBinding(throwOnChange,this._expr_8,currVal_8)) {
      view.renderer.setElementAttribute(el,'aria-valuenow',((currVal_8 == null)? (null as any): currVal_8.toString()));
      this._expr_8 = currVal_8;
    }
    const currVal_9:any = this.context.mode;
    if (import9.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      view.renderer.setElementAttribute(el,'mode',((currVal_9 == null)? (null as any): currVal_9.toString()));
      this._expr_9 = currVal_9;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import8.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdProgressBar_Host0:import10.StaticNodeDebugInfo[] = [new import10.StaticNodeDebugInfo([import1.MdProgressBar],import1.MdProgressBar,{})];
var renderType_MdProgressBar_Host:import11.RenderComponentType = import9.createRenderComponentType('',0,import12.ViewEncapsulation.None,([] as any[]),{});
class View_MdProgressBar_Host0 extends import8.DebugAppView<any> {
  _el_0:any;
  compView_0:import8.AppView<import1.MdProgressBar>;
  _MdProgressBar_0_3:Wrapper_MdProgressBar;
  constructor(viewUtils:import9.ViewUtils,parentView:import8.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdProgressBar_Host0,renderType_MdProgressBar_Host,import13.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import14.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdProgressBar_Host0);
  }
  createInternal(rootSelector:string):import15.ComponentRef<any> {
    this._el_0 = import9.selectOrCreateRenderHostElement(this.renderer,'md-progress-bar',new import9.InlineArray8(6,'aria-valuemax','100','aria-valuemin','0','role','progressbar'),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdProgressBar0(this.viewUtils,this,0,this._el_0);
    this._MdProgressBar_0_3 = new Wrapper_MdProgressBar();
    this.compView_0.create(this._MdProgressBar_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import15.ComponentRef_<any>(0,this,this._el_0,this._MdProgressBar_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdProgressBar) && (0 === requestNodeIndex))) { return this._MdProgressBar_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._MdProgressBar_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this._MdProgressBar_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const MdProgressBarNgFactory:import15.ComponentFactory<import1.MdProgressBar> = new import15.ComponentFactory<import1.MdProgressBar>('md-progress-bar, mat-progress-bar',View_MdProgressBar_Host0,import1.MdProgressBar);
const styles_MdProgressBar:any[] = [import16.styles];
const nodeDebugInfos_MdProgressBar0:import10.StaticNodeDebugInfo[] = [
  new import10.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import10.StaticNodeDebugInfo([import17.NgStyle],(null as any),{}),
  new import10.StaticNodeDebugInfo([import17.NgStyle],(null as any),{}),
  new import10.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdProgressBar:import11.RenderComponentType = import9.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/node_modules/@angular/material/progress-bar/progress-bar.html',0,import12.ViewEncapsulation.Emulated,styles_MdProgressBar,{});
export class View_MdProgressBar0 extends import8.DebugAppView<import1.MdProgressBar> {
  _el_0:any;
  _el_1:any;
  _NgStyle_1_3:import18.Wrapper_NgStyle;
  _el_2:any;
  _NgStyle_2_3:import18.Wrapper_NgStyle;
  _el_3:any;
  constructor(viewUtils:import9.ViewUtils,parentView:import8.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdProgressBar0,renderType_MdProgressBar,import13.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import14.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_MdProgressBar0);
  }
  createInternal(rootSelector:string):import15.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import9.createRenderElement(this.renderer,parentRenderNode,'div',new import9.InlineArray2(2,'class','mat-progress-bar-background mat-progress-bar-element'),this.debug(0,0,0));
    this._el_1 = import9.createRenderElement(this.renderer,parentRenderNode,'div',new import9.InlineArray2(2,'class','mat-progress-bar-buffer mat-progress-bar-element'),this.debug(1,0,72));
    this._NgStyle_1_3 = new import18.Wrapper_NgStyle(this.parentView.injectorGet(import19.KeyValueDiffers,this.parentIndex),new import20.ElementRef(this._el_1),this.renderer);
    this._el_2 = import9.createRenderElement(this.renderer,parentRenderNode,'div',new import9.InlineArray2(2,'class','mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element'),this.debug(2,0,171));
    this._NgStyle_2_3 = new import18.Wrapper_NgStyle(this.parentView.injectorGet(import19.KeyValueDiffers,this.parentIndex),new import20.ElementRef(this._el_2),this.renderer);
    this._el_3 = import9.createRenderElement(this.renderer,parentRenderNode,'div',new import9.InlineArray2(2,'class','mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element'),this.debug(3,0,294));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1,
      this._el_2,
      this._el_3
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import17.NgStyle) && (1 === requestNodeIndex))) { return this._NgStyle_1_3.context; }
    if (((token === import17.NgStyle) && (2 === requestNodeIndex))) { return this._NgStyle_2_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(1,0,134);
    const currVal_1_0_0:any = this.context._bufferTransform();
    this._NgStyle_1_3.check_ngStyle(currVal_1_0_0,throwOnChange,false);
    this._NgStyle_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    this.debug(2,0,256);
    const currVal_2_0_0:any = this.context._primaryTransform();
    this._NgStyle_2_3.check_ngStyle(currVal_2_0_0,throwOnChange,false);
    this._NgStyle_2_3.ngDoCheck(this,this._el_2,throwOnChange);
  }
  destroyInternal():void {
    this.debug(1,0,72);
  }
}