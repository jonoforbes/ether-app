/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/core/compatibility/compatibility';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/linker/view';
class CompatibilityModuleInjector extends import0.NgModuleInjector<import1.CompatibilityModule> {
  _CompatibilityModule_0:import1.CompatibilityModule;
  constructor(parent:import2.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.CompatibilityModule {
    this._CompatibilityModule_0 = new import1.CompatibilityModule();
    return this._CompatibilityModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.CompatibilityModule)) { return this._CompatibilityModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const CompatibilityModuleNgFactory:import0.NgModuleFactory<import1.CompatibilityModule> = new import0.NgModuleFactory(CompatibilityModuleInjector,import1.CompatibilityModule);
class NoConflictStyleCompatibilityModeInjector extends import0.NgModuleInjector<import1.NoConflictStyleCompatibilityMode> {
  _NoConflictStyleCompatibilityMode_0:import1.NoConflictStyleCompatibilityMode;
  __MATERIAL_COMPATIBILITY_MODE_1:any;
  constructor(parent:import2.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _MATERIAL_COMPATIBILITY_MODE_1():any {
    if ((this.__MATERIAL_COMPATIBILITY_MODE_1 == null)) { (this.__MATERIAL_COMPATIBILITY_MODE_1 = true); }
    return this.__MATERIAL_COMPATIBILITY_MODE_1;
  }
  createInternal():import1.NoConflictStyleCompatibilityMode {
    this._NoConflictStyleCompatibilityMode_0 = new import1.NoConflictStyleCompatibilityMode();
    return this._NoConflictStyleCompatibilityMode_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.NoConflictStyleCompatibilityMode)) { return this._NoConflictStyleCompatibilityMode_0; }
    if ((token === import1.MATERIAL_COMPATIBILITY_MODE)) { return this._MATERIAL_COMPATIBILITY_MODE_1; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const NoConflictStyleCompatibilityModeNgFactory:import0.NgModuleFactory<import1.NoConflictStyleCompatibilityMode> = new import0.NgModuleFactory(NoConflictStyleCompatibilityModeInjector,import1.NoConflictStyleCompatibilityMode);
export class Wrapper_MatPrefixRejector {
  /*private*/ _eventHandler:Function;
  context:import1.MatPrefixRejector;
  /*private*/ _changed:boolean;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import1.MatPrefixRejector(p0);
  }
  ngOnDetach(view:import3.AppView<any>,componentView:import3.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import3.AppView<any>,componentView:import3.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import3.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdPrefixRejector {
  /*private*/ _eventHandler:Function;
  context:import1.MdPrefixRejector;
  /*private*/ _changed:boolean;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import1.MdPrefixRejector(p0);
  }
  ngOnDetach(view:import3.AppView<any>,componentView:import3.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import3.AppView<any>,componentView:import3.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import3.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}