/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/core/line/line';
import * as import2 from '@angular/material/core/compatibility/compatibility';
import * as import3 from '@angular/core/src/di/injector';
import * as import4 from '@angular/core/src/change_detection/change_detection_util';
import * as import5 from '@angular/core/src/linker/view';
import * as import6 from '@angular/core/src/linker/view_utils';
class MdLineModuleInjector extends import0.NgModuleInjector<import1.MdLineModule> {
  _CompatibilityModule_0:import2.CompatibilityModule;
  _MdLineModule_1:import1.MdLineModule;
  constructor(parent:import3.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.MdLineModule {
    this._CompatibilityModule_0 = new import2.CompatibilityModule();
    this._MdLineModule_1 = new import1.MdLineModule();
    return this._MdLineModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CompatibilityModule)) { return this._CompatibilityModule_0; }
    if ((token === import1.MdLineModule)) { return this._MdLineModule_1; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdLineModuleNgFactory:import0.NgModuleFactory<import1.MdLineModule> = new import0.NgModuleFactory(MdLineModuleInjector,import1.MdLineModule);
export class Wrapper_MdLine {
  /*private*/ _eventHandler:Function;
  context:import1.MdLine;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdLine();
    this._expr_0 = import4.UNINITIALIZED;
  }
  ngOnDetach(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import5.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = true;
    if (import6.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementClass(el,'mat-line',currVal_0);
      this._expr_0 = currVal_0;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import5.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}