/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/core/projection/projection';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/linker/view';
class ProjectionModuleInjector extends import0.NgModuleInjector<import1.ProjectionModule> {
  _ProjectionModule_0:import1.ProjectionModule;
  __DomProjection_1:import1.DomProjection;
  constructor(parent:import2.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _DomProjection_1():import1.DomProjection {
    if ((this.__DomProjection_1 == null)) { (this.__DomProjection_1 = new import1.DomProjection()); }
    return this.__DomProjection_1;
  }
  createInternal():import1.ProjectionModule {
    this._ProjectionModule_0 = new import1.ProjectionModule();
    return this._ProjectionModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.ProjectionModule)) { return this._ProjectionModule_0; }
    if ((token === import1.DomProjection)) { return this._DomProjection_1; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const ProjectionModuleNgFactory:import0.NgModuleFactory<import1.ProjectionModule> = new import0.NgModuleFactory(ProjectionModuleInjector,import1.ProjectionModule);
export class Wrapper_DomProjectionHost {
  /*private*/ _eventHandler:Function;
  context:import1.DomProjectionHost;
  /*private*/ _changed:boolean;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import1.DomProjectionHost(p0);
  }
  ngOnDetach(view:import3.AppView<any>,componentView:import3.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import3.AppView<any>,componentView:import3.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import3.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}