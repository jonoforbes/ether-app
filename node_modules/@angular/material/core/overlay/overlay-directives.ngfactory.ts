/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/core/overlay/overlay-directives';
import * as import2 from '@angular/material/core/portal/portal-directives';
import * as import3 from '@angular/material/core/overlay/position/overlay-position-builder';
import * as import4 from '@angular/material/core/overlay/overlay';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/material/core/overlay/overlay-container';
import * as import7 from '@angular/material/core/overlay/scroll/scroll-dispatcher';
import * as import8 from '@angular/material/core/overlay/position/viewport-ruler';
import * as import9 from '@angular/core/src/application_ref';
import * as import10 from '@angular/core/src/zone/ng_zone';
import * as import11 from '@angular/core/src/change_detection/change_detection_util';
import * as import12 from '@angular/core/src/linker/view';
import * as import13 from '@angular/core/src/linker/view_utils';
class OverlayModuleInjector extends import0.NgModuleInjector<import1.OverlayModule> {
  _PortalModule_0:import2.PortalModule;
  _OverlayModule_1:import1.OverlayModule;
  __OverlayContainer_2:any;
  __ScrollDispatcher_3:any;
  __ViewportRuler_4:any;
  __OverlayPositionBuilder_5:import3.OverlayPositionBuilder;
  __Overlay_6:import4.Overlay;
  constructor(parent:import5.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _OverlayContainer_2():any {
    if ((this.__OverlayContainer_2 == null)) { (this.__OverlayContainer_2 = import6.OVERLAY_CONTAINER_PROVIDER_FACTORY(this.parent.get(import6.OverlayContainer,(null as any)))); }
    return this.__OverlayContainer_2;
  }
  get _ScrollDispatcher_3():any {
    if ((this.__ScrollDispatcher_3 == null)) { (this.__ScrollDispatcher_3 = import7.SCROLL_DISPATCHER_PROVIDER_FACTORY(this.parent.get(import7.ScrollDispatcher,(null as any)))); }
    return this.__ScrollDispatcher_3;
  }
  get _ViewportRuler_4():any {
    if ((this.__ViewportRuler_4 == null)) { (this.__ViewportRuler_4 = import8.VIEWPORT_RULER_PROVIDER_FACTORY(this.parent.get(import8.ViewportRuler,(null as any)),this._ScrollDispatcher_3)); }
    return this.__ViewportRuler_4;
  }
  get _OverlayPositionBuilder_5():import3.OverlayPositionBuilder {
    if ((this.__OverlayPositionBuilder_5 == null)) { (this.__OverlayPositionBuilder_5 = new import3.OverlayPositionBuilder(this._ViewportRuler_4)); }
    return this.__OverlayPositionBuilder_5;
  }
  get _Overlay_6():import4.Overlay {
    if ((this.__Overlay_6 == null)) { (this.__Overlay_6 = new import4.Overlay(this._OverlayContainer_2,this,this._OverlayPositionBuilder_5,this.parent.get(import9.ApplicationRef),this,this.parent.get(import10.NgZone))); }
    return this.__Overlay_6;
  }
  createInternal():import1.OverlayModule {
    this._PortalModule_0 = new import2.PortalModule();
    this._OverlayModule_1 = new import1.OverlayModule();
    return this._OverlayModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.PortalModule)) { return this._PortalModule_0; }
    if ((token === import1.OverlayModule)) { return this._OverlayModule_1; }
    if ((token === import6.OverlayContainer)) { return this._OverlayContainer_2; }
    if ((token === import7.ScrollDispatcher)) { return this._ScrollDispatcher_3; }
    if ((token === import8.ViewportRuler)) { return this._ViewportRuler_4; }
    if ((token === import3.OverlayPositionBuilder)) { return this._OverlayPositionBuilder_5; }
    if ((token === import4.Overlay)) { return this._Overlay_6; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const OverlayModuleNgFactory:import0.NgModuleFactory<import1.OverlayModule> = new import0.NgModuleFactory(OverlayModuleInjector,import1.OverlayModule);
export class Wrapper_ConnectedOverlayDirective {
  /*private*/ _eventHandler:Function;
  context:import1.ConnectedOverlayDirective;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  constructor(p0:any,p1:any,p2:any,p3:any) {
    this._changed = false;
    this.context = new import1.ConnectedOverlayDirective(p0,p1,p2,p3);
    this._expr_0 = import11.UNINITIALIZED;
    this._expr_1 = import11.UNINITIALIZED;
    this._expr_2 = import11.UNINITIALIZED;
    this._expr_3 = import11.UNINITIALIZED;
    this._expr_4 = import11.UNINITIALIZED;
    this._expr_5 = import11.UNINITIALIZED;
    this._expr_6 = import11.UNINITIALIZED;
    this._expr_7 = import11.UNINITIALIZED;
    this._expr_8 = import11.UNINITIALIZED;
    this._expr_9 = import11.UNINITIALIZED;
    this._expr_10 = import11.UNINITIALIZED;
  }
  ngOnDetach(view:import12.AppView<any>,componentView:import12.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
  }
  check_origin(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import13.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.origin = currValue;
      this._expr_0 = currValue;
    }
  }
  check_positions(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import13.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.positions = currValue;
      this._expr_1 = currValue;
    }
  }
  check_offsetX(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import13.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.offsetX = currValue;
      this._expr_2 = currValue;
    }
  }
  check_offsetY(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import13.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.offsetY = currValue;
      this._expr_3 = currValue;
    }
  }
  check_width(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import13.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.width = currValue;
      this._expr_4 = currValue;
    }
  }
  check_height(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import13.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.height = currValue;
      this._expr_5 = currValue;
    }
  }
  check_minWidth(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import13.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.minWidth = currValue;
      this._expr_6 = currValue;
    }
  }
  check_minHeight(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import13.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.minHeight = currValue;
      this._expr_7 = currValue;
    }
  }
  check_backdropClass(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import13.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.backdropClass = currValue;
      this._expr_8 = currValue;
    }
  }
  check_hasBackdrop(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import13.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context.hasBackdrop = currValue;
      this._expr_9 = currValue;
    }
  }
  check_open(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import13.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this._changed = true;
      this.context.open = currValue;
      this._expr_10 = currValue;
    }
  }
  ngDoCheck(view:import12.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import12.AppView<any>,componentView:import12.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import12.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.backdropClick.subscribe(_eventHandler.bind(view,'backdropClick'))); }
    if (emit1) { (this.subscription1 = this.context.positionChange.subscribe(_eventHandler.bind(view,'positionChange'))); }
    if (emit2) { (this.subscription2 = this.context.attach.subscribe(_eventHandler.bind(view,'attach'))); }
    if (emit3) { (this.subscription3 = this.context.detach.subscribe(_eventHandler.bind(view,'detach'))); }
  }
}
export class Wrapper_OverlayOrigin {
  /*private*/ _eventHandler:Function;
  context:import1.OverlayOrigin;
  /*private*/ _changed:boolean;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import1.OverlayOrigin(p0);
  }
  ngOnDetach(view:import12.AppView<any>,componentView:import12.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import12.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import12.AppView<any>,componentView:import12.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import12.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}