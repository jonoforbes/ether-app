/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/core/observe-content/observe-content';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/linker/view';
class ObserveContentModuleInjector extends import0.NgModuleInjector<import1.ObserveContentModule> {
  _ObserveContentModule_0:import1.ObserveContentModule;
  constructor(parent:import2.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.ObserveContentModule {
    this._ObserveContentModule_0 = new import1.ObserveContentModule();
    return this._ObserveContentModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.ObserveContentModule)) { return this._ObserveContentModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const ObserveContentModuleNgFactory:import0.NgModuleFactory<import1.ObserveContentModule> = new import0.NgModuleFactory(ObserveContentModuleInjector,import1.ObserveContentModule);
export class Wrapper_ObserveContent {
  /*private*/ _eventHandler:Function;
  context:import1.ObserveContent;
  /*private*/ _changed:boolean;
  subscription0:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import1.ObserveContent(p0);
  }
  ngOnDetach(view:import3.AppView<any>,componentView:import3.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  ngDoCheck(view:import3.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import3.AppView<any>,componentView:import3.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import3.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.event.subscribe(_eventHandler.bind(view,'cdkObserveContent'))); }
  }
}