/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/core/option/option';
import * as import2 from '@angular/material/core/compatibility/compatibility';
import * as import3 from '@angular/material/core/ripple/ripple';
import * as import4 from '@angular/common/src/common_module';
import * as import5 from '@angular/common/src/localization';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/material/core/overlay/scroll/scroll-dispatcher';
import * as import8 from '@angular/material/core/overlay/position/viewport-ruler';
import * as import9 from '@angular/core/src/i18n/tokens';
import * as import10 from '@angular/core/src/change_detection/change_detection_util';
import * as import11 from '@angular/core/src/linker/view';
import * as import12 from '@angular/core/src/linker/view_utils';
import * as import13 from '@angular/core/src/linker/debug_context';
import * as import14 from '@angular/core/src/render/api';
import * as import15 from '@angular/core/src/metadata/view';
import * as import16 from '@angular/core/src/linker/view_type';
import * as import17 from '@angular/core/src/change_detection/constants';
import * as import18 from '@angular/core/src/linker/component_factory';
import * as import19 from '@angular/core/src/linker/element_ref';
import * as import20 from '../ripple/ripple.ngfactory';
import * as import21 from '@angular/core/src/linker/view_container';
import * as import22 from '@angular/core/src/zone/ng_zone';
import * as import23 from '@angular/core/src/linker/template_ref';
import * as import24 from '@angular/common/src/directives/ng_if';
import * as import25 from '../../../common/src/directives/ng_if.ngfactory';
class MdOptionModuleInjector extends import0.NgModuleInjector<import1.MdOptionModule> {
  _CompatibilityModule_0:import2.CompatibilityModule;
  _MdRippleModule_1:import3.MdRippleModule;
  _CommonModule_2:import4.CommonModule;
  _MdOptionModule_3:import1.MdOptionModule;
  __ScrollDispatcher_4:any;
  __ViewportRuler_5:any;
  __NgLocalization_6:import5.NgLocaleLocalization;
  constructor(parent:import6.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _ScrollDispatcher_4():any {
    if ((this.__ScrollDispatcher_4 == null)) { (this.__ScrollDispatcher_4 = import7.SCROLL_DISPATCHER_PROVIDER_FACTORY(this.parent.get(import7.ScrollDispatcher,(null as any)))); }
    return this.__ScrollDispatcher_4;
  }
  get _ViewportRuler_5():any {
    if ((this.__ViewportRuler_5 == null)) { (this.__ViewportRuler_5 = import8.VIEWPORT_RULER_PROVIDER_FACTORY(this.parent.get(import8.ViewportRuler,(null as any)),this._ScrollDispatcher_4)); }
    return this.__ViewportRuler_5;
  }
  get _NgLocalization_6():import5.NgLocaleLocalization {
    if ((this.__NgLocalization_6 == null)) { (this.__NgLocalization_6 = new import5.NgLocaleLocalization(this.parent.get(import9.LOCALE_ID))); }
    return this.__NgLocalization_6;
  }
  createInternal():import1.MdOptionModule {
    this._CompatibilityModule_0 = new import2.CompatibilityModule();
    this._MdRippleModule_1 = new import3.MdRippleModule();
    this._CommonModule_2 = new import4.CommonModule();
    this._MdOptionModule_3 = new import1.MdOptionModule();
    return this._MdOptionModule_3;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CompatibilityModule)) { return this._CompatibilityModule_0; }
    if ((token === import3.MdRippleModule)) { return this._MdRippleModule_1; }
    if ((token === import4.CommonModule)) { return this._CommonModule_2; }
    if ((token === import1.MdOptionModule)) { return this._MdOptionModule_3; }
    if ((token === import7.ScrollDispatcher)) { return this._ScrollDispatcher_4; }
    if ((token === import8.ViewportRuler)) { return this._ViewportRuler_5; }
    if ((token === import5.NgLocalization)) { return this._NgLocalization_6; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdOptionModuleNgFactory:import0.NgModuleFactory<import1.MdOptionModule> = new import0.NgModuleFactory(MdOptionModuleInjector,import1.MdOptionModule);
export class Wrapper_MdOption {
  /*private*/ _eventHandler:Function;
  context:import1.MdOption;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  subscription0:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.MdOption(p0,p1);
    this._expr_0 = import10.UNINITIALIZED;
    this._expr_1 = import10.UNINITIALIZED;
    this._expr_2 = import10.UNINITIALIZED;
    this._expr_3 = import10.UNINITIALIZED;
    this._expr_4 = import10.UNINITIALIZED;
    this._expr_5 = import10.UNINITIALIZED;
    this._expr_6 = import10.UNINITIALIZED;
    this._expr_7 = import10.UNINITIALIZED;
    this._expr_8 = import10.UNINITIALIZED;
    this._expr_9 = import10.UNINITIALIZED;
  }
  ngOnDetach(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import12.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.value = currValue;
      this._expr_0 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import12.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import11.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_2:any = this.context._getTabIndex();
    if (import12.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      view.renderer.setElementAttribute(el,'tabindex',((currVal_2 == null)? (null as any): currVal_2.toString()));
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = this.context.selected;
    if (import12.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementClass(el,'mat-selected',currVal_3);
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context.active;
    if (import12.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementClass(el,'mat-active',currVal_4);
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context.id;
    if (import12.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementProperty(el,'id',currVal_5);
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this.context.selected.toString();
    if (import12.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementAttribute(el,'aria-selected',((currVal_6 == null)? (null as any): currVal_6.toString()));
      this._expr_6 = currVal_6;
    }
    const currVal_7:any = this.context.disabled.toString();
    if (import12.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      view.renderer.setElementAttribute(el,'aria-disabled',((currVal_7 == null)? (null as any): currVal_7.toString()));
      this._expr_7 = currVal_7;
    }
    const currVal_8:any = this.context.disabled;
    if (import12.checkBinding(throwOnChange,this._expr_8,currVal_8)) {
      view.renderer.setElementClass(el,'mat-option-disabled',currVal_8);
      this._expr_8 = currVal_8;
    }
    const currVal_9:any = true;
    if (import12.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      view.renderer.setElementClass(el,'mat-option',currVal_9);
      this._expr_9 = currVal_9;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.context._selectViaInteraction()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'keydown')) {
      const pd_sub_1:any = ((<any>this.context._handleKeydown($event)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
  subscribe(view:import11.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.onSelect.subscribe(_eventHandler.bind(view,'onSelect'))); }
  }
}
const nodeDebugInfos_MdOption_Host0:import13.StaticNodeDebugInfo[] = [new import13.StaticNodeDebugInfo([import1.MdOption],import1.MdOption,{})];
var renderType_MdOption_Host:import14.RenderComponentType = import12.createRenderComponentType('',0,import15.ViewEncapsulation.None,([] as any[]),{});
class View_MdOption_Host0 extends import11.DebugAppView<any> {
  _el_0:any;
  compView_0:import11.AppView<import1.MdOption>;
  _MdOption_0_3:Wrapper_MdOption;
  constructor(viewUtils:import12.ViewUtils,parentView:import11.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdOption_Host0,renderType_MdOption_Host,import16.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import17.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdOption_Host0);
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    this._el_0 = import12.selectOrCreateRenderHostElement(this.renderer,'md-option',new import12.InlineArray2(2,'role','option'),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdOption0(this.viewUtils,this,0,this._el_0);
    this._MdOption_0_3 = new Wrapper_MdOption(new import19.ElementRef(this._el_0),this.renderer);
    this.compView_0.create(this._MdOption_0_3.context);
    var disposable_0:Function = import12.subscribeToRenderElement(this,this._el_0,new import12.InlineArray4(4,'click',(null as any),'keydown',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import18.ComponentRef_<any>(0,this,this._el_0,this._MdOption_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdOption) && (0 === requestNodeIndex))) { return this._MdOption_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._MdOption_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._MdOption_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._MdOption_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.debug(0,0,0);
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._MdOption_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const MdOptionNgFactory:import18.ComponentFactory<import1.MdOption> = new import18.ComponentFactory<import1.MdOption>('md-option, mat-option',View_MdOption_Host0,import1.MdOption);
const styles_MdOption:any[] = ([] as any[]);
const nodeDebugInfos_MdOption1:import13.StaticNodeDebugInfo[] = [new import13.StaticNodeDebugInfo([import3.MdRipple],(null as any),{})];
class View_MdOption1 extends import11.DebugAppView<any> {
  _el_0:any;
  _MdRipple_0_3:import20.Wrapper_MdRipple;
  constructor(viewUtils:import12.ViewUtils,parentView:import11.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import21.ViewContainer) {
    super(View_MdOption1,renderType_MdOption,import16.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import17.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdOption1,declaredViewContainer);
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    this._el_0 = import12.createRenderElement(this.renderer,(null as any),'div',new import12.InlineArray4(4,'class','mat-option-ripple','md-ripple',''),this.debug(0,0,25));
    this._MdRipple_0_3 = new import20.Wrapper_MdRipple(new import19.ElementRef(this._el_0),this.parentView.injectorGet(import22.NgZone,this.parentIndex),this.parentView.injectorGet(import8.ViewportRuler,this.parentIndex));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.MdRipple) && (0 === requestNodeIndex))) { return this._MdRipple_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,84);
    const currVal_0_0_0:any = this.parentView.context._getHostElement();
    this._MdRipple_0_3.check_trigger(currVal_0_0_0,throwOnChange,false);
    this._MdRipple_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._MdRipple_0_3.checkHost(this,this,this._el_0,throwOnChange);
  }
  destroyInternal():void {
    this._MdRipple_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
  const nodeDebugInfos_MdOption0:import13.StaticNodeDebugInfo[] = [new import13.StaticNodeDebugInfo([
    import23.TemplateRef,
    import24.NgIf
  ]
,(null as any),{})];
var renderType_MdOption:import14.RenderComponentType = import12.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/node_modules/@angular/material/core/option/option.html',1,import15.ViewEncapsulation.None,styles_MdOption,{});
export class View_MdOption0 extends import11.DebugAppView<import1.MdOption> {
  _anchor_0:any;
  /*private*/ _vc_0:import21.ViewContainer;
  _TemplateRef_0_5:any;
  _NgIf_0_6:import25.Wrapper_NgIf;
  constructor(viewUtils:import12.ViewUtils,parentView:import11.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdOption0,renderType_MdOption,import16.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import17.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdOption0);
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this.debug((null as any),0,0);
    this.projectNodes(parentRenderNode,0);
    this._anchor_0 = this.renderer.createTemplateAnchor(parentRenderNode,this.debug(0,0,25));
    this._vc_0 = new import21.ViewContainer(0,(null as any),this,this._anchor_0);
    this._TemplateRef_0_5 = new import23.TemplateRef_(this,0,this._anchor_0);
    this._NgIf_0_6 = new import25.Wrapper_NgIf(this._vc_0.vcRef,this._TemplateRef_0_5);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [this._anchor_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import23.TemplateRef) && (0 === requestNodeIndex))) { return this._TemplateRef_0_5; }
    if (((token === import24.NgIf) && (0 === requestNodeIndex))) { return this._NgIf_0_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,56);
    const currVal_0_0_0:boolean = !this.context.disabled;
    this._NgIf_0_6.check_ngIf(currVal_0_0_0,throwOnChange,false);
    this._NgIf_0_6.ngDoCheck(this,this._anchor_0,throwOnChange);
    this._vc_0.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_0.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import11.AppView<any> {
    if ((nodeIndex == 0)) { return new View_MdOption1(this.viewUtils,this,0,this._anchor_0,this._vc_0); }
    return (null as any);
  }
}