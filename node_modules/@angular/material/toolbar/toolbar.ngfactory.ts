/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/toolbar/toolbar';
import * as import2 from '@angular/material/core/compatibility/compatibility';
import * as import3 from '@angular/core/src/di/injector';
import * as import4 from '@angular/core/src/change_detection/change_detection_util';
import * as import5 from '@angular/core/src/linker/view';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import7 from '@angular/core/src/linker/debug_context';
import * as import8 from '@angular/core/src/render/api';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/view_type';
import * as import11 from '@angular/core/src/change_detection/constants';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from './toolbar.css.ngstyle';
class MdToolbarModuleInjector extends import0.NgModuleInjector<import1.MdToolbarModule> {
  _CompatibilityModule_0:import2.CompatibilityModule;
  _MdToolbarModule_1:import1.MdToolbarModule;
  constructor(parent:import3.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.MdToolbarModule {
    this._CompatibilityModule_0 = new import2.CompatibilityModule();
    this._MdToolbarModule_1 = new import1.MdToolbarModule();
    return this._MdToolbarModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CompatibilityModule)) { return this._CompatibilityModule_0; }
    if ((token === import1.MdToolbarModule)) { return this._MdToolbarModule_1; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdToolbarModuleNgFactory:import0.NgModuleFactory<import1.MdToolbarModule> = new import0.NgModuleFactory(MdToolbarModuleInjector,import1.MdToolbarModule);
export class Wrapper_MdToolbar {
  /*private*/ _eventHandler:Function;
  context:import1.MdToolbar;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.MdToolbar(p0,p1);
    this._expr_0 = import4.UNINITIALIZED;
    this._expr_1 = import4.UNINITIALIZED;
  }
  ngOnDetach(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import6.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import5.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_1:any = true;
    if (import6.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      view.renderer.setElementClass(el,'mat-toolbar',currVal_1);
      this._expr_1 = currVal_1;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import5.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdToolbarRow {
  /*private*/ _eventHandler:Function;
  context:import1.MdToolbarRow;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdToolbarRow();
    this._expr_0 = import4.UNINITIALIZED;
  }
  ngOnDetach(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import5.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = true;
    if (import6.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementClass(el,'mat-toolbar-row',currVal_0);
      this._expr_0 = currVal_0;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import5.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdToolbar_Host0:import7.StaticNodeDebugInfo[] = [new import7.StaticNodeDebugInfo([import1.MdToolbar],import1.MdToolbar,{})];
var renderType_MdToolbar_Host:import8.RenderComponentType = import6.createRenderComponentType('',0,import9.ViewEncapsulation.None,([] as any[]),{});
class View_MdToolbar_Host0 extends import5.DebugAppView<any> {
  _el_0:any;
  compView_0:import5.AppView<import1.MdToolbar>;
  _MdToolbar_0_3:Wrapper_MdToolbar;
  constructor(viewUtils:import6.ViewUtils,parentView:import5.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdToolbar_Host0,renderType_MdToolbar_Host,import10.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import11.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdToolbar_Host0);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer,'md-toolbar',new import6.InlineArray2(2,'role','toolbar'),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdToolbar0(this.viewUtils,this,0,this._el_0);
    this._MdToolbar_0_3 = new Wrapper_MdToolbar(new import13.ElementRef(this._el_0),this.renderer);
    this.compView_0.create(this._MdToolbar_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import12.ComponentRef_<any>(0,this,this._el_0,this._MdToolbar_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdToolbar) && (0 === requestNodeIndex))) { return this._MdToolbar_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._MdToolbar_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this._MdToolbar_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
    if (((nodeIndex == 0) && (ngContentIndex == 1))) {  }
  }
}
export const MdToolbarNgFactory:import12.ComponentFactory<import1.MdToolbar> = new import12.ComponentFactory<import1.MdToolbar>('md-toolbar, mat-toolbar',View_MdToolbar_Host0,import1.MdToolbar);
const styles_MdToolbar:any[] = [import14.styles];
const nodeDebugInfos_MdToolbar0:import7.StaticNodeDebugInfo[] = [
  new import7.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import7.StaticNodeDebugInfo([import1.MdToolbarRow],(null as any),{})
]
;
var renderType_MdToolbar:import8.RenderComponentType = import6.createRenderComponentType('/Users/jonoforbes/Developer/Ether/ether-app/node_modules/@angular/material/toolbar/toolbar.html',2,import9.ViewEncapsulation.None,styles_MdToolbar,{});
export class View_MdToolbar0 extends import5.DebugAppView<import1.MdToolbar> {
  _el_0:any;
  _el_1:any;
  _MdToolbarRow_1_3:Wrapper_MdToolbarRow;
  constructor(viewUtils:import6.ViewUtils,parentView:import5.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdToolbar0,renderType_MdToolbar,import10.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import11.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_MdToolbar0);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import6.createRenderElement(this.renderer,parentRenderNode,'div',new import6.InlineArray2(2,'class','mat-toolbar-layout'),this.debug(0,0,0));
    this._el_1 = import6.createRenderElement(this.renderer,this._el_0,'md-toolbar-row',import6.EMPTY_INLINE_ARRAY,this.debug(1,0,32));
    this._MdToolbarRow_1_3 = new Wrapper_MdToolbarRow();
    this.debug((null as any),0,48);
    this.projectNodes(this._el_1,0);
    this.debug((null as any),0,90);
    this.projectNodes(this._el_0,1);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdToolbarRow) && (1 === requestNodeIndex))) { return this._MdToolbarRow_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(1,0,32);
    this._MdToolbarRow_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    this._MdToolbarRow_1_3.checkHost(this,this,this._el_1,throwOnChange);
  }
}