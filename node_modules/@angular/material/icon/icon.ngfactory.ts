/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/icon/icon';
import * as import2 from '@angular/http/src/http_module';
import * as import3 from '@angular/material/core/compatibility/compatibility';
import * as import4 from '@angular/http/src/backends/browser_xhr';
import * as import5 from '@angular/http/src/base_response_options';
import * as import6 from '@angular/http/src/backends/xhr_backend';
import * as import7 from '@angular/http/src/base_request_options';
import * as import8 from '@angular/core/src/di/injector';
import * as import9 from '@angular/material/icon/icon-registry';
import * as import10 from '@angular/platform-browser/src/security/dom_sanitization_service';
import * as import11 from '@angular/http/src/interfaces';
import * as import12 from '@angular/http/src/http';
import * as import13 from '@angular/core/src/change_detection/change_detection_util';
import * as import14 from '@angular/core/src/linker/view';
import * as import15 from '@angular/core/src/linker/view_utils';
import * as import16 from '@angular/core/src/linker/debug_context';
import * as import17 from '@angular/core/src/render/api';
import * as import18 from '@angular/core/src/metadata/view';
import * as import19 from '@angular/core/src/linker/view_type';
import * as import20 from '@angular/core/src/change_detection/constants';
import * as import21 from '@angular/core/src/linker/component_factory';
import * as import22 from '@angular/core/src/linker/element_ref';
import * as import23 from './icon.css.ngstyle';
class MdIconModuleInjector extends import0.NgModuleInjector<import1.MdIconModule> {
  _HttpModule_0:import2.HttpModule;
  _CompatibilityModule_1:import3.CompatibilityModule;
  _MdIconModule_2:import1.MdIconModule;
  __BrowserXhr_3:import4.BrowserXhr;
  __ResponseOptions_4:import5.BaseResponseOptions;
  __XSRFStrategy_5:any;
  __XHRBackend_6:import6.XHRBackend;
  __RequestOptions_7:import7.BaseRequestOptions;
  __Http_8:any;
  __MdIconRegistry_9:any;
  constructor(parent:import8.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _BrowserXhr_3():import4.BrowserXhr {
    if ((this.__BrowserXhr_3 == null)) { (this.__BrowserXhr_3 = new import4.BrowserXhr()); }
    return this.__BrowserXhr_3;
  }
  get _ResponseOptions_4():import5.BaseResponseOptions {
    if ((this.__ResponseOptions_4 == null)) { (this.__ResponseOptions_4 = new import5.BaseResponseOptions()); }
    return this.__ResponseOptions_4;
  }
  get _XSRFStrategy_5():any {
    if ((this.__XSRFStrategy_5 == null)) { (this.__XSRFStrategy_5 = import2._createDefaultCookieXSRFStrategy()); }
    return this.__XSRFStrategy_5;
  }
  get _XHRBackend_6():import6.XHRBackend {
    if ((this.__XHRBackend_6 == null)) { (this.__XHRBackend_6 = new import6.XHRBackend(this._BrowserXhr_3,this._ResponseOptions_4,this._XSRFStrategy_5)); }
    return this.__XHRBackend_6;
  }
  get _RequestOptions_7():import7.BaseRequestOptions {
    if ((this.__RequestOptions_7 == null)) { (this.__RequestOptions_7 = new import7.BaseRequestOptions()); }
    return this.__RequestOptions_7;
  }
  get _Http_8():any {
    if ((this.__Http_8 == null)) { (this.__Http_8 = import2.httpFactory(this._XHRBackend_6,this._RequestOptions_7)); }
    return this.__Http_8;
  }
  get _MdIconRegistry_9():any {
    if ((this.__MdIconRegistry_9 == null)) { (this.__MdIconRegistry_9 = import1.ICON_REGISTRY_PROVIDER_FACTORY(this.parent.get(import9.MdIconRegistry,(null as any)),this._Http_8,this.parent.get(import10.DomSanitizer))); }
    return this.__MdIconRegistry_9;
  }
  createInternal():import1.MdIconModule {
    this._HttpModule_0 = new import2.HttpModule();
    this._CompatibilityModule_1 = new import3.CompatibilityModule();
    this._MdIconModule_2 = new import1.MdIconModule();
    return this._MdIconModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.HttpModule)) { return this._HttpModule_0; }
    if ((token === import3.CompatibilityModule)) { return this._CompatibilityModule_1; }
    if ((token === import1.MdIconModule)) { return this._MdIconModule_2; }
    if ((token === import4.BrowserXhr)) { return this._BrowserXhr_3; }
    if ((token === import5.ResponseOptions)) { return this._ResponseOptions_4; }
    if ((token === import11.XSRFStrategy)) { return this._XSRFStrategy_5; }
    if ((token === import6.XHRBackend)) { return this._XHRBackend_6; }
    if ((token === import7.RequestOptions)) { return this._RequestOptions_7; }
    if ((token === import12.Http)) { return this._Http_8; }
    if ((token === import9.MdIconRegistry)) { return this._MdIconRegistry_9; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdIconModuleNgFactory:import0.NgModuleFactory<import1.MdIconModule> = new import0.NgModuleFactory(MdIconModuleInjector,import1.MdIconModule);
export class Wrapper_MdIcon {
  /*private*/ _eventHandler:Function;
  context:import1.MdIcon;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import1.MdIcon(p0,p1,p2);
    this._expr_0 = import13.UNINITIALIZED;
    this._expr_1 = import13.UNINITIALIZED;
    this._expr_2 = import13.UNINITIALIZED;
    this._expr_3 = import13.UNINITIALIZED;
    this._expr_4 = import13.UNINITIALIZED;
    this._expr_5 = import13.UNINITIALIZED;
    this._expr_6 = import13.UNINITIALIZED;
  }
  ngOnDetach(view:import14.AppView<any>,componentView:import14.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_svgIcon(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.svgIcon = currValue;
      this._changes['svgIcon'] = new import13.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_fontSet(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.fontSet = currValue;
      this._changes['fontSet'] = new import13.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_fontIcon(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.fontIcon = currValue;
      this._changes['fontIcon'] = new import13.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_alt(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.alt = currValue;
      this._changes['alt'] = new import13.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_hostAriaLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.hostAriaLabel = currValue;
      this._changes['hostAriaLabel'] = new import13.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._changes['color'] = new import13.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  ngDoCheck(view:import14.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if (changed) {
        this.context.ngOnChanges(this._changes);
        this._changes = {};
      }
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
    }
    return changed;
  }
  checkHost(view:import14.AppView<any>,componentView:import14.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_6:any = true;
    if (import15.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementClass(el,'mat-icon',currVal_6);
      this._expr_6 = currVal_6;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import14.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdIcon_Host0:import16.StaticNodeDebugInfo[] = [new import16.StaticNodeDebugInfo([import1.MdIcon],import1.MdIcon,{})];
var renderType_MdIcon_Host:import17.RenderComponentType = import15.createRenderComponentType('',0,import18.ViewEncapsulation.None,([] as any[]),{});
class View_MdIcon_Host0 extends import14.DebugAppView<any> {
  _el_0:any;
  compView_0:import14.AppView<import1.MdIcon>;
  _MdIcon_0_3:Wrapper_MdIcon;
  constructor(viewUtils:import15.ViewUtils,parentView:import14.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdIcon_Host0,renderType_MdIcon_Host,import19.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import20.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdIcon_Host0);
  }
  createInternal(rootSelector:string):import21.ComponentRef<any> {
    this._el_0 = import15.selectOrCreateRenderHostElement(this.renderer,'md-icon',new import15.InlineArray2(2,'role','img'),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdIcon0(this.viewUtils,this,0,this._el_0);
    this._MdIcon_0_3 = new Wrapper_MdIcon(new import22.ElementRef(this._el_0),this.renderer,this.injectorGet(import9.MdIconRegistry,this.parentIndex));
    this.compView_0.create(this._MdIcon_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import21.ComponentRef_<any>(0,this,this._el_0,this._MdIcon_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdIcon) && (0 === requestNodeIndex))) { return this._MdIcon_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._MdIcon_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this._MdIcon_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) {
      this.debug(0,0,0);
      this._MdIcon_0_3.context.ngAfterViewChecked();
    }
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const MdIconNgFactory:import21.ComponentFactory<import1.MdIcon> = new import21.ComponentFactory<import1.MdIcon>('md-icon, mat-icon',View_MdIcon_Host0,import1.MdIcon);
const styles_MdIcon:any[] = [import23.styles];
const nodeDebugInfos_MdIcon0:import16.StaticNodeDebugInfo[] = ([] as any[]);
var renderType_MdIcon:import17.RenderComponentType = import15.createRenderComponentType('/Users/jonoforbes/Developer/Ether/ether-app/node_modules/@angular/material/icon/icon.d.ts class MdIcon - inline template',1,import18.ViewEncapsulation.None,styles_MdIcon,{});
export class View_MdIcon0 extends import14.DebugAppView<import1.MdIcon> {
  constructor(viewUtils:import15.ViewUtils,parentView:import14.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdIcon0,renderType_MdIcon,import19.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import20.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_MdIcon0);
  }
  createInternal(rootSelector:string):import21.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this.debug((null as any),0,0);
    this.projectNodes(parentRenderNode,0);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): ([] as any[])),(null as any));
    return (null as any);
  }
}