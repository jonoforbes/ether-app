/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/material/autocomplete/autocomplete';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/linker/debug_context';
import * as import5 from '@angular/core/src/render/api';
import * as import6 from '@angular/core/src/metadata/view';
import * as import7 from '@angular/core/src/linker/query_list';
import * as import8 from '@angular/core/src/linker/view_type';
import * as import9 from '@angular/core/src/change_detection/constants';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from './autocomplete.css.ngstyle';
import * as import12 from '@angular/common/src/directives/ng_class';
import * as import13 from '../../common/src/directives/ng_class.ngfactory';
import * as import14 from '@angular/core/src/linker/view_container';
import * as import15 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import16 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import17 from '@angular/core/src/linker/element_ref';
import * as import18 from '@angular/core/src/linker/template_ref';
export class Wrapper_MdAutocomplete {
  /*private*/ _eventHandler:Function;
  context:import0.MdAutocomplete;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor() {
    this._changed = false;
    this.context = new import0.MdAutocomplete();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_displayWith(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.displayWith = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_1:any = true;
    if (import3.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      view.renderer.setElementClass(el,'mat-autocomplete',currVal_1);
      this._expr_1 = currVal_1;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdAutocomplete_Host0:import4.StaticNodeDebugInfo[] = [new import4.StaticNodeDebugInfo([import0.MdAutocomplete],import0.MdAutocomplete,{})];
var renderType_MdAutocomplete_Host:import5.RenderComponentType = import3.createRenderComponentType('',0,import6.ViewEncapsulation.None,([] as any[]),{});
class View_MdAutocomplete_Host0 extends import2.DebugAppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.MdAutocomplete>;
  _MdAutocomplete_0_3:Wrapper_MdAutocomplete;
  _query_MdOption_0_0:import7.QueryList<any>;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdAutocomplete_Host0,renderType_MdAutocomplete_Host,import8.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdAutocomplete_Host0);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'md-autocomplete',import3.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdAutocomplete0(this.viewUtils,this,0,this._el_0);
    this._MdAutocomplete_0_3 = new Wrapper_MdAutocomplete();
    this._query_MdOption_0_0 = new import7.QueryList<any>();
    this.compView_0.create(this._MdAutocomplete_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import10.ComponentRef_<any>(0,this,this._el_0,this._MdAutocomplete_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.MdAutocomplete) && (0 === requestNodeIndex))) { return this._MdAutocomplete_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._MdAutocomplete_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    if (!throwOnChange) { if (this._query_MdOption_0_0.dirty) {
      this._query_MdOption_0_0.reset(([] as any[]));
      this._MdAutocomplete_0_3.context.options = this._query_MdOption_0_0;
      this._query_MdOption_0_0.notifyOnChanges();
    } }
    this._MdAutocomplete_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const MdAutocompleteNgFactory:import10.ComponentFactory<import0.MdAutocomplete> = new import10.ComponentFactory<import0.MdAutocomplete>('md-autocomplete, mat-autocomplete',View_MdAutocomplete_Host0,import0.MdAutocomplete);
const styles_MdAutocomplete:any[] = [import11.styles];
const nodeDebugInfos_MdAutocomplete1:import4.StaticNodeDebugInfo[] = [new import4.StaticNodeDebugInfo([import12.NgClass],(null as any),{panel: (null as any)})];
class View_MdAutocomplete1 extends import2.DebugAppView<any> {
  _el_0:any;
  _NgClass_0_3:import13.Wrapper_NgClass;
  /*private*/ _expr_2:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import14.ViewContainer) {
    super(View_MdAutocomplete1,renderType_MdAutocomplete,import8.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdAutocomplete1,declaredViewContainer);
    this._expr_2 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',new import3.InlineArray4(4,'class','mat-autocomplete-panel','role','listbox'),this.debug(0,0,10));
    this._NgClass_0_3 = new import13.Wrapper_NgClass(this.parentView.injectorGet(import15.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import16.KeyValueDiffers,this.parentIndex),new import17.ElementRef(this._el_0),this.renderer);
    this.debug((null as any),0,106);
    this.projectNodes(this._el_0,0);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.NgClass) && (0 === requestNodeIndex))) { return this._NgClass_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,15);
    const currVal_0_0_0:any = 'mat-autocomplete-panel';
    this._NgClass_0_3.check_klass(currVal_0_0_0,throwOnChange,false);
    this.debug(0,0,71);
    const currVal_0_0_1:any = this.parentView.context._getClassList();
    this._NgClass_0_3.check_ngClass(currVal_0_0_1,throwOnChange,false);
    this._NgClass_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.debug(0,0,61);
    const currVal_2:any = this.parentView.context.id;
    if (import3.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementProperty(this._el_0,'id',currVal_2);
      this._expr_2 = currVal_2;
    }
  }
  dirtyParentQueriesInternal():void {
    (<View_MdAutocomplete0>this.parentView)._viewQuery_panel_1.setDirty();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
const nodeDebugInfos_MdAutocomplete0:import4.StaticNodeDebugInfo[] = [new import4.StaticNodeDebugInfo([import18.TemplateRef],(null as any),{})];
var renderType_MdAutocomplete:import5.RenderComponentType = import3.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/node_modules/@angular/material/autocomplete/autocomplete.html',1,import6.ViewEncapsulation.None,styles_MdAutocomplete,{});
export class View_MdAutocomplete0 extends import2.DebugAppView<import0.MdAutocomplete> {
  _viewQuery_TemplateRef_0:import7.QueryList<any>;
  _viewQuery_panel_1:import7.QueryList<any>;
  _anchor_0:any;
  /*private*/ _vc_0:import14.ViewContainer;
  _TemplateRef_0_4:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdAutocomplete0,renderType_MdAutocomplete,import8.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdAutocomplete0);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_TemplateRef_0 = new import7.QueryList<any>();
    this._viewQuery_panel_1 = new import7.QueryList<any>();
    this._anchor_0 = this.renderer.createTemplateAnchor(parentRenderNode,this.debug(0,0,0));
    this._vc_0 = new import14.ViewContainer(0,(null as any),this,this._anchor_0);
    this._TemplateRef_0_4 = new import18.TemplateRef_(this,0,this._anchor_0);
    this._viewQuery_TemplateRef_0.reset([this._TemplateRef_0_4]);
    this.context.template = this._viewQuery_TemplateRef_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [this._anchor_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (0 === requestNodeIndex))) { return this._TemplateRef_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._vc_0.detectChangesInNestedViews(throwOnChange);
    if (!throwOnChange) { if (this._viewQuery_panel_1.dirty) {
        this._viewQuery_panel_1.reset([this._vc_0.mapNestedViews(View_MdAutocomplete1,(nestedView:View_MdAutocomplete1):any => {
          return [new import17.ElementRef(nestedView._el_0)];
      })]);
      this.context.panel = this._viewQuery_panel_1.first;
    } }
  }
  destroyInternal():void {
    this._vc_0.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 0)) { return new View_MdAutocomplete1(this.viewUtils,this,0,this._anchor_0,this._vc_0); }
    return (null as any);
  }
}