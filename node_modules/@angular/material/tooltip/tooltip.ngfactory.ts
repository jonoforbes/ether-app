/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/tooltip/tooltip';
import * as import2 from '@angular/material/core/portal/portal-directives';
import * as import3 from '@angular/material/core/overlay/overlay-directives';
import * as import4 from '@angular/material/core/compatibility/compatibility';
import * as import5 from '@angular/material/core/overlay/position/overlay-position-builder';
import * as import6 from '@angular/material/core/overlay/overlay';
import * as import7 from '@angular/core/src/di/injector';
import * as import8 from '@angular/material/core/overlay/overlay-container';
import * as import9 from '@angular/material/core/overlay/scroll/scroll-dispatcher';
import * as import10 from '@angular/material/core/overlay/position/viewport-ruler';
import * as import11 from '@angular/core/src/application_ref';
import * as import12 from '@angular/core/src/zone/ng_zone';
import * as import13 from '@angular/core/src/change_detection/change_detection_util';
import * as import14 from '@angular/core/src/linker/view';
import * as import15 from '@angular/core/src/linker/view_utils';
import * as import16 from '@angular/core/src/linker/debug_context';
import * as import17 from '@angular/core/src/render/api';
import * as import18 from '@angular/core/src/metadata/view';
import * as import19 from '@angular/core/src/linker/view_type';
import * as import20 from '@angular/core/src/change_detection/constants';
import * as import21 from '@angular/core/src/linker/component_factory';
import * as import22 from '@angular/material/core/rtl/dir';
import * as import23 from './tooltip.css.shim.ngstyle';
import * as import24 from '@angular/core/src/animation/animation_transition';
import * as import25 from '@angular/core/src/animation/animation_sequence_player';
import * as import26 from '@angular/core/src/animation/animation_styles';
import * as import27 from '@angular/core/src/animation/animation_style_util';
import * as import28 from '@angular/core/src/animation/animation_keyframe';
import * as import29 from '@angular/core/src/animation/animation_player';
import * as import30 from '@angular/core/src/security';
class MdTooltipModuleInjector extends import0.NgModuleInjector<import1.MdTooltipModule> {
  _PortalModule_0:import2.PortalModule;
  _OverlayModule_1:import3.OverlayModule;
  _CompatibilityModule_2:import4.CompatibilityModule;
  _MdTooltipModule_3:import1.MdTooltipModule;
  __OverlayContainer_4:any;
  __ScrollDispatcher_5:any;
  __ViewportRuler_6:any;
  __OverlayPositionBuilder_7:import5.OverlayPositionBuilder;
  __Overlay_8:import6.Overlay;
  constructor(parent:import7.Injector) {
    super(parent,[TooltipComponentNgFactory],([] as any[]));
  }
  get _OverlayContainer_4():any {
    if ((this.__OverlayContainer_4 == null)) { (this.__OverlayContainer_4 = import8.OVERLAY_CONTAINER_PROVIDER_FACTORY(this.parent.get(import8.OverlayContainer,(null as any)))); }
    return this.__OverlayContainer_4;
  }
  get _ScrollDispatcher_5():any {
    if ((this.__ScrollDispatcher_5 == null)) { (this.__ScrollDispatcher_5 = import9.SCROLL_DISPATCHER_PROVIDER_FACTORY(this.parent.get(import9.ScrollDispatcher,(null as any)))); }
    return this.__ScrollDispatcher_5;
  }
  get _ViewportRuler_6():any {
    if ((this.__ViewportRuler_6 == null)) { (this.__ViewportRuler_6 = import10.VIEWPORT_RULER_PROVIDER_FACTORY(this.parent.get(import10.ViewportRuler,(null as any)),this._ScrollDispatcher_5)); }
    return this.__ViewportRuler_6;
  }
  get _OverlayPositionBuilder_7():import5.OverlayPositionBuilder {
    if ((this.__OverlayPositionBuilder_7 == null)) { (this.__OverlayPositionBuilder_7 = new import5.OverlayPositionBuilder(this._ViewportRuler_6)); }
    return this.__OverlayPositionBuilder_7;
  }
  get _Overlay_8():import6.Overlay {
    if ((this.__Overlay_8 == null)) { (this.__Overlay_8 = new import6.Overlay(this._OverlayContainer_4,this,this._OverlayPositionBuilder_7,this.parent.get(import11.ApplicationRef),this,this.parent.get(import12.NgZone))); }
    return this.__Overlay_8;
  }
  createInternal():import1.MdTooltipModule {
    this._PortalModule_0 = new import2.PortalModule();
    this._OverlayModule_1 = new import3.OverlayModule();
    this._CompatibilityModule_2 = new import4.CompatibilityModule();
    this._MdTooltipModule_3 = new import1.MdTooltipModule();
    return this._MdTooltipModule_3;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.PortalModule)) { return this._PortalModule_0; }
    if ((token === import3.OverlayModule)) { return this._OverlayModule_1; }
    if ((token === import4.CompatibilityModule)) { return this._CompatibilityModule_2; }
    if ((token === import1.MdTooltipModule)) { return this._MdTooltipModule_3; }
    if ((token === import8.OverlayContainer)) { return this._OverlayContainer_4; }
    if ((token === import9.ScrollDispatcher)) { return this._ScrollDispatcher_5; }
    if ((token === import10.ViewportRuler)) { return this._ViewportRuler_6; }
    if ((token === import5.OverlayPositionBuilder)) { return this._OverlayPositionBuilder_7; }
    if ((token === import6.Overlay)) { return this._Overlay_8; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdTooltipModuleNgFactory:import0.NgModuleFactory<import1.MdTooltipModule> = new import0.NgModuleFactory(MdTooltipModuleInjector,import1.MdTooltipModule);
export class Wrapper_MdTooltip {
  /*private*/ _eventHandler:Function;
  context:import1.MdTooltip;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  constructor(p0:any,p1:any,p2:any,p3:any,p4:any,p5:any) {
    this._changed = false;
    this.context = new import1.MdTooltip(p0,p1,p2,p3,p4,p5);
    this._expr_0 = import13.UNINITIALIZED;
    this._expr_1 = import13.UNINITIALIZED;
    this._expr_2 = import13.UNINITIALIZED;
    this._expr_3 = import13.UNINITIALIZED;
    this._expr_4 = import13.UNINITIALIZED;
    this._expr_5 = import13.UNINITIALIZED;
    this._expr_6 = import13.UNINITIALIZED;
    this._expr_7 = import13.UNINITIALIZED;
    this._expr_8 = import13.UNINITIALIZED;
    this._expr_9 = import13.UNINITIALIZED;
  }
  ngOnDetach(view:import14.AppView<any>,componentView:import14.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_position(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.position = currValue;
      this._expr_0 = currValue;
    }
  }
  check__positionDeprecated(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context._positionDeprecated = currValue;
      this._expr_1 = currValue;
    }
  }
  check_showDelay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.showDelay = currValue;
      this._expr_2 = currValue;
    }
  }
  check_hideDelay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.hideDelay = currValue;
      this._expr_3 = currValue;
    }
  }
  check_message(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.message = currValue;
      this._expr_4 = currValue;
    }
  }
  check__deprecatedMessage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context._deprecatedMessage = currValue;
      this._expr_5 = currValue;
    }
  }
  check__matMessage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context._matMessage = currValue;
      this._expr_6 = currValue;
    }
  }
  check__matPosition(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context._matPosition = currValue;
      this._expr_7 = currValue;
    }
  }
  check__matHideDelay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context._matHideDelay = currValue;
      this._expr_8 = currValue;
    }
  }
  check__matShowDelay(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import15.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context._matShowDelay = currValue;
      this._expr_9 = currValue;
    }
  }
  ngDoCheck(view:import14.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import14.AppView<any>,componentView:import14.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'longpress')) {
      const pd_sub_0:any = ((<any>this.context.show()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'touchend')) {
      const pd_sub_1:any = ((<any>this.context.hide(1500)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'mouseenter')) {
      const pd_sub_2:any = ((<any>this.context.show()) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'mouseleave')) {
      const pd_sub_3:any = ((<any>this.context.hide()) !== false);
      result = (pd_sub_3 && result);
    }
    return result;
  }
  subscribe(view:import14.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_TooltipComponent {
  /*private*/ _eventHandler:Function;
  context:import1.TooltipComponent;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.TooltipComponent(p0,p1);
  }
  ngOnDetach(view:import14.AppView<any>,componentView:import14.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import14.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import14.AppView<any>,componentView:import14.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'body:click')) {
      const pd_sub_0:any = ((<any>this.context._handleBodyInteraction()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  subscribe(view:import14.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_TooltipComponent_Host0:import16.StaticNodeDebugInfo[] = [new import16.StaticNodeDebugInfo([import1.TooltipComponent],import1.TooltipComponent,{})];
var renderType_TooltipComponent_Host:import17.RenderComponentType = import15.createRenderComponentType('',0,import18.ViewEncapsulation.None,([] as any[]),{});
class View_TooltipComponent_Host0 extends import14.DebugAppView<any> {
  _el_0:any;
  compView_0:import14.AppView<import1.TooltipComponent>;
  _TooltipComponent_0_3:Wrapper_TooltipComponent;
  constructor(viewUtils:import15.ViewUtils,parentView:import14.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TooltipComponent_Host0,renderType_TooltipComponent_Host,import19.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import20.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_TooltipComponent_Host0);
  }
  createInternal(rootSelector:string):import21.ComponentRef<any> {
    this._el_0 = import15.selectOrCreateRenderHostElement(this.renderer,'md-tooltip-component',import15.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_TooltipComponent0(this.viewUtils,this,0,this._el_0);
    this._TooltipComponent_0_3 = new Wrapper_TooltipComponent(this.injectorGet(import22.Dir,this.parentIndex,(null as any)),this.compView_0.ref);
    this.compView_0.create(this._TooltipComponent_0_3.context);
    var disposable_0:Function = import15.subscribeToRenderElement(this,this._el_0,new import15.InlineArray2(2,'click','body'),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import21.ComponentRef_<any>(0,this,this._el_0,this._TooltipComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.TooltipComponent) && (0 === requestNodeIndex))) { return this._TooltipComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._TooltipComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.debug(0,0,0);
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._TooltipComponent_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const TooltipComponentNgFactory:import21.ComponentFactory<import1.TooltipComponent> = new import21.ComponentFactory<import1.TooltipComponent>('md-tooltip-component, mat-tooltip-component',View_TooltipComponent_Host0,import1.TooltipComponent);
const styles_TooltipComponent:any[] = [import23.styles];
var TooltipComponent_state_states:any = {
  'void': {'transform': 'scale(0)'},
  'initial': {'transform': 'scale(0)'},
  'visible': {'transform': 'scale(1)'},
  'hidden': {'transform': 'scale(0)'},
  '*': {}
}
;
function TooltipComponent_state_factory(view:import14.AppView<any>,element:any,currentState:any,nextState:any):import24.AnimationTransition {
  var previousPlayers:any = view.animationContext.getAnimationPlayers(element,((nextState == 'void')? (null as any): 'state'));
  var collectedStyles:any = {};
  var player:any = (null as any);
  var totalTime:any = 0;
  var defaultStateStyles:any = TooltipComponent_state_states['*'];
  var startStateStyles:any = TooltipComponent_state_states[currentState];
  if ((startStateStyles == (null as any))) { (startStateStyles = defaultStateStyles); }
  var endStateStyles:any = TooltipComponent_state_states[nextState];
  if ((endStateStyles == (null as any))) { (endStateStyles = defaultStateStyles); }
  if (((player == (null as any)) && (true && (nextState == 'visible')))) {
      player = new import25.AnimationSequencePlayer([view.renderer.animate(element,new import26.AnimationStyles(import27.collectAndResolveStyles(collectedStyles,[startStateStyles])),import27.balanceAnimationKeyframes(collectedStyles,endStateStyles,[
        new import28.AnimationKeyframe(0,new import26.AnimationStyles(import27.collectAndResolveStyles(collectedStyles,[{}]))),
        new import28.AnimationKeyframe(1,new import26.AnimationStyles(import27.collectAndResolveStyles(collectedStyles,[{}])))
      ]
    ),150,0,'cubic-bezier(0.0, 0.0, 0.2, 1)',previousPlayers)]);
    totalTime = 150;
  }
  if (((player == (null as any)) && (true && (nextState == 'hidden')))) {
      player = new import25.AnimationSequencePlayer([view.renderer.animate(element,new import26.AnimationStyles(import27.collectAndResolveStyles(collectedStyles,[startStateStyles])),import27.balanceAnimationKeyframes(collectedStyles,endStateStyles,[
        new import28.AnimationKeyframe(0,new import26.AnimationStyles(import27.collectAndResolveStyles(collectedStyles,[{}]))),
        new import28.AnimationKeyframe(1,new import26.AnimationStyles(import27.collectAndResolveStyles(collectedStyles,[{}])))
      ]
    ),150,0,'cubic-bezier(0.4, 0.0, 1, 1)',previousPlayers)]);
    totalTime = 150;
  }
  if ((player == (null as any))) { (player = new import29.NoOpAnimationPlayer()); }
  player.onDone(():void => {
    player.destroy();
    import27.renderStyles(element,view.renderer,import27.prepareFinalAnimationStyles(startStateStyles,endStateStyles));
  });
  new import25.AnimationSequencePlayer(previousPlayers).destroy();
  import27.renderStyles(element,view.renderer,import27.clearStyles(startStateStyles));
  view.animationContext.queueAnimation(element,'state',player);
  return new import24.AnimationTransition(player,currentState,nextState,totalTime);
}
const nodeDebugInfos_TooltipComponent0:import16.StaticNodeDebugInfo[] = [
  new import16.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import16.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_TooltipComponent:import17.RenderComponentType = import15.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/node_modules/@angular/material/tooltip/tooltip.html',0,import18.ViewEncapsulation.Emulated,styles_TooltipComponent,{'state': TooltipComponent_state_factory});
export class View_TooltipComponent0 extends import14.DebugAppView<import1.TooltipComponent> {
  _el_0:any;
  _text_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  constructor(viewUtils:import15.ViewUtils,parentView:import14.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TooltipComponent0,renderType_TooltipComponent,import19.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import20.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_TooltipComponent0);
    this._expr_2 = import13.UNINITIALIZED;
    this._expr_3 = import13.UNINITIALIZED;
    this._expr_4 = import13.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import21.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import15.createRenderElement(this.renderer,parentRenderNode,'div',new import15.InlineArray2(2,'class','mat-tooltip'),this.debug(0,0,0));
    this._text_1 = this.renderer.createText(this._el_0,'',this.debug(1,0,142));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),(null as any));
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_3:any = this.context._visibility;
    if (import15.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      var animationTransition_state:any = this.componentType.animations['state'](this,this._el_0,((this._expr_3 == import13.UNINITIALIZED)? 'void': this._expr_3),((currVal_3 == import13.UNINITIALIZED)? 'void': currVal_3));
      animationTransition_state.onDone(this.handleEvent_0.bind(this).bind(this,'@state.done'));
      this._expr_3 = currVal_3;
    }
    this.debug(0,0,25);
    const currVal_2:any = this.context._transformOrigin;
    if (import15.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementStyle(this._el_0,'transform-origin',((this.viewUtils.sanitizer.sanitize(import30.SecurityContext.STYLE,currVal_2) == null)? (null as any): this.viewUtils.sanitizer.sanitize(import30.SecurityContext.STYLE,currVal_2).toString()));
      this._expr_2 = currVal_2;
    }
    this.debug(1,0,142);
    const currVal_4:any = import15.inlineInterpolate(1,'',this.context.message,'');
    if (import15.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setText(this._text_1,currVal_4);
      this._expr_4 = currVal_4;
    }
  }
  detachInternal():void {
    var animationTransition_state:any = this.componentType.animations['state'](this,this._el_0,this._expr_3,'void');
    animationTransition_state.onDone(this.handleEvent_0.bind(this).bind(this,'@state.done'));
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.debug(0,0,0);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == '@state.done')) {
      const pd_sub_0:any = ((<any>this.context._afterVisibilityAnimation($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}