/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/chips/chip-list';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/change_detection/change_detection_util';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/view_utils';
import * as import6 from '@angular/core/src/linker/debug_context';
import * as import7 from '@angular/core/src/render/api';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/query_list';
import * as import10 from '@angular/core/src/linker/view_type';
import * as import11 from '@angular/core/src/change_detection/constants';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from './chips.css.ngstyle';
class MdChipsModuleInjector extends import0.NgModuleInjector<import1.MdChipsModule> {
  _MdChipsModule_0:import1.MdChipsModule;
  constructor(parent:import2.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.MdChipsModule {
    this._MdChipsModule_0 = new import1.MdChipsModule();
    return this._MdChipsModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.MdChipsModule)) { return this._MdChipsModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdChipsModuleNgFactory:import0.NgModuleFactory<import1.MdChipsModule> = new import0.NgModuleFactory(MdChipsModuleInjector,import1.MdChipsModule);
export class Wrapper_MdChipList {
  /*private*/ _eventHandler:Function;
  context:import1.MdChipList;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import1.MdChipList(p0);
    this._expr_0 = import3.UNINITIALIZED;
    this._expr_1 = import3.UNINITIALIZED;
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_selectable(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.selectable = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_1:any = true;
    if (import5.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      view.renderer.setElementClass(el,'mat-chip-list',currVal_1);
      this._expr_1 = currVal_1;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'focus')) {
      const pd_sub_0:any = ((<any>this.context.focus()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'keydown')) {
      const pd_sub_1:any = ((<any>this.context._keydown($event)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdChipList_Host0:import6.StaticNodeDebugInfo[] = [new import6.StaticNodeDebugInfo([import1.MdChipList],import1.MdChipList,{})];
var renderType_MdChipList_Host:import7.RenderComponentType = import5.createRenderComponentType('',0,import8.ViewEncapsulation.None,([] as any[]),{});
class View_MdChipList_Host0 extends import4.DebugAppView<any> {
  _el_0:any;
  compView_0:import4.AppView<import1.MdChipList>;
  _MdChipList_0_3:Wrapper_MdChipList;
  _query_MdChip_0_0:import9.QueryList<any>;
  constructor(viewUtils:import5.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdChipList_Host0,renderType_MdChipList_Host,import10.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import11.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdChipList_Host0);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    this._el_0 = import5.selectOrCreateRenderHostElement(this.renderer,'md-chip-list',new import5.InlineArray4(4,'role','listbox','tabindex','0'),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdChipList0(this.viewUtils,this,0,this._el_0);
    this._MdChipList_0_3 = new Wrapper_MdChipList(new import13.ElementRef(this._el_0));
    this._query_MdChip_0_0 = new import9.QueryList<any>();
    this.compView_0.create(this._MdChipList_0_3.context);
    var disposable_0:Function = import5.subscribeToRenderElement(this,this._el_0,new import5.InlineArray4(4,'focus',(null as any),'keydown',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import12.ComponentRef_<any>(0,this,this._el_0,this._MdChipList_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdChipList) && (0 === requestNodeIndex))) { return this._MdChipList_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._MdChipList_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    if (!throwOnChange) {
      if (this._query_MdChip_0_0.dirty) {
        this._query_MdChip_0_0.reset(([] as any[]));
        this._MdChipList_0_3.context.chips = this._query_MdChip_0_0;
        this._query_MdChip_0_0.notifyOnChanges();
      }
      this.debug(0,0,0);
      if ((this.numberOfChecks === 0)) { this._MdChipList_0_3.context.ngAfterContentInit(); }
    }
    this._MdChipList_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.debug(0,0,0);
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._MdChipList_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const MdChipListNgFactory:import12.ComponentFactory<import1.MdChipList> = new import12.ComponentFactory<import1.MdChipList>('md-chip-list, mat-chip-list',View_MdChipList_Host0,import1.MdChipList);
const styles_MdChipList:any[] = [import14.styles];
const nodeDebugInfos_MdChipList0:import6.StaticNodeDebugInfo[] = [new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{})];
var renderType_MdChipList:import7.RenderComponentType = import5.createRenderComponentType('/Users/jonoforbes/Developer/Ether/ether-app/node_modules/@angular/material/chips/chip-list.d.ts class MdChipList - inline template',1,import8.ViewEncapsulation.None,styles_MdChipList,{});
export class View_MdChipList0 extends import4.DebugAppView<import1.MdChipList> {
  _el_0:any;
  constructor(viewUtils:import5.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdChipList0,renderType_MdChipList,import10.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import11.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_MdChipList0);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import5.createRenderElement(this.renderer,parentRenderNode,'div',new import5.InlineArray2(2,'class','md-chip-list-wrapper'),this.debug(0,0,0));
    this.debug((null as any),0,34);
    this.projectNodes(this._el_0,0);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
}