/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/button/button';
import * as import2 from '@angular/common/src/common_module';
import * as import3 from '@angular/material/core/compatibility/compatibility';
import * as import4 from '@angular/material/core/ripple/ripple';
import * as import5 from '@angular/common/src/localization';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/i18n/tokens';
import * as import8 from '@angular/material/core/overlay/scroll/scroll-dispatcher';
import * as import9 from '@angular/material/core/overlay/position/viewport-ruler';
import * as import10 from '@angular/core/src/change_detection/change_detection_util';
import * as import11 from '@angular/core/src/linker/view';
import * as import12 from '@angular/core/src/linker/view_utils';
import * as import13 from '@angular/core/src/linker/debug_context';
import * as import14 from '@angular/core/src/render/api';
import * as import15 from '@angular/core/src/metadata/view';
import * as import16 from '@angular/core/src/linker/view_type';
import * as import17 from '@angular/core/src/change_detection/constants';
import * as import18 from '@angular/core/src/linker/component_factory';
import * as import19 from '@angular/core/src/linker/element_ref';
import * as import20 from './button.css.ngstyle';
import * as import21 from '../core/ripple/ripple.ngfactory';
import * as import22 from '@angular/core/src/linker/view_container';
import * as import23 from '@angular/core/src/zone/ng_zone';
import * as import24 from '@angular/core/src/linker/template_ref';
import * as import25 from '@angular/common/src/directives/ng_if';
import * as import26 from '../../common/src/directives/ng_if.ngfactory';
class MdButtonModuleInjector extends import0.NgModuleInjector<import1.MdButtonModule> {
  _CommonModule_0:import2.CommonModule;
  _CompatibilityModule_1:import3.CompatibilityModule;
  _MdRippleModule_2:import4.MdRippleModule;
  _MdButtonModule_3:import1.MdButtonModule;
  __NgLocalization_4:import5.NgLocaleLocalization;
  __ScrollDispatcher_5:any;
  __ViewportRuler_6:any;
  constructor(parent:import6.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _NgLocalization_4():import5.NgLocaleLocalization {
    if ((this.__NgLocalization_4 == null)) { (this.__NgLocalization_4 = new import5.NgLocaleLocalization(this.parent.get(import7.LOCALE_ID))); }
    return this.__NgLocalization_4;
  }
  get _ScrollDispatcher_5():any {
    if ((this.__ScrollDispatcher_5 == null)) { (this.__ScrollDispatcher_5 = import8.SCROLL_DISPATCHER_PROVIDER_FACTORY(this.parent.get(import8.ScrollDispatcher,(null as any)))); }
    return this.__ScrollDispatcher_5;
  }
  get _ViewportRuler_6():any {
    if ((this.__ViewportRuler_6 == null)) { (this.__ViewportRuler_6 = import9.VIEWPORT_RULER_PROVIDER_FACTORY(this.parent.get(import9.ViewportRuler,(null as any)),this._ScrollDispatcher_5)); }
    return this.__ViewportRuler_6;
  }
  createInternal():import1.MdButtonModule {
    this._CommonModule_0 = new import2.CommonModule();
    this._CompatibilityModule_1 = new import3.CompatibilityModule();
    this._MdRippleModule_2 = new import4.MdRippleModule();
    this._MdButtonModule_3 = new import1.MdButtonModule();
    return this._MdButtonModule_3;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CommonModule)) { return this._CommonModule_0; }
    if ((token === import3.CompatibilityModule)) { return this._CompatibilityModule_1; }
    if ((token === import4.MdRippleModule)) { return this._MdRippleModule_2; }
    if ((token === import1.MdButtonModule)) { return this._MdButtonModule_3; }
    if ((token === import5.NgLocalization)) { return this._NgLocalization_4; }
    if ((token === import8.ScrollDispatcher)) { return this._ScrollDispatcher_5; }
    if ((token === import9.ViewportRuler)) { return this._ViewportRuler_6; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdButtonModuleNgFactory:import0.NgModuleFactory<import1.MdButtonModule> = new import0.NgModuleFactory(MdButtonModuleInjector,import1.MdButtonModule);
export class Wrapper_MdButton {
  /*private*/ _eventHandler:Function;
  context:import1.MdButton;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.MdButton(p0,p1);
    this._expr_0 = import10.UNINITIALIZED;
    this._expr_1 = import10.UNINITIALIZED;
    this._expr_2 = import10.UNINITIALIZED;
    this._expr_3 = import10.UNINITIALIZED;
    this._expr_4 = import10.UNINITIALIZED;
  }
  ngOnDetach(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_disableRipple(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import12.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.disableRipple = currValue;
      this._expr_0 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import12.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_1 = currValue;
    }
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import12.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import11.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_3:any = this.context.disabled;
    if (import12.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementProperty(el,'disabled',currVal_3);
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context._isKeyboardFocused;
    if (import12.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementClass(el,'mat-button-focus',currVal_4);
      this._expr_4 = currVal_4;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'mousedown')) {
      const pd_sub_0:any = ((<any>this.context._setMousedown()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'focus')) {
      const pd_sub_1:any = ((<any>this.context._setKeyboardFocus()) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'blur')) {
      const pd_sub_2:any = ((<any>this.context._removeKeyboardFocus()) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
  subscribe(view:import11.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdAnchor {
  /*private*/ _eventHandler:Function;
  context:import1.MdAnchor;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.MdAnchor(p0,p1);
    this._expr_0 = import10.UNINITIALIZED;
    this._expr_1 = import10.UNINITIALIZED;
    this._expr_2 = import10.UNINITIALIZED;
    this._expr_3 = import10.UNINITIALIZED;
    this._expr_4 = import10.UNINITIALIZED;
    this._expr_5 = import10.UNINITIALIZED;
    this._expr_6 = import10.UNINITIALIZED;
  }
  ngOnDetach(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_disableRipple(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import12.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.disableRipple = currValue;
      this._expr_0 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import12.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_1 = currValue;
    }
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import12.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import11.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_3:any = this.context.disabled;
    if (import12.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementAttribute(el,'disabled',((currVal_3 == null)? (null as any): currVal_3.toString()));
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context._isAriaDisabled;
    if (import12.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementAttribute(el,'aria-disabled',((currVal_4 == null)? (null as any): currVal_4.toString()));
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context._isKeyboardFocused;
    if (import12.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementClass(el,'mat-button-focus',currVal_5);
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this.context.tabIndex;
    if (import12.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementProperty(el,'tabIndex',currVal_6);
      this._expr_6 = currVal_6;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'mousedown')) {
      const pd_sub_0:any = ((<any>this.context._setMousedown()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'focus')) {
      const pd_sub_1:any = ((<any>this.context._setKeyboardFocus()) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'blur')) {
      const pd_sub_2:any = ((<any>this.context._removeKeyboardFocus()) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'click')) {
      const pd_sub_3:any = ((<any>this.context._haltDisabledEvents($event)) !== false);
      result = (pd_sub_3 && result);
    }
    return result;
  }
  subscribe(view:import11.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdButtonCssMatStyler {
  /*private*/ _eventHandler:Function;
  context:import1.MdButtonCssMatStyler;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdButtonCssMatStyler();
    this._expr_0 = import10.UNINITIALIZED;
  }
  ngOnDetach(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import11.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = true;
    if (import12.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementClass(el,'mat-button',currVal_0);
      this._expr_0 = currVal_0;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import11.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdRaisedButtonCssMatStyler {
  /*private*/ _eventHandler:Function;
  context:import1.MdRaisedButtonCssMatStyler;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdRaisedButtonCssMatStyler();
    this._expr_0 = import10.UNINITIALIZED;
  }
  ngOnDetach(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import11.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = true;
    if (import12.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementClass(el,'mat-raised-button',currVal_0);
      this._expr_0 = currVal_0;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import11.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdIconButtonCssMatStyler {
  /*private*/ _eventHandler:Function;
  context:import1.MdIconButtonCssMatStyler;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdIconButtonCssMatStyler();
    this._expr_0 = import10.UNINITIALIZED;
  }
  ngOnDetach(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import11.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = true;
    if (import12.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementClass(el,'mat-icon-button',currVal_0);
      this._expr_0 = currVal_0;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import11.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdFabCssMatStyler {
  /*private*/ _eventHandler:Function;
  context:import1.MdFabCssMatStyler;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdFabCssMatStyler();
    this._expr_0 = import10.UNINITIALIZED;
  }
  ngOnDetach(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import11.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = true;
    if (import12.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementClass(el,'mat-fab',currVal_0);
      this._expr_0 = currVal_0;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import11.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdMiniFabCssMatStyler {
  /*private*/ _eventHandler:Function;
  context:import1.MdMiniFabCssMatStyler;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdMiniFabCssMatStyler();
    this._expr_0 = import10.UNINITIALIZED;
  }
  ngOnDetach(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import11.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import11.AppView<any>,componentView:import11.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = true;
    if (import12.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementClass(el,'mat-mini-fab',currVal_0);
      this._expr_0 = currVal_0;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import11.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdButton_Host0:import13.StaticNodeDebugInfo[] = [new import13.StaticNodeDebugInfo([import1.MdButton],import1.MdButton,{})];
var renderType_MdButton_Host:import14.RenderComponentType = import12.createRenderComponentType('',0,import15.ViewEncapsulation.None,([] as any[]),{});
class View_MdButton_Host0 extends import11.DebugAppView<any> {
  _el_0:any;
  compView_0:import11.AppView<import1.MdButton>;
  _MdButton_0_3:Wrapper_MdButton;
  constructor(viewUtils:import12.ViewUtils,parentView:import11.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdButton_Host0,renderType_MdButton_Host,import16.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import17.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdButton_Host0);
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    this._el_0 = import12.selectOrCreateRenderHostElement(this.renderer,'button',new import12.InlineArray2(2,'md-button',''),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdButton0(this.viewUtils,this,0,this._el_0);
    this._MdButton_0_3 = new Wrapper_MdButton(new import19.ElementRef(this._el_0),this.renderer);
    this.compView_0.create(this._MdButton_0_3.context);
    var disposable_0:Function = import12.subscribeToRenderElement(this,this._el_0,new import12.InlineArray8(6,'mousedown',(null as any),'focus',(null as any),'blur',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import18.ComponentRef_<any>(0,this,this._el_0,this._MdButton_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdButton) && (0 === requestNodeIndex))) { return this._MdButton_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._MdButton_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this._MdButton_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.debug(0,0,0);
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._MdButton_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const MdButtonNgFactory:import18.ComponentFactory<import1.MdButton> = new import18.ComponentFactory<import1.MdButton>('button[md-button], button[md-raised-button], button[md-icon-button],button[md-fab], button[md-mini-fab],button[mat-button], button[mat-raised-button], button[mat-icon-button],button[mat-fab], button[mat-mini-fab]',View_MdButton_Host0,import1.MdButton);
const styles_MdButton:any[] = [import20.styles];
const nodeDebugInfos_MdButton1:import13.StaticNodeDebugInfo[] = [new import13.StaticNodeDebugInfo([import4.MdRipple],(null as any),{})];
class View_MdButton1 extends import11.DebugAppView<any> {
  _el_0:any;
  _MdRipple_0_3:import21.Wrapper_MdRipple;
  /*private*/ _expr_2:any;
  constructor(viewUtils:import12.ViewUtils,parentView:import11.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import22.ViewContainer) {
    super(View_MdButton1,renderType_MdButton,import16.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import17.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdButton1,declaredViewContainer);
    this._expr_2 = import10.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    this._el_0 = import12.createRenderElement(this.renderer,(null as any),'div',new import12.InlineArray4(4,'class','mat-button-ripple','md-ripple',''),this.debug(0,0,65));
    this._MdRipple_0_3 = new import21.Wrapper_MdRipple(new import19.ElementRef(this._el_0),this.parentView.injectorGet(import23.NgZone,this.parentIndex),this.parentView.injectorGet(import9.ViewportRuler,this.parentIndex));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import4.MdRipple) && (0 === requestNodeIndex))) { return this._MdRipple_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,186);
    const currVal_0_0_0:any = this.parentView.context._getHostElement();
    this._MdRipple_0_3.check_trigger(currVal_0_0_0,throwOnChange,false);
    this._MdRipple_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.debug(0,0,135);
    const currVal_2:any = this.parentView.context._isRoundButton();
    if (import12.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementClass(this._el_0,'mat-button-ripple-round',currVal_2);
      this._expr_2 = currVal_2;
    }
    this._MdRipple_0_3.checkHost(this,this,this._el_0,throwOnChange);
  }
  destroyInternal():void {
    this._MdRipple_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
const nodeDebugInfos_MdButton0:import13.StaticNodeDebugInfo[] = [
  new import13.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import13.StaticNodeDebugInfo([
    import24.TemplateRef,
    import25.NgIf
  ]
  ,(null as any),{}),
  new import13.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdButton:import14.RenderComponentType = import12.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/node_modules/@angular/material/button/button.html',1,import15.ViewEncapsulation.None,styles_MdButton,{});
export class View_MdButton0 extends import11.DebugAppView<import1.MdButton> {
  _el_0:any;
  _anchor_1:any;
  /*private*/ _vc_1:import22.ViewContainer;
  _TemplateRef_1_5:any;
  _NgIf_1_6:import26.Wrapper_NgIf;
  _el_2:any;
  constructor(viewUtils:import12.ViewUtils,parentView:import11.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdButton0,renderType_MdButton,import16.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import17.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_MdButton0);
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import12.createRenderElement(this.renderer,parentRenderNode,'span',new import12.InlineArray2(2,'class','mat-button-wrapper'),this.debug(0,0,0));
    this.debug((null as any),0,33);
    this.projectNodes(this._el_0,0);
    this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode,this.debug(1,0,65));
    this._vc_1 = new import22.ViewContainer(1,(null as any),this,this._anchor_1);
    this._TemplateRef_1_5 = new import24.TemplateRef_(this,1,this._anchor_1);
    this._NgIf_1_6 = new import26.Wrapper_NgIf(this._vc_1.vcRef,this._TemplateRef_1_5);
    this._el_2 = import12.createRenderElement(this.renderer,parentRenderNode,'div',new import12.InlineArray2(2,'class','mat-button-focus-overlay'),this.debug(2,0,230));
    var disposable_0:Function = import12.subscribeToRenderElement(this,this._el_2,new import12.InlineArray2(2,'touchstart',(null as any)),this.eventHandler(this.handleEvent_2));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._anchor_1,
      this._el_2
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import24.TemplateRef) && (1 === requestNodeIndex))) { return this._TemplateRef_1_5; }
    if (((token === import25.NgIf) && (1 === requestNodeIndex))) { return this._NgIf_1_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(1,0,80);
    const currVal_1_0_0:boolean = !this.context._isRippleDisabled();
    this._NgIf_1_6.check_ngIf(currVal_1_0_0,throwOnChange,false);
    this._NgIf_1_6.ngDoCheck(this,this._anchor_1,throwOnChange);
    this._vc_1.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_1.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import11.AppView<any> {
    if ((nodeIndex == 1)) { return new View_MdButton1(this.viewUtils,this,1,this._anchor_1,this._vc_1); }
    return (null as any);
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.debug(2,0,230);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'touchstart')) {
      const pd_sub_0:any = ((<any>$event.preventDefault()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
const nodeDebugInfos_MdAnchor_Host0:import13.StaticNodeDebugInfo[] = [new import13.StaticNodeDebugInfo([import1.MdAnchor],import1.MdAnchor,{})];
var renderType_MdAnchor_Host:import14.RenderComponentType = import12.createRenderComponentType('',0,import15.ViewEncapsulation.None,([] as any[]),{});
class View_MdAnchor_Host0 extends import11.DebugAppView<any> {
  _el_0:any;
  compView_0:import11.AppView<import1.MdAnchor>;
  _MdAnchor_0_3:Wrapper_MdAnchor;
  constructor(viewUtils:import12.ViewUtils,parentView:import11.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdAnchor_Host0,renderType_MdAnchor_Host,import16.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import17.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdAnchor_Host0);
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    this._el_0 = import12.selectOrCreateRenderHostElement(this.renderer,'a',new import12.InlineArray2(2,'md-button',''),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdAnchor0(this.viewUtils,this,0,this._el_0);
    this._MdAnchor_0_3 = new Wrapper_MdAnchor(new import19.ElementRef(this._el_0),this.renderer);
    this.compView_0.create(this._MdAnchor_0_3.context);
    var disposable_0:Function = import12.subscribeToRenderElement(this,this._el_0,new import12.InlineArray8(8,'mousedown',(null as any),'focus',(null as any),'blur',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import18.ComponentRef_<any>(0,this,this._el_0,this._MdAnchor_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdAnchor) && (0 === requestNodeIndex))) { return this._MdAnchor_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._MdAnchor_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._MdAnchor_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.debug(0,0,0);
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._MdAnchor_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const MdAnchorNgFactory:import18.ComponentFactory<import1.MdAnchor> = new import18.ComponentFactory<import1.MdAnchor>('a[md-button], a[md-raised-button], a[md-icon-button], a[md-fab], a[md-mini-fab],\n             a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab], a[mat-mini-fab]',View_MdAnchor_Host0,import1.MdAnchor);
const styles_MdAnchor:any[] = [import20.styles];
const nodeDebugInfos_MdAnchor1:import13.StaticNodeDebugInfo[] = [new import13.StaticNodeDebugInfo([import4.MdRipple],(null as any),{})];
class View_MdAnchor1 extends import11.DebugAppView<any> {
  _el_0:any;
  _MdRipple_0_3:import21.Wrapper_MdRipple;
  /*private*/ _expr_2:any;
  constructor(viewUtils:import12.ViewUtils,parentView:import11.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import22.ViewContainer) {
    super(View_MdAnchor1,renderType_MdAnchor,import16.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import17.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdAnchor1,declaredViewContainer);
    this._expr_2 = import10.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    this._el_0 = import12.createRenderElement(this.renderer,(null as any),'div',new import12.InlineArray4(4,'class','mat-button-ripple','md-ripple',''),this.debug(0,0,65));
    this._MdRipple_0_3 = new import21.Wrapper_MdRipple(new import19.ElementRef(this._el_0),this.parentView.injectorGet(import23.NgZone,this.parentIndex),this.parentView.injectorGet(import9.ViewportRuler,this.parentIndex));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import4.MdRipple) && (0 === requestNodeIndex))) { return this._MdRipple_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,186);
    const currVal_0_0_0:any = this.parentView.context._getHostElement();
    this._MdRipple_0_3.check_trigger(currVal_0_0_0,throwOnChange,false);
    this._MdRipple_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.debug(0,0,135);
    const currVal_2:any = this.parentView.context._isRoundButton();
    if (import12.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementClass(this._el_0,'mat-button-ripple-round',currVal_2);
      this._expr_2 = currVal_2;
    }
    this._MdRipple_0_3.checkHost(this,this,this._el_0,throwOnChange);
  }
  destroyInternal():void {
    this._MdRipple_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
const nodeDebugInfos_MdAnchor0:import13.StaticNodeDebugInfo[] = [
  new import13.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import13.StaticNodeDebugInfo([
    import24.TemplateRef,
    import25.NgIf
  ]
  ,(null as any),{}),
  new import13.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdAnchor:import14.RenderComponentType = import12.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/node_modules/@angular/material/button/button.html',1,import15.ViewEncapsulation.None,styles_MdAnchor,{});
export class View_MdAnchor0 extends import11.DebugAppView<import1.MdAnchor> {
  _el_0:any;
  _anchor_1:any;
  /*private*/ _vc_1:import22.ViewContainer;
  _TemplateRef_1_5:any;
  _NgIf_1_6:import26.Wrapper_NgIf;
  _el_2:any;
  constructor(viewUtils:import12.ViewUtils,parentView:import11.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdAnchor0,renderType_MdAnchor,import16.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import17.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdAnchor0);
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import12.createRenderElement(this.renderer,parentRenderNode,'span',new import12.InlineArray2(2,'class','mat-button-wrapper'),this.debug(0,0,0));
    this.debug((null as any),0,33);
    this.projectNodes(this._el_0,0);
    this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode,this.debug(1,0,65));
    this._vc_1 = new import22.ViewContainer(1,(null as any),this,this._anchor_1);
    this._TemplateRef_1_5 = new import24.TemplateRef_(this,1,this._anchor_1);
    this._NgIf_1_6 = new import26.Wrapper_NgIf(this._vc_1.vcRef,this._TemplateRef_1_5);
    this._el_2 = import12.createRenderElement(this.renderer,parentRenderNode,'div',new import12.InlineArray2(2,'class','mat-button-focus-overlay'),this.debug(2,0,230));
    var disposable_0:Function = import12.subscribeToRenderElement(this,this._el_2,new import12.InlineArray2(2,'touchstart',(null as any)),this.eventHandler(this.handleEvent_2));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._anchor_1,
      this._el_2
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import24.TemplateRef) && (1 === requestNodeIndex))) { return this._TemplateRef_1_5; }
    if (((token === import25.NgIf) && (1 === requestNodeIndex))) { return this._NgIf_1_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(1,0,80);
    const currVal_1_0_0:boolean = !this.context._isRippleDisabled();
    this._NgIf_1_6.check_ngIf(currVal_1_0_0,throwOnChange,false);
    this._NgIf_1_6.ngDoCheck(this,this._anchor_1,throwOnChange);
    this._vc_1.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_1.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import11.AppView<any> {
    if ((nodeIndex == 1)) { return new View_MdAnchor1(this.viewUtils,this,1,this._anchor_1,this._vc_1); }
    return (null as any);
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.debug(2,0,230);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'touchstart')) {
      const pd_sub_0:any = ((<any>$event.preventDefault()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}