/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/progress-spinner/progress-spinner';
import * as import2 from '@angular/material/core/compatibility/compatibility';
import * as import3 from '@angular/core/src/di/injector';
import * as import4 from '@angular/core/src/change_detection/change_detection_util';
import * as import5 from '@angular/core/src/linker/view';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import7 from '@angular/core/src/linker/debug_context';
import * as import8 from '@angular/core/src/render/api';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/view_type';
import * as import11 from '@angular/core/src/change_detection/constants';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from '@angular/core/src/zone/ng_zone';
import * as import14 from '@angular/core/src/linker/element_ref';
import * as import15 from './progress-spinner.css.shim.ngstyle';
class MdProgressSpinnerModuleInjector extends import0.NgModuleInjector<import1.MdProgressSpinnerModule> {
  _CompatibilityModule_0:import2.CompatibilityModule;
  _MdProgressSpinnerModule_1:import1.MdProgressSpinnerModule;
  constructor(parent:import3.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.MdProgressSpinnerModule {
    this._CompatibilityModule_0 = new import2.CompatibilityModule();
    this._MdProgressSpinnerModule_1 = new import1.MdProgressSpinnerModule();
    return this._MdProgressSpinnerModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.CompatibilityModule)) { return this._CompatibilityModule_0; }
    if ((token === import1.MdProgressSpinnerModule)) { return this._MdProgressSpinnerModule_1; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdProgressSpinnerModuleNgFactory:import0.NgModuleFactory<import1.MdProgressSpinnerModule> = new import0.NgModuleFactory(MdProgressSpinnerModuleInjector,import1.MdProgressSpinnerModule);
export class Wrapper_MdProgressSpinner {
  /*private*/ _eventHandler:Function;
  context:import1.MdProgressSpinner;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import1.MdProgressSpinner(p0,p1,p2);
    this._expr_0 = import4.UNINITIALIZED;
    this._expr_1 = import4.UNINITIALIZED;
    this._expr_2 = import4.UNINITIALIZED;
    this._expr_3 = import4.UNINITIALIZED;
    this._expr_4 = import4.UNINITIALIZED;
    this._expr_5 = import4.UNINITIALIZED;
    this._expr_6 = import4.UNINITIALIZED;
  }
  ngOnDetach(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import6.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._expr_0 = currValue;
    }
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import6.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.value = currValue;
      this._expr_1 = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import6.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.mode = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import5.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_3:any = this.context._ariaValueMin;
    if (import6.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementAttribute(el,'aria-valuemin',((currVal_3 == null)? (null as any): currVal_3.toString()));
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context._ariaValueMax;
    if (import6.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementAttribute(el,'aria-valuemax',((currVal_4 == null)? (null as any): currVal_4.toString()));
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context.value;
    if (import6.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementAttribute(el,'aria-valuenow',((currVal_5 == null)? (null as any): currVal_5.toString()));
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this.context.mode;
    if (import6.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementAttribute(el,'mode',((currVal_6 == null)? (null as any): currVal_6.toString()));
      this._expr_6 = currVal_6;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import5.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdSpinner {
  /*private*/ _eventHandler:Function;
  context:import1.MdSpinner;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import1.MdSpinner(p0,p1,p2);
    this._expr_0 = import4.UNINITIALIZED;
    this._expr_1 = import4.UNINITIALIZED;
    this._expr_2 = import4.UNINITIALIZED;
    this._expr_3 = import4.UNINITIALIZED;
    this._expr_4 = import4.UNINITIALIZED;
    this._expr_5 = import4.UNINITIALIZED;
  }
  ngOnDetach(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import6.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._expr_0 = currValue;
    }
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import6.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.value = currValue;
      this._expr_1 = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import6.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.mode = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import5.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_3:any = true;
    if (import6.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementClass(el,'mat-spinner',currVal_3);
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context.value;
    if (import6.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementAttribute(el,'aria-valuenow',((currVal_4 == null)? (null as any): currVal_4.toString()));
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context.mode;
    if (import6.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementAttribute(el,'mode',((currVal_5 == null)? (null as any): currVal_5.toString()));
      this._expr_5 = currVal_5;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import5.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdProgressSpinnerCssMatStyler {
  /*private*/ _eventHandler:Function;
  context:import1.MdProgressSpinnerCssMatStyler;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdProgressSpinnerCssMatStyler();
    this._expr_0 = import4.UNINITIALIZED;
  }
  ngOnDetach(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import5.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = true;
    if (import6.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementClass(el,'mat-progress-spinner',currVal_0);
      this._expr_0 = currVal_0;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import5.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdProgressCircleCssMatStyler {
  /*private*/ _eventHandler:Function;
  context:import1.MdProgressCircleCssMatStyler;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdProgressCircleCssMatStyler();
    this._expr_0 = import4.UNINITIALIZED;
  }
  ngOnDetach(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import5.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = true;
    if (import6.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementClass(el,'mat-progress-circle',currVal_0);
      this._expr_0 = currVal_0;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import5.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdProgressSpinner_Host0:import7.StaticNodeDebugInfo[] = [new import7.StaticNodeDebugInfo([import1.MdProgressSpinner],import1.MdProgressSpinner,{})];
var renderType_MdProgressSpinner_Host:import8.RenderComponentType = import6.createRenderComponentType('',0,import9.ViewEncapsulation.None,([] as any[]),{});
class View_MdProgressSpinner_Host0 extends import5.DebugAppView<any> {
  _el_0:any;
  compView_0:import5.AppView<import1.MdProgressSpinner>;
  _MdProgressSpinner_0_3:Wrapper_MdProgressSpinner;
  constructor(viewUtils:import6.ViewUtils,parentView:import5.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdProgressSpinner_Host0,renderType_MdProgressSpinner_Host,import10.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import11.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdProgressSpinner_Host0);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer,'md-progress-spinner',new import6.InlineArray2(2,'role','progressbar'),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdProgressSpinner0(this.viewUtils,this,0,this._el_0);
    this._MdProgressSpinner_0_3 = new Wrapper_MdProgressSpinner(this.injectorGet(import13.NgZone,this.parentIndex),new import14.ElementRef(this._el_0),this.renderer);
    this.compView_0.create(this._MdProgressSpinner_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import12.ComponentRef_<any>(0,this,this._el_0,this._MdProgressSpinner_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdProgressSpinner) && (0 === requestNodeIndex))) { return this._MdProgressSpinner_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._MdProgressSpinner_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this._MdProgressSpinner_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._MdProgressSpinner_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const MdProgressSpinnerNgFactory:import12.ComponentFactory<import1.MdProgressSpinner> = new import12.ComponentFactory<import1.MdProgressSpinner>('md-progress-spinner, mat-progress-spinner, md-progress-circle, mat-progress-circle',View_MdProgressSpinner_Host0,import1.MdProgressSpinner);
const styles_MdProgressSpinner:any[] = [import15.styles];
const nodeDebugInfos_MdProgressSpinner0:import7.StaticNodeDebugInfo[] = [
  new import7.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import7.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdProgressSpinner:import8.RenderComponentType = import6.createRenderComponentType('/Users/jonoforbes/Developer/Ether/ether-app/node_modules/@angular/material/progress-spinner/progress-spinner.html',0,import9.ViewEncapsulation.Emulated,styles_MdProgressSpinner,{});
export class View_MdProgressSpinner0 extends import5.DebugAppView<import1.MdProgressSpinner> {
  _el_0:any;
  _el_1:any;
  constructor(viewUtils:import6.ViewUtils,parentView:import5.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdProgressSpinner0,renderType_MdProgressSpinner,import10.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import11.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_MdProgressSpinner0);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import6.createRenderElement(this.renderer,parentRenderNode,':svg:svg',new import6.InlineArray4(4,'preserveAspectRatio','xMidYMid meet','viewBox','0 0 100 100'),this.debug(0,0,0));
    this._el_1 = import6.createRenderElement(this.renderer,this._el_0,':svg:path',import6.EMPTY_INLINE_ARRAY,this.debug(1,0,63));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1
    ]
    ),(null as any));
    return (null as any);
  }
}
const nodeDebugInfos_MdSpinner_Host0:import7.StaticNodeDebugInfo[] = [new import7.StaticNodeDebugInfo([import1.MdSpinner],import1.MdSpinner,{})];
var renderType_MdSpinner_Host:import8.RenderComponentType = import6.createRenderComponentType('',0,import9.ViewEncapsulation.None,([] as any[]),{});
class View_MdSpinner_Host0 extends import5.DebugAppView<any> {
  _el_0:any;
  compView_0:import5.AppView<import1.MdSpinner>;
  _MdSpinner_0_3:Wrapper_MdSpinner;
  constructor(viewUtils:import6.ViewUtils,parentView:import5.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdSpinner_Host0,renderType_MdSpinner_Host,import10.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import11.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdSpinner_Host0);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer,'md-spinner',new import6.InlineArray4(4,'mode','indeterminate','role','progressbar'),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdSpinner0(this.viewUtils,this,0,this._el_0);
    this._MdSpinner_0_3 = new Wrapper_MdSpinner(new import14.ElementRef(this._el_0),this.injectorGet(import13.NgZone,this.parentIndex),this.renderer);
    this.compView_0.create(this._MdSpinner_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import12.ComponentRef_<any>(0,this,this._el_0,this._MdSpinner_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdSpinner) && (0 === requestNodeIndex))) { return this._MdSpinner_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._MdSpinner_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._MdSpinner_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._MdSpinner_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const MdSpinnerNgFactory:import12.ComponentFactory<import1.MdSpinner> = new import12.ComponentFactory<import1.MdSpinner>('md-spinner, mat-spinner',View_MdSpinner_Host0,import1.MdSpinner);
const styles_MdSpinner:any[] = [import15.styles];
const nodeDebugInfos_MdSpinner0:import7.StaticNodeDebugInfo[] = [
  new import7.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import7.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdSpinner:import8.RenderComponentType = import6.createRenderComponentType('/Users/jonoforbes/Developer/Ether/ether-app/node_modules/@angular/material/progress-spinner/progress-spinner.html',0,import9.ViewEncapsulation.Emulated,styles_MdSpinner,{});
export class View_MdSpinner0 extends import5.DebugAppView<import1.MdSpinner> {
  _el_0:any;
  _el_1:any;
  constructor(viewUtils:import6.ViewUtils,parentView:import5.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdSpinner0,renderType_MdSpinner,import10.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import11.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdSpinner0);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import6.createRenderElement(this.renderer,parentRenderNode,':svg:svg',new import6.InlineArray4(4,'preserveAspectRatio','xMidYMid meet','viewBox','0 0 100 100'),this.debug(0,0,0));
    this._el_1 = import6.createRenderElement(this.renderer,this._el_0,':svg:path',import6.EMPTY_INLINE_ARRAY,this.debug(1,0,63));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1
    ]
    ),(null as any));
    return (null as any);
  }
}