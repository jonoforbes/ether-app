/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/slide-toggle/slide-toggle';
import * as import2 from '@angular/forms/src/directives';
import * as import3 from '@angular/forms/src/form_providers';
import * as import4 from '@angular/material/core/compatibility/compatibility';
import * as import5 from '@angular/forms/src/directives/radio_control_value_accessor';
import * as import6 from '@angular/material/core/gestures/gesture-config';
import * as import7 from '@angular/core/src/di/injector';
import * as import8 from '@angular/platform-browser/src/dom/events/hammer_gestures';
import * as import9 from '@angular/core/src/change_detection/change_detection_util';
import * as import10 from '@angular/core/src/linker/view';
import * as import11 from '@angular/core/src/linker/view_utils';
import * as import12 from '@angular/core/src/linker/debug_context';
import * as import13 from '@angular/forms/src/directives/control_value_accessor';
import * as import14 from '@angular/core/src/render/api';
import * as import15 from '@angular/core/src/metadata/view';
import * as import16 from '@angular/core/src/linker/view_type';
import * as import17 from '@angular/core/src/change_detection/constants';
import * as import18 from '@angular/core/src/linker/component_factory';
import * as import19 from '@angular/core/src/linker/element_ref';
import * as import20 from './slide-toggle.css.ngstyle';
import * as import21 from '@angular/core/src/linker/query_list';
class MdSlideToggleModuleInjector extends import0.NgModuleInjector<import1.MdSlideToggleModule> {
  _InternalFormsSharedModule_0:import2.InternalFormsSharedModule;
  _FormsModule_1:import3.FormsModule;
  _CompatibilityModule_2:import4.CompatibilityModule;
  _MdSlideToggleModule_3:import1.MdSlideToggleModule;
  __RadioControlRegistry_4:import5.RadioControlRegistry;
  __HAMMER_GESTURE_CONFIG_5:import6.GestureConfig;
  constructor(parent:import7.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _RadioControlRegistry_4():import5.RadioControlRegistry {
    if ((this.__RadioControlRegistry_4 == null)) { (this.__RadioControlRegistry_4 = new import5.RadioControlRegistry()); }
    return this.__RadioControlRegistry_4;
  }
  get _HAMMER_GESTURE_CONFIG_5():import6.GestureConfig {
    if ((this.__HAMMER_GESTURE_CONFIG_5 == null)) { (this.__HAMMER_GESTURE_CONFIG_5 = new import6.GestureConfig()); }
    return this.__HAMMER_GESTURE_CONFIG_5;
  }
  createInternal():import1.MdSlideToggleModule {
    this._InternalFormsSharedModule_0 = new import2.InternalFormsSharedModule();
    this._FormsModule_1 = new import3.FormsModule();
    this._CompatibilityModule_2 = new import4.CompatibilityModule();
    this._MdSlideToggleModule_3 = new import1.MdSlideToggleModule();
    return this._MdSlideToggleModule_3;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.InternalFormsSharedModule)) { return this._InternalFormsSharedModule_0; }
    if ((token === import3.FormsModule)) { return this._FormsModule_1; }
    if ((token === import4.CompatibilityModule)) { return this._CompatibilityModule_2; }
    if ((token === import1.MdSlideToggleModule)) { return this._MdSlideToggleModule_3; }
    if ((token === import5.RadioControlRegistry)) { return this._RadioControlRegistry_4; }
    if ((token === import8.HAMMER_GESTURE_CONFIG)) { return this._HAMMER_GESTURE_CONFIG_5; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdSlideToggleModuleNgFactory:import0.NgModuleFactory<import1.MdSlideToggleModule> = new import0.NgModuleFactory(MdSlideToggleModuleInjector,import1.MdSlideToggleModule);
export class Wrapper_MdSlideToggle {
  /*private*/ _eventHandler:Function;
  context:import1.MdSlideToggle;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  subscription0:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.MdSlideToggle(p0,p1);
    this._expr_0 = import9.UNINITIALIZED;
    this._expr_1 = import9.UNINITIALIZED;
    this._expr_2 = import9.UNINITIALIZED;
    this._expr_3 = import9.UNINITIALIZED;
    this._expr_4 = import9.UNINITIALIZED;
    this._expr_5 = import9.UNINITIALIZED;
    this._expr_6 = import9.UNINITIALIZED;
    this._expr_7 = import9.UNINITIALIZED;
    this._expr_8 = import9.UNINITIALIZED;
    this._expr_9 = import9.UNINITIALIZED;
    this._expr_10 = import9.UNINITIALIZED;
    this._expr_11 = import9.UNINITIALIZED;
    this._expr_12 = import9.UNINITIALIZED;
    this._expr_13 = import9.UNINITIALIZED;
    this._expr_14 = import9.UNINITIALIZED;
  }
  ngOnDetach(view:import10.AppView<any>,componentView:import10.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_name(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import11.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.name = currValue;
      this._expr_0 = currValue;
    }
  }
  check_id(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import11.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.id = currValue;
      this._expr_1 = currValue;
    }
  }
  check_tabIndex(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import11.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.tabIndex = currValue;
      this._expr_2 = currValue;
    }
  }
  check_labelPosition(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import11.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.labelPosition = currValue;
      this._expr_3 = currValue;
    }
  }
  check_ariaLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import11.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.ariaLabel = currValue;
      this._expr_4 = currValue;
    }
  }
  check_ariaLabelledby(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import11.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.ariaLabelledby = currValue;
      this._expr_5 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import11.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_6 = currValue;
    }
  }
  check_required(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import11.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.required = currValue;
      this._expr_7 = currValue;
    }
  }
  check_checked(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import11.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.checked = currValue;
      this._expr_8 = currValue;
    }
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import11.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._expr_9 = currValue;
    }
  }
  ngDoCheck(view:import10.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import10.AppView<any>,componentView:import10.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_10:any = true;
    if (import11.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      view.renderer.setElementClass(el,'mat-slide-toggle',currVal_10);
      this._expr_10 = currVal_10;
    }
    const currVal_11:any = this.context.checked;
    if (import11.checkBinding(throwOnChange,this._expr_11,currVal_11)) {
      view.renderer.setElementClass(el,'mat-checked',currVal_11);
      this._expr_11 = currVal_11;
    }
    const currVal_12:any = this.context.disabled;
    if (import11.checkBinding(throwOnChange,this._expr_12,currVal_12)) {
      view.renderer.setElementClass(el,'mat-disabled',currVal_12);
      this._expr_12 = currVal_12;
    }
    const currVal_13:any = this.context._hasFocus;
    if (import11.checkBinding(throwOnChange,this._expr_13,currVal_13)) {
      view.renderer.setElementClass(el,'mat-slide-toggle-focused',currVal_13);
      this._expr_13 = currVal_13;
    }
    const currVal_14:any = (this.context.labelPosition == 'before');
    if (import11.checkBinding(throwOnChange,this._expr_14,currVal_14)) {
      view.renderer.setElementClass(el,'mat-slide-toggle-label-before',currVal_14);
      this._expr_14 = currVal_14;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'mousedown')) {
      const pd_sub_0:any = ((<any>this.context._setMousedown()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  subscribe(view:import10.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.change.subscribe(_eventHandler.bind(view,'change'))); }
  }
}
  const nodeDebugInfos_MdSlideToggle_Host0:import12.StaticNodeDebugInfo[] = [new import12.StaticNodeDebugInfo([
    import1.MdSlideToggle,
    import13.NG_VALUE_ACCESSOR
  ]
,import1.MdSlideToggle,{})];
var renderType_MdSlideToggle_Host:import14.RenderComponentType = import11.createRenderComponentType('',0,import15.ViewEncapsulation.None,([] as any[]),{});
class View_MdSlideToggle_Host0 extends import10.DebugAppView<any> {
  _el_0:any;
  compView_0:import10.AppView<import1.MdSlideToggle>;
  _MdSlideToggle_0_3:Wrapper_MdSlideToggle;
  __NG_VALUE_ACCESSOR_0_4:any[];
  constructor(viewUtils:import11.ViewUtils,parentView:import10.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdSlideToggle_Host0,renderType_MdSlideToggle_Host,import16.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import17.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdSlideToggle_Host0);
  }
  get _NG_VALUE_ACCESSOR_0_4():any[] {
    this.debug(0,0,0);
    if ((this.__NG_VALUE_ACCESSOR_0_4 == null)) { (this.__NG_VALUE_ACCESSOR_0_4 = [this._MdSlideToggle_0_3.context]); }
    return this.__NG_VALUE_ACCESSOR_0_4;
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    this._el_0 = import11.selectOrCreateRenderHostElement(this.renderer,'md-slide-toggle',import11.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdSlideToggle0(this.viewUtils,this,0,this._el_0);
    this._MdSlideToggle_0_3 = new Wrapper_MdSlideToggle(new import19.ElementRef(this._el_0),this.renderer);
    this.compView_0.create(this._MdSlideToggle_0_3.context);
    var disposable_0:Function = import11.subscribeToRenderElement(this,this._el_0,new import11.InlineArray2(2,'mousedown',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import18.ComponentRef_<any>(0,this,this._el_0,this._MdSlideToggle_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdSlideToggle) && (0 === requestNodeIndex))) { return this._MdSlideToggle_0_3.context; }
    if (((token === import13.NG_VALUE_ACCESSOR) && (0 === requestNodeIndex))) { return this._NG_VALUE_ACCESSOR_0_4; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._MdSlideToggle_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    if (!throwOnChange) {
      this.debug(0,0,0);
      if ((this.numberOfChecks === 0)) { this._MdSlideToggle_0_3.context.ngAfterContentInit(); }
    }
    this._MdSlideToggle_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._MdSlideToggle_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.debug(0,0,0);
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._MdSlideToggle_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const MdSlideToggleNgFactory:import18.ComponentFactory<import1.MdSlideToggle> = new import18.ComponentFactory<import1.MdSlideToggle>('md-slide-toggle, mat-slide-toggle',View_MdSlideToggle_Host0,import1.MdSlideToggle);
const styles_MdSlideToggle:any[] = [import20.styles];
const nodeDebugInfos_MdSlideToggle0:import12.StaticNodeDebugInfo[] = [
  new import12.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import12.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import12.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import12.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import12.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import12.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import12.StaticNodeDebugInfo(([] as any[]),(null as any),{input: (null as any)}),
  new import12.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdSlideToggle:import14.RenderComponentType = import11.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/node_modules/@angular/material/slide-toggle/slide-toggle.html',1,import15.ViewEncapsulation.None,styles_MdSlideToggle,{});
export class View_MdSlideToggle0 extends import10.DebugAppView<import1.MdSlideToggle> {
  _viewQuery_input_0:import21.QueryList<any>;
  _el_0:any;
  _el_1:any;
  _el_2:any;
  _el_3:any;
  _el_4:any;
  _el_5:any;
  _el_6:any;
  _el_7:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  constructor(viewUtils:import11.ViewUtils,parentView:import10.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdSlideToggle0,renderType_MdSlideToggle,import16.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import17.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_MdSlideToggle0);
    this._expr_9 = import9.UNINITIALIZED;
    this._expr_10 = import9.UNINITIALIZED;
    this._expr_11 = import9.UNINITIALIZED;
    this._expr_12 = import9.UNINITIALIZED;
    this._expr_13 = import9.UNINITIALIZED;
    this._expr_14 = import9.UNINITIALIZED;
    this._expr_15 = import9.UNINITIALIZED;
    this._expr_16 = import9.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import18.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_input_0 = new import21.QueryList<any>();
    this._el_0 = import11.createRenderElement(this.renderer,parentRenderNode,'label',new import11.InlineArray2(2,'class','mat-slide-toggle-label'),this.debug(0,0,0));
    this._el_1 = import11.createRenderElement(this.renderer,this._el_0,'div',new import11.InlineArray2(2,'class','mat-slide-toggle-container'),this.debug(1,0,38));
    this._el_2 = import11.createRenderElement(this.renderer,this._el_1,'div',new import11.InlineArray2(2,'class','mat-slide-toggle-bar'),this.debug(2,0,78));
    this._el_3 = import11.createRenderElement(this.renderer,this._el_1,'div',new import11.InlineArray2(2,'class','mat-slide-toggle-thumb-container'),this.debug(3,0,118));
    this._el_4 = import11.createRenderElement(this.renderer,this._el_3,'div',new import11.InlineArray2(2,'class','mat-slide-toggle-thumb'),this.debug(4,0,246));
    this._el_5 = import11.createRenderElement(this.renderer,this._el_4,'div',new import11.InlineArray2(2,'class','mat-ink-ripple'),this.debug(5,0,282));
    this._el_6 = import11.createRenderElement(this.renderer,this._el_1,'input',new import11.InlineArray4(4,'class','mat-slide-toggle-input cdk-visually-hidden','type','checkbox'),this.debug(6,0,328));
    this._el_7 = import11.createRenderElement(this.renderer,this._el_0,'span',new import11.InlineArray2(2,'class','mat-slide-toggle-content'),this.debug(7,0,721));
    this.debug((null as any),0,760);
    this.projectNodes(this._el_7,0);
    var disposable_0:Function = import11.subscribeToRenderElement(this,this._el_3,new import11.InlineArray8(6,'slidestart',(null as any),'slide',(null as any),'slideend',(null as any)),this.eventHandler(this.handleEvent_3));
    var disposable_1:Function = import11.subscribeToRenderElement(this,this._el_6,new import11.InlineArray8(8,'blur',(null as any),'focus',(null as any),'change',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_6));
    this._viewQuery_input_0.reset([new import19.ElementRef(this._el_6)]);
    this.context._inputElement = this._viewQuery_input_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1,
      this._el_2,
      this._el_3,
      this._el_4,
      this._el_5,
      this._el_6,
      this._el_7
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(6,0,409);
    const currVal_9:any = this.context.inputId;
    if (import11.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      this.renderer.setElementProperty(this._el_6,'id',currVal_9);
      this._expr_9 = currVal_9;
    }
    this.debug(6,0,424);
    const currVal_10:any = this.context.required;
    if (import11.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      this.renderer.setElementProperty(this._el_6,'required',currVal_10);
      this._expr_10 = currVal_10;
    }
    this.debug(6,0,446);
    const currVal_11:any = this.context.tabIndex;
    if (import11.checkBinding(throwOnChange,this._expr_11,currVal_11)) {
      this.renderer.setElementProperty(this._el_6,'tabIndex',currVal_11);
      this._expr_11 = currVal_11;
    }
    this.debug(6,0,468);
    const currVal_12:any = this.context.checked;
    if (import11.checkBinding(throwOnChange,this._expr_12,currVal_12)) {
      this.renderer.setElementProperty(this._el_6,'checked',currVal_12);
      this._expr_12 = currVal_12;
    }
    this.debug(6,0,488);
    const currVal_13:any = this.context.disabled;
    if (import11.checkBinding(throwOnChange,this._expr_13,currVal_13)) {
      this.renderer.setElementProperty(this._el_6,'disabled',currVal_13);
      this._expr_13 = currVal_13;
    }
    this.debug(6,0,510);
    const currVal_14:any = this.context.name;
    if (import11.checkBinding(throwOnChange,this._expr_14,currVal_14)) {
      this.renderer.setElementAttribute(this._el_6,'name',((currVal_14 == null)? (null as any): currVal_14.toString()));
      this._expr_14 = currVal_14;
    }
    this.debug(6,0,529);
    const currVal_15:any = this.context.ariaLabel;
    if (import11.checkBinding(throwOnChange,this._expr_15,currVal_15)) {
      this.renderer.setElementAttribute(this._el_6,'aria-label',((currVal_15 == null)? (null as any): currVal_15.toString()));
      this._expr_15 = currVal_15;
    }
    this.debug(6,0,559);
    const currVal_16:any = this.context.ariaLabelledby;
    if (import11.checkBinding(throwOnChange,this._expr_16,currVal_16)) {
      this.renderer.setElementAttribute(this._el_6,'aria-labelledby',((currVal_16 == null)? (null as any): currVal_16.toString()));
      this._expr_16 = currVal_16;
    }
  }
  handleEvent_3(eventName:string,$event:any):boolean {
    this.debug(3,0,118);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'slidestart')) {
      const pd_sub_0:any = ((<any>this.context._onDragStart()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'slide')) {
      const pd_sub_1:any = ((<any>this.context._onDrag($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'slideend')) {
      const pd_sub_2:any = ((<any>this.context._onDragEnd()) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
  handleEvent_6(eventName:string,$event:any):boolean {
    this.debug(6,0,328);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'blur')) {
      const pd_sub_0:any = ((<any>this.context._onInputBlur()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'focus')) {
      const pd_sub_1:any = ((<any>this.context._onInputFocus()) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'change')) {
      const pd_sub_2:any = ((<any>this.context._onChangeEvent($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'click')) {
      const pd_sub_3:any = ((<any>this.context._onInputClick($event)) !== false);
      result = (pd_sub_3 && result);
    }
    return result;
  }
}