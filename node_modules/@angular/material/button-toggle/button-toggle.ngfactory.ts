/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/button-toggle/button-toggle';
import * as import2 from '@angular/forms/src/directives';
import * as import3 from '@angular/forms/src/form_providers';
import * as import4 from '@angular/material/core/compatibility/compatibility';
import * as import5 from '@angular/forms/src/directives/radio_control_value_accessor';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/material/core/coordination/unique-selection-dispatcher';
import * as import8 from '@angular/core/src/change_detection/change_detection_util';
import * as import9 from '@angular/core/src/linker/view';
import * as import10 from '@angular/core/src/linker/view_utils';
import * as import11 from '@angular/core/src/linker/debug_context';
import * as import12 from '@angular/core/src/render/api';
import * as import13 from '@angular/core/src/metadata/view';
import * as import14 from '@angular/core/src/linker/view_type';
import * as import15 from '@angular/core/src/change_detection/constants';
import * as import16 from '@angular/core/src/linker/component_factory';
import * as import17 from './button-toggle.css.ngstyle';
import * as import18 from '@angular/core/src/linker/query_list';
import * as import19 from '@angular/core/src/linker/element_ref';
class MdButtonToggleModuleInjector extends import0.NgModuleInjector<import1.MdButtonToggleModule> {
  _InternalFormsSharedModule_0:import2.InternalFormsSharedModule;
  _FormsModule_1:import3.FormsModule;
  _CompatibilityModule_2:import4.CompatibilityModule;
  _MdButtonToggleModule_3:import1.MdButtonToggleModule;
  __RadioControlRegistry_4:import5.RadioControlRegistry;
  __UniqueSelectionDispatcher_5:any;
  constructor(parent:import6.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _RadioControlRegistry_4():import5.RadioControlRegistry {
    if ((this.__RadioControlRegistry_4 == null)) { (this.__RadioControlRegistry_4 = new import5.RadioControlRegistry()); }
    return this.__RadioControlRegistry_4;
  }
  get _UniqueSelectionDispatcher_5():any {
    if ((this.__UniqueSelectionDispatcher_5 == null)) { (this.__UniqueSelectionDispatcher_5 = import7.UNIQUE_SELECTION_DISPATCHER_PROVIDER_FACTORY(this.parent.get(import7.UniqueSelectionDispatcher,(null as any)))); }
    return this.__UniqueSelectionDispatcher_5;
  }
  createInternal():import1.MdButtonToggleModule {
    this._InternalFormsSharedModule_0 = new import2.InternalFormsSharedModule();
    this._FormsModule_1 = new import3.FormsModule();
    this._CompatibilityModule_2 = new import4.CompatibilityModule();
    this._MdButtonToggleModule_3 = new import1.MdButtonToggleModule();
    return this._MdButtonToggleModule_3;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.InternalFormsSharedModule)) { return this._InternalFormsSharedModule_0; }
    if ((token === import3.FormsModule)) { return this._FormsModule_1; }
    if ((token === import4.CompatibilityModule)) { return this._CompatibilityModule_2; }
    if ((token === import1.MdButtonToggleModule)) { return this._MdButtonToggleModule_3; }
    if ((token === import5.RadioControlRegistry)) { return this._RadioControlRegistry_4; }
    if ((token === import7.UniqueSelectionDispatcher)) { return this._UniqueSelectionDispatcher_5; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdButtonToggleModuleNgFactory:import0.NgModuleFactory<import1.MdButtonToggleModule> = new import0.NgModuleFactory(MdButtonToggleModuleInjector,import1.MdButtonToggleModule);
export class Wrapper_MdButtonToggleGroup {
  /*private*/ _eventHandler:Function;
  context:import1.MdButtonToggleGroup;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  subscription0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdButtonToggleGroup();
    this._expr_0 = import8.UNINITIALIZED;
    this._expr_1 = import8.UNINITIALIZED;
    this._expr_2 = import8.UNINITIALIZED;
    this._expr_3 = import8.UNINITIALIZED;
    this._expr_4 = import8.UNINITIALIZED;
    this._expr_5 = import8.UNINITIALIZED;
    this._expr_6 = import8.UNINITIALIZED;
  }
  ngOnDetach(view:import9.AppView<any>,componentView:import9.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_name(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.name = currValue;
      this._expr_0 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_1 = currValue;
    }
  }
  check_vertical(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.vertical = currValue;
      this._expr_2 = currValue;
    }
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.value = currValue;
      this._expr_3 = currValue;
    }
  }
  check_selected(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.selected = currValue;
      this._expr_4 = currValue;
    }
  }
  ngDoCheck(view:import9.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import9.AppView<any>,componentView:import9.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_5:any = true;
    if (import10.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementClass(el,'mat-button-toggle-group',currVal_5);
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this.context.vertical;
    if (import10.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementClass(el,'mat-button-toggle-vertical',currVal_6);
      this._expr_6 = currVal_6;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import9.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.change.subscribe(_eventHandler.bind(view,'change'))); }
  }
}
export class Wrapper_MdButtonToggleGroupMultiple {
  /*private*/ _eventHandler:Function;
  context:import1.MdButtonToggleGroupMultiple;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdButtonToggleGroupMultiple();
    this._expr_0 = import8.UNINITIALIZED;
    this._expr_1 = import8.UNINITIALIZED;
    this._expr_2 = import8.UNINITIALIZED;
    this._expr_3 = import8.UNINITIALIZED;
  }
  ngOnDetach(view:import9.AppView<any>,componentView:import9.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_0 = currValue;
    }
  }
  check_vertical(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.vertical = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import9.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import9.AppView<any>,componentView:import9.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_2:any = true;
    if (import10.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      view.renderer.setElementClass(el,'mat-button-toggle-group',currVal_2);
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = this.context.vertical;
    if (import10.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementClass(el,'mat-button-toggle-vertical',currVal_3);
      this._expr_3 = currVal_3;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import9.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdButtonToggle {
  /*private*/ _eventHandler:Function;
  context:import1.MdButtonToggle;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  subscription0:any;
  constructor(p0:any,p1:any,p2:any,p3:any) {
    this._changed = false;
    this.context = new import1.MdButtonToggle(p0,p1,p2,p3);
    this._expr_0 = import8.UNINITIALIZED;
    this._expr_1 = import8.UNINITIALIZED;
    this._expr_2 = import8.UNINITIALIZED;
    this._expr_3 = import8.UNINITIALIZED;
    this._expr_4 = import8.UNINITIALIZED;
    this._expr_5 = import8.UNINITIALIZED;
    this._expr_6 = import8.UNINITIALIZED;
    this._expr_7 = import8.UNINITIALIZED;
    this._expr_8 = import8.UNINITIALIZED;
  }
  ngOnDetach(view:import9.AppView<any>,componentView:import9.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_id(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.id = currValue;
      this._expr_0 = currValue;
    }
  }
  check_name(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.name = currValue;
      this._expr_1 = currValue;
    }
  }
  check_checked(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.checked = currValue;
      this._expr_2 = currValue;
    }
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.value = currValue;
      this._expr_3 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import10.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_4 = currValue;
    }
  }
  ngDoCheck(view:import9.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import9.AppView<any>,componentView:import9.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_5:any = true;
    if (import10.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementClass(el,'mat-button-toggle',currVal_5);
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this.context.id;
    if (import10.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementProperty(el,'id',currVal_6);
      this._expr_6 = currVal_6;
    }
    const currVal_7:any = this.context.checked;
    if (import10.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      view.renderer.setElementClass(el,'mat-button-toggle-checked',currVal_7);
      this._expr_7 = currVal_7;
    }
    const currVal_8:any = this.context.disabled;
    if (import10.checkBinding(throwOnChange,this._expr_8,currVal_8)) {
      view.renderer.setElementClass(el,'mat-button-toggle-disabled',currVal_8);
      this._expr_8 = currVal_8;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import9.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.change.subscribe(_eventHandler.bind(view,'change'))); }
  }
}
const nodeDebugInfos_MdButtonToggle_Host0:import11.StaticNodeDebugInfo[] = [new import11.StaticNodeDebugInfo([import1.MdButtonToggle],import1.MdButtonToggle,{})];
var renderType_MdButtonToggle_Host:import12.RenderComponentType = import10.createRenderComponentType('',0,import13.ViewEncapsulation.None,([] as any[]),{});
class View_MdButtonToggle_Host0 extends import9.DebugAppView<any> {
  _el_0:any;
  compView_0:import9.AppView<import1.MdButtonToggle>;
  _MdButtonToggle_0_3:Wrapper_MdButtonToggle;
  constructor(viewUtils:import10.ViewUtils,parentView:import9.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdButtonToggle_Host0,renderType_MdButtonToggle_Host,import14.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import15.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdButtonToggle_Host0);
  }
  createInternal(rootSelector:string):import16.ComponentRef<any> {
    this._el_0 = import10.selectOrCreateRenderHostElement(this.renderer,'md-button-toggle',import10.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdButtonToggle0(this.viewUtils,this,0,this._el_0);
    this._MdButtonToggle_0_3 = new Wrapper_MdButtonToggle(this.injectorGet(import1.MdButtonToggleGroup,this.parentIndex,(null as any)),this.injectorGet(import1.MdButtonToggleGroupMultiple,this.parentIndex,(null as any)),this.injectorGet(import7.UniqueSelectionDispatcher,this.parentIndex),this.renderer);
    this.compView_0.create(this._MdButtonToggle_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import16.ComponentRef_<any>(0,this,this._el_0,this._MdButtonToggle_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdButtonToggle) && (0 === requestNodeIndex))) { return this._MdButtonToggle_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._MdButtonToggle_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._MdButtonToggle_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._MdButtonToggle_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const MdButtonToggleNgFactory:import16.ComponentFactory<import1.MdButtonToggle> = new import16.ComponentFactory<import1.MdButtonToggle>('md-button-toggle, mat-button-toggle',View_MdButtonToggle_Host0,import1.MdButtonToggle);
const styles_MdButtonToggle:any[] = [import17.styles];
const nodeDebugInfos_MdButtonToggle0:import11.StaticNodeDebugInfo[] = [
  new import11.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import11.StaticNodeDebugInfo(([] as any[]),(null as any),{input: (null as any)}),
  new import11.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdButtonToggle:import12.RenderComponentType = import10.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/node_modules/@angular/material/button-toggle/button-toggle.html',1,import13.ViewEncapsulation.None,styles_MdButtonToggle,{});
export class View_MdButtonToggle0 extends import9.DebugAppView<import1.MdButtonToggle> {
  _viewQuery_input_0:import18.QueryList<any>;
  _el_0:any;
  _el_1:any;
  _el_2:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  constructor(viewUtils:import10.ViewUtils,parentView:import9.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdButtonToggle0,renderType_MdButtonToggle,import14.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import15.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdButtonToggle0);
    this._expr_4 = import8.UNINITIALIZED;
    this._expr_5 = import8.UNINITIALIZED;
    this._expr_6 = import8.UNINITIALIZED;
    this._expr_7 = import8.UNINITIALIZED;
    this._expr_8 = import8.UNINITIALIZED;
    this._expr_9 = import8.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import16.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_input_0 = new import18.QueryList<any>();
    this._el_0 = import10.createRenderElement(this.renderer,parentRenderNode,'label',new import10.InlineArray2(2,'class','mat-button-toggle-label'),this.debug(0,0,0));
    this._el_1 = import10.createRenderElement(this.renderer,this._el_0,'input',new import10.InlineArray2(2,'class','mat-button-toggle-input cdk-visually-hidden'),this.debug(1,0,60));
    this._el_2 = import10.createRenderElement(this.renderer,this._el_0,'div',new import10.InlineArray2(2,'class','mat-button-toggle-label-content'),this.debug(2,0,278));
    this.debug((null as any),0,323);
    this.projectNodes(this._el_2,0);
    var disposable_0:Function = import10.subscribeToRenderElement(this,this._el_1,new import10.InlineArray4(4,'change',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_1));
    this._viewQuery_input_0.reset([new import19.ElementRef(this._el_1)]);
    this.context._inputElement = this._viewQuery_input_0.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._el_1,
      this._el_2
    ]
    ),[disposable_0]);
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,7);
    const currVal_4:any = this.context.inputId;
    if (import10.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setElementAttribute(this._el_0,'for',((currVal_4 == null)? (null as any): currVal_4.toString()));
      this._expr_4 = currVal_4;
    }
    this.debug(1,0,126);
    const currVal_5:any = this.context._type;
    if (import10.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setElementProperty(this._el_1,'type',currVal_5);
      this._expr_5 = currVal_5;
    }
    this.debug(1,0,141);
    const currVal_6:any = this.context.inputId;
    if (import10.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      this.renderer.setElementProperty(this._el_1,'id',currVal_6);
      this._expr_6 = currVal_6;
    }
    this.debug(1,0,156);
    const currVal_7:any = this.context.checked;
    if (import10.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      this.renderer.setElementProperty(this._el_1,'checked',currVal_7);
      this._expr_7 = currVal_7;
    }
    this.debug(1,0,176);
    const currVal_8:any = this.context.disabled;
    if (import10.checkBinding(throwOnChange,this._expr_8,currVal_8)) {
      this.renderer.setElementProperty(this._el_1,'disabled',currVal_8);
      this._expr_8 = currVal_8;
    }
    this.debug(1,0,198);
    const currVal_9:any = this.context.name;
    if (import10.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      this.renderer.setElementProperty(this._el_1,'name',currVal_9);
      this._expr_9 = currVal_9;
    }
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.debug(1,0,60);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'change')) {
      const pd_sub_0:any = ((<any>this.context._onInputChange($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'click')) {
      const pd_sub_1:any = ((<any>this.context._onInputClick($event)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
}