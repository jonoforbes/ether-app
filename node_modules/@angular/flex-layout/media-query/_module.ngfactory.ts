/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/flex-layout/media-query/_module';
import * as import2 from '@angular/flex-layout/media-query/match-media';
import * as import3 from '@angular/flex-layout/media-query/breakpoints/break-point-registry';
import * as import4 from '@angular/flex-layout/media-query/media-monitor';
import * as import5 from '@angular/flex-layout/media-query/observable-media-service';
import * as import6 from '@angular/core/src/di/injector';
import * as import7 from '@angular/core/src/zone/ng_zone';
import * as import8 from '@angular/flex-layout/media-query/breakpoints/break-points';
class MediaQueriesModuleInjector extends import0.NgModuleInjector<import1.MediaQueriesModule> {
  _MediaQueriesModule_0:import1.MediaQueriesModule;
  __MatchMedia_1:import2.MatchMedia;
  __BREAKPOINTS_2:any;
  __BreakPointRegistry_3:import3.BreakPointRegistry;
  __MediaMonitor_4:import4.MediaMonitor;
  __ObservableMedia_5:import5.MediaService;
  constructor(parent:import6.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _MatchMedia_1():import2.MatchMedia {
    if ((this.__MatchMedia_1 == null)) { (this.__MatchMedia_1 = new import2.MatchMedia(this.parent.get(import7.NgZone))); }
    return this.__MatchMedia_1;
  }
  get _BREAKPOINTS_2():any {
    if ((this.__BREAKPOINTS_2 == null)) { (this.__BREAKPOINTS_2 = [
      {
        alias: 'xs',
        suffix: 'Xs',
        overlapping: false,
        mediaQuery: 'screen and (max-width: 599px)'
      }
      ,
      {
        alias: 'gt-xs',
        suffix: 'GtXs',
        overlapping: true,
        mediaQuery: 'screen and (min-width: 600px)'
      }
      ,
      {
        alias: 'sm',
        suffix: 'Sm',
        overlapping: false,
        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959px)'
      }
      ,
      {
        alias: 'gt-sm',
        suffix: 'GtSm',
        overlapping: true,
        mediaQuery: 'screen and (min-width: 960px)'
      }
      ,
      {
        alias: 'md',
        suffix: 'Md',
        overlapping: false,
        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279px)'
      }
      ,
      {
        alias: 'gt-md',
        suffix: 'GtMd',
        overlapping: true,
        mediaQuery: 'screen and (min-width: 1280px)'
      }
      ,
      {
        alias: 'lg',
        suffix: 'Lg',
        overlapping: false,
        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919px)'
      }
      ,
      {
        alias: 'gt-lg',
        suffix: 'GtLg',
        overlapping: true,
        mediaQuery: 'screen and (min-width: 1920px)'
      }
      ,
      {
        alias: 'xl',
        suffix: 'Xl',
        overlapping: false,
        mediaQuery: 'screen and (min-width: 1920px) and (max-width: 5000px)'
      }

    ]
    ); }
    return this.__BREAKPOINTS_2;
  }
  get _BreakPointRegistry_3():import3.BreakPointRegistry {
    if ((this.__BreakPointRegistry_3 == null)) { (this.__BreakPointRegistry_3 = new import3.BreakPointRegistry(this._BREAKPOINTS_2)); }
    return this.__BreakPointRegistry_3;
  }
  get _MediaMonitor_4():import4.MediaMonitor {
    if ((this.__MediaMonitor_4 == null)) { (this.__MediaMonitor_4 = new import4.MediaMonitor(this._BreakPointRegistry_3,this._MatchMedia_1)); }
    return this.__MediaMonitor_4;
  }
  get _ObservableMedia_5():import5.MediaService {
    if ((this.__ObservableMedia_5 == null)) { (this.__ObservableMedia_5 = new import5.MediaService(this._MatchMedia_1,this._BreakPointRegistry_3)); }
    return this.__ObservableMedia_5;
  }
  createInternal():import1.MediaQueriesModule {
    this._MediaQueriesModule_0 = new import1.MediaQueriesModule();
    return this._MediaQueriesModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.MediaQueriesModule)) { return this._MediaQueriesModule_0; }
    if ((token === import2.MatchMedia)) { return this._MatchMedia_1; }
    if ((token === import8.BREAKPOINTS)) { return this._BREAKPOINTS_2; }
    if ((token === import3.BreakPointRegistry)) { return this._BreakPointRegistry_3; }
    if ((token === import4.MediaMonitor)) { return this._MediaMonitor_4; }
    if ((token === import5.ObservableMedia)) { return this._ObservableMedia_5; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MediaQueriesModuleNgFactory:import0.NgModuleFactory<import1.MediaQueriesModule> = new import0.NgModuleFactory(MediaQueriesModuleInjector,import1.MediaQueriesModule);