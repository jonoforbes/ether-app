"use strict";
var clone = require("clone");
function createReducerTree(reducerTree) {
    var compositionTree = {};
    var keys = fetchKeysInItem(reducerTree);
    keys.forEach(function (key) {
        checkValidityBranch(reducerTree[key]);
        compositionTree[key] = createParentReducer(reducerTree[key]);
    });
    return compositionTree;
}
exports.createReducerTree = createReducerTree;
function fetchKeysInItem(item) {
    return (Array.isArray(item) || typeof item !== "object") ? [] : Object.keys(item);
}
function fetchActionsForTree(item, actionTypes) {
    if (actionTypes === void 0) { actionTypes = []; }
    var keys = fetchKeysInItem(item);
    keys.forEach(function (key) {
        if (typeof item[key] === "object" && item[key]) {
            if (key === "actions") {
                actionTypes.push.apply(actionTypes, item[key]);
            }
            fetchActionsForTree(item[key], actionTypes);
        }
    });
    return actionTypes;
}
function generateInitialState(tree) {
    function handleStateChunk(state) {
        var newState = {};
        var keys = fetchKeysInItem(state);
        keys.forEach(function (key) {
            if (key !== "initialState" && key !== "actions" && key !== "reducer") {
                newState[key] = handleStateChunk(state[key]);
            }
            if (key === "initialState") {
                newState = state[key];
            }
        });
        return newState;
    }
    var state = JSON.parse(JSON.stringify(tree));
    return handleStateChunk(state);
}
function createParentReducer(reducerTree) {
    var actions = fetchActionsForTree(reducerTree);
    var keys = fetchKeysInItem(reducerTree);
    var initialState = generateInitialState(reducerTree);
    return function (state, action) {
        if (state === void 0) { state = clone(initialState); }
        if (actions.indexOf(action.type) > -1) {
            var newState_1 = {};
            if (keys.indexOf("actions") > -1) {
                return reducerTree.reducer(state, action);
            }
            else {
                keys.forEach(function (key) {
                    var reducer = createParentReducer(reducerTree[key]);
                    newState_1[key] = reducer(state[key], action);
                });
            }
            return newState_1;
        }
        return state;
    };
}
function checkValidityBranch(reducerTree) {
    var deepestLevels = getDeepestLevels(reducerTree);
    deepestLevels.forEach(function (deepestLevel) {
        if (!deepestLevel.reducer || typeof deepestLevel.reducer !== "function") {
            throw Error("The deepest level of every reducer branch should have a reducer");
        }
        if (!deepestLevel.actions || deepestLevel.actions.length === 0) {
            throw Error("The deepest level of every reducer branch should have at least one action");
        }
        if (deepestLevel.initialState === undefined) {
            throw Error("The deepest level of every reducer branch should have initialData");
        }
    });
}
function getDeepestLevels(reducerTree, deepestLevels) {
    if (deepestLevels === void 0) { deepestLevels = []; }
    var keys = fetchKeysInItem(reducerTree);
    var filtered = keys.filter(function (key) { return key !== "actions" && key !== "reducer" && key !== "initialState"; });
    if (filtered.length === 0) {
        deepestLevels.push(reducerTree);
    }
    keys.forEach(function (key) {
        if (typeof reducerTree[key] === "object" && reducerTree[key]) {
            if (key !== "actions" && key !== "reducer" && key !== "initialState") {
                getDeepestLevels(reducerTree[key], deepestLevels);
            }
        }
    });
    return deepestLevels;
}
//# sourceMappingURL=create-reducer-tree.js.map