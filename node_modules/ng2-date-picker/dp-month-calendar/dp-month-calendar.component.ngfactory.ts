/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from 'ng2-date-picker/dp-month-calendar/dp-month-calendar.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/linker/debug_context';
import * as import5 from 'ng2-date-picker/dp-month-calendar/month-calendar.service';
import * as import6 from '@angular/core/src/render/api';
import * as import7 from '@angular/core/src/metadata/view';
import * as import8 from '@angular/core/src/linker/view_type';
import * as import9 from '@angular/core/src/change_detection/constants';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from 'ng2-date-picker/common/services/utils/utils.service';
import * as import12 from '@angular/common/src/directives/ng_class';
import * as import13 from '../../@angular/common/src/directives/ng_class.ngfactory';
import * as import14 from '@angular/core/src/linker/view_container';
import * as import15 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import16 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import17 from '@angular/core/src/linker/element_ref';
import * as import18 from '@angular/core/src/linker/template_ref';
import * as import19 from '@angular/common/src/directives/ng_for';
import * as import20 from '../../@angular/common/src/directives/ng_for.ngfactory';
export class Wrapper_MonthCalendarComponent {
  /*private*/ _eventHandler:Function;
  context:import0.MonthCalendarComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  subscription0:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.MonthCalendarComponent(p0);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_config(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.config = currValue;
      this._expr_0 = currValue;
    }
  }
  check_selected(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.selected = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.monthClick.subscribe(_eventHandler.bind(view,'monthClick'))); }
  }
}
  const nodeDebugInfos_MonthCalendarComponent_Host0:import4.StaticNodeDebugInfo[] = [new import4.StaticNodeDebugInfo([
    import5.MonthCalendarService,
    import0.MonthCalendarComponent
  ]
,import0.MonthCalendarComponent,{})];
var renderType_MonthCalendarComponent_Host:import6.RenderComponentType = import3.createRenderComponentType('',0,import7.ViewEncapsulation.None,([] as any[]),{});
class View_MonthCalendarComponent_Host0 extends import2.DebugAppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.MonthCalendarComponent>;
  _MonthCalendarService_0_3:import5.MonthCalendarService;
  _MonthCalendarComponent_0_4:Wrapper_MonthCalendarComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MonthCalendarComponent_Host0,renderType_MonthCalendarComponent_Host,import8.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MonthCalendarComponent_Host0);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'dp-month-calendar',import3.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MonthCalendarComponent0(this.viewUtils,this,0,this._el_0);
    this._MonthCalendarService_0_3 = new import5.MonthCalendarService(this.injectorGet(import11.UtilsService,this.parentIndex));
    this._MonthCalendarComponent_0_4 = new Wrapper_MonthCalendarComponent(this._MonthCalendarService_0_3);
    this.compView_0.create(this._MonthCalendarComponent_0_4.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import10.ComponentRef_<any>(0,this,this._el_0,this._MonthCalendarComponent_0_4.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import5.MonthCalendarService) && (0 === requestNodeIndex))) { return this._MonthCalendarService_0_3; }
    if (((token === import0.MonthCalendarComponent) && (0 === requestNodeIndex))) { return this._MonthCalendarComponent_0_4.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._MonthCalendarComponent_0_4.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._MonthCalendarComponent_0_4.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const MonthCalendarComponentNgFactory:import10.ComponentFactory<import0.MonthCalendarComponent> = new import10.ComponentFactory<import0.MonthCalendarComponent>('dp-month-calendar',View_MonthCalendarComponent_Host0,import0.MonthCalendarComponent);
const styles_MonthCalendarComponent:any[] = ['.dp-calendar-month[_ngcontent-%COMP%] {  box-sizing: border-box;  width: 52.5px;  height: 52.5px;  cursor: pointer;}.dp-calendar-month.dp-selected[_ngcontent-%COMP%] {  background: #106CC8;  color: #FFFFFF;}'];
const nodeDebugInfos_MonthCalendarComponent2:import4.StaticNodeDebugInfo[] = [
  new import4.StaticNodeDebugInfo([import12.NgClass],(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
class View_MonthCalendarComponent2 extends import2.DebugAppView<any> {
  _el_0:any;
  _NgClass_0_3:import13.Wrapper_NgClass;
  _text_1:any;
  /*private*/ _expr_3:any;
  _map_4:any;
  /*private*/ _expr_5:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import14.ViewContainer) {
    super(View_MonthCalendarComponent2,renderType_MonthCalendarComponent,import8.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MonthCalendarComponent2,declaredViewContainer);
    this._expr_3 = import1.UNINITIALIZED;
    this._map_4 = import3.pureProxy2((p0:any,p1:any):{[key: string]:any} => {
      return {
        'dp-selected': p0,
        'dp-current-month': p1
      }
      ;
    });
    this._expr_5 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'button',new import3.InlineArray2(2,'class','dp-calendar-month'),this.debug(0,0,104));
    this._NgClass_0_3 = new import13.Wrapper_NgClass(this.parentView.parentView.parentView.injectorGet(import15.IterableDiffers,this.parentView.parentView.parentIndex),this.parentView.parentView.parentView.injectorGet(import16.KeyValueDiffers,this.parentView.parentView.parentIndex),new import17.ElementRef(this._el_0),this.renderer);
    this._text_1 = this.renderer.createText(this._el_0,'',this.debug(1,0,367));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.NgClass) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._NgClass_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,112);
    const currVal_0_0_0:any = 'dp-calendar-month';
    this._NgClass_0_3.check_klass(currVal_0_0_0,throwOnChange,false);
    this.debug(0,0,241);
    const currVal_0_0_1:any = this._map_4(this.context.$implicit.selected,this.context.$implicit.currentMonth);
    this._NgClass_0_3.check_ngClass(currVal_0_0_1,throwOnChange,false);
    this._NgClass_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.debug(0,0,193);
    const currVal_3:any = this.parentView.parentView.context.isDisabledMonth(this.context.$implicit);
    if (import3.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      this.renderer.setElementProperty(this._el_0,'disabled',currVal_3);
      this._expr_3 = currVal_3;
    }
    this.debug(1,0,367);
    const currVal_5:any = import3.inlineInterpolate(1,'       ',this.context.$implicit.date.format('MMM'),'     ');
    if (import3.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setText(this._text_1,currVal_5);
      this._expr_5 = currVal_5;
    }
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.debug(0,0,104);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.parentView.parentView.context.monthSelected(this.context.$implicit)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
const nodeDebugInfos_MonthCalendarComponent1:import4.StaticNodeDebugInfo[] = [
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo([
    import18.TemplateRef,
    import19.NgFor
  ]
  ,(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
class View_MonthCalendarComponent1 extends import2.DebugAppView<any> {
  _el_0:any;
  _text_1:any;
  _anchor_2:any;
  /*private*/ _vc_2:import14.ViewContainer;
  _TemplateRef_2_5:any;
  _NgFor_2_6:import20.Wrapper_NgFor;
  _text_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import14.ViewContainer) {
    super(View_MonthCalendarComponent1,renderType_MonthCalendarComponent,import8.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MonthCalendarComponent1,declaredViewContainer);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',new import3.InlineArray2(2,'class','dp-months-row'),this.debug(0,0,36));
    this._text_1 = this.renderer.createText(this._el_0,'     ',this.debug(1,0,99));
    this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0,this.debug(2,0,104));
    this._vc_2 = new import14.ViewContainer(2,0,this,this._anchor_2);
    this._TemplateRef_2_5 = new import18.TemplateRef_(this,2,this._anchor_2);
    this._NgFor_2_6 = new import20.Wrapper_NgFor(this._vc_2.vcRef,this._TemplateRef_2_5,this.parentView.parentView.injectorGet(import15.IterableDiffers,this.parentView.parentIndex),this.parentView.ref);
    this._text_3 = this.renderer.createText(this._el_0,'   ',this.debug(3,0,416));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._anchor_2,
      this._text_3
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import19.NgFor) && (2 === requestNodeIndex))) { return this._NgFor_2_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(2,0,150);
    const currVal_2_0_0:any = this.context.$implicit;
    this._NgFor_2_6.check_ngForOf(currVal_2_0_0,throwOnChange,false);
    this._NgFor_2_6.ngDoCheck(this,this._anchor_2,throwOnChange);
    this._vc_2.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_2.destroyNestedViews();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 2)) { return new View_MonthCalendarComponent2(this.viewUtils,this,2,this._anchor_2,this._vc_2); }
    return (null as any);
  }
}
const nodeDebugInfos_MonthCalendarComponent0:import4.StaticNodeDebugInfo[] = [
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo([
    import18.TemplateRef,
    import19.NgFor
  ]
  ,(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MonthCalendarComponent:import6.RenderComponentType = import3.createRenderComponentType('/Users/jonoforbes/Developer/Ether/ether-app/node_modules/ng2-date-picker/dp-month-calendar/dp-month-calendar.component.d.ts class MonthCalendarComponent - inline template',0,import7.ViewEncapsulation.Emulated,styles_MonthCalendarComponent,{});
export class View_MonthCalendarComponent0 extends import2.DebugAppView<import0.MonthCalendarComponent> {
  _el_0:any;
  _text_1:any;
  _anchor_2:any;
  /*private*/ _vc_2:import14.ViewContainer;
  _TemplateRef_2_5:any;
  _NgFor_2_6:import20.Wrapper_NgFor;
  _text_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MonthCalendarComponent0,renderType_MonthCalendarComponent,import8.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import9.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MonthCalendarComponent0);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','dp-calendar-wrapper'),this.debug(0,0,0));
    this._text_1 = this.renderer.createText(this._el_0,'   ',this.debug(1,0,33));
    this._anchor_2 = this.renderer.createTemplateAnchor(this._el_0,this.debug(2,0,36));
    this._vc_2 = new import14.ViewContainer(2,0,this,this._anchor_2);
    this._TemplateRef_2_5 = new import18.TemplateRef_(this,2,this._anchor_2);
    this._NgFor_2_6 = new import20.Wrapper_NgFor(this._vc_2.vcRef,this._TemplateRef_2_5,this.parentView.injectorGet(import15.IterableDiffers,this.parentIndex),this.ref);
    this._text_3 = this.renderer.createText(this._el_0,' ',this.debug(3,0,425));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._anchor_2,
      this._text_3
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import19.NgFor) && (2 === requestNodeIndex))) { return this._NgFor_2_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(2,0,63);
    const currVal_2_0_0:any = this.context.yearMonths;
    this._NgFor_2_6.check_ngForOf(currVal_2_0_0,throwOnChange,false);
    this._NgFor_2_6.ngDoCheck(this,this._anchor_2,throwOnChange);
    this._vc_2.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_2.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 2)) { return new View_MonthCalendarComponent1(this.viewUtils,this,2,this._anchor_2,this._vc_2); }
    return (null as any);
  }
}