"use strict";
var calendar_service_1 = require("./calendar.service");
var core_1 = require("@angular/core");
var day_picker_service_1 = require("../dp-day-picker/day-picker.service");
var CalendarComponent = (function () {
    function CalendarComponent(dayPickerService, calendarService) {
        this.dayPickerService = dayPickerService;
        this.calendarService = calendarService;
        this.selectedChange = new core_1.EventEmitter();
        this.dayClick = new core_1.EventEmitter();
        this.dayContextMenu = new core_1.EventEmitter();
        this.calendarMove = new core_1.EventEmitter();
        this.showMonthCalendar = false;
    }
    CalendarComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dayPickerService.onPickerClosed.subscribe(function () {
            _this.showMonthCalendar = false;
        });
    };
    CalendarComponent.prototype.ngOnChanges = function (changes) {
        this.config = this.calendarService.getConfig(this.config);
        this.calendars = this.calendarService.generateCalendars(this.config, this.selected, this.openOn && this.openOn[this.openOn.length - 1] || this.calendars && this.calendars[0] && this.calendars[0].month);
        this.themeClass = this.theme;
    };
    CalendarComponent.prototype.daySelected = function (_a) {
        var day = _a.day, event = _a.event;
        if (!this.config.allowMultiSelect) {
            // Single selection
            this.selected = [day.date];
        }
        else if (day.selected && this.selected) {
            // Unselecting a day
            this.selected = this.selected.filter(function (val) { return !val.isSame(day.date, 'day'); });
        }
        else if (this.config.allowMultiSelect) {
            // Multi selection
            this.selected = this.selected ? this.selected.concat(day.date) : [day.date];
        }
        this.dayClick.emit({ day: day, event: event });
        this.selectedChange.emit(this.selected);
    };
    CalendarComponent.prototype.getMonthToDisplay = function (month) {
        if (typeof this.config.monthFormatter === 'function') {
            return this.config.monthFormatter(month);
        }
        return month.format(this.config.monthFormat);
    };
    CalendarComponent.prototype.getYearToDisplay = function (year) {
        if (typeof this.config.yearFormatter === 'function') {
            return this.config.yearFormatter(year);
        }
        return year.format(this.config.yearFormat);
    };
    CalendarComponent.prototype.monthSelected = function (index, month) {
        var form = this.calendars[0].month.clone().startOf('month');
        var to = month.clone().startOf('month');
        this.moveCalendars(form, to.diff(form, 'month'));
        this.showMonthCalendar = false;
    };
    CalendarComponent.prototype.moveCalendars = function (base, months) {
        this.calendars = this.calendarService.moveCalendars(this.config, this.selected, base, months);
        this.calendarMove.emit(this.calendars[0].month);
    };
    CalendarComponent.prototype.isLeftNavDisabled = function (month) {
        return this.calendarService.isMinMonth(this.config.min, month);
    };
    CalendarComponent.prototype.isRightNavDisabled = function (month) {
        return this.calendarService.isMaxMonth(this.config.max, month);
    };
    CalendarComponent.prototype.shouldShowMonthSelector = function (index) {
        return this.calendarService.shouldShowMonthSelector(index, this.config);
    };
    return CalendarComponent;
}());
CalendarComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'dp-calendar',
                template: '<div class="dp-calendar-container {{theme}}"      *ngFor="let calendar of calendars;         let index = index;         let start = first;         let end = last">   <div class="dp-calendar-nav-container">     <button class="dp-calendar-nav-left"             *ngIf="start"             [disabled]="isLeftNavDisabled(calendar.month)"             (click)="moveCalendars(calendars[0].month, showMonthCalendar ? -12 : -1)">  &lt;     </button>     <span class="dp-nav-header" *ngIf="!shouldShowMonthSelector(index)">       {{getMonthToDisplay(calendar.month)}}     </span>     <button class="dp-nav-header dp-nav-header-btn"             *ngIf="shouldShowMonthSelector(index)"             (click)="showMonthCalendar = !showMonthCalendar">       {{showMonthCalendar ? getYearToDisplay(calendar.month) : getMonthToDisplay(calendar.month)}}     </button>     <button class="dp-calendar-nav-right"             *ngIf="end"             [disabled]="isRightNavDisabled(calendar.month)"             (click)="moveCalendars(calendars[0].month, showMonthCalendar ? 12 : 1)">  &gt;     </button>   </div>   <dp-day-calendar       [selected]="selected"       [config]="calendar"       (dayContextMenu)="dayContextMenu.emit($event)"       (dayClick)="daySelected($event)"       *ngIf="!showMonthCalendar || (config.calendarsAmount > 2 && !(start || end))">   </dp-day-calendar>    <dp-month-calendar *ngIf="showMonthCalendar && (start || end)"                      [config]="calendar"                      [selected]="selected[0]"                      (monthClick)="monthSelected(index, $event)">   </dp-month-calendar> </div> ',
                styles: ['.dp-calendar-container {  display: inline-block;  vertical-align: top;}.dp-calendar-nav-container {  position: relative;  box-sizing: border-box;  height: 25px;  border: 1px solid #000000;  border-bottom: none;}.dp-nav-date-btn {  box-sizing: border-box;  height: 25px;  border: 1px solid #000000;  border-bottom: none;}.dp-calendar-nav-left,.dp-calendar-nav-right {  position: absolute;  top: 50%;  transform: translateY(-50%);  cursor: pointer;}.dp-calendar-nav-left {  left: 0;}.dp-calendar-nav-right {  right: 0;}.dp-nav-header {  position: absolute;  top: 50%;  left: 50%;  transform: translate(-50%, -50%);  font-size: 13px;}.dp-nav-header-btn {  cursor: pointer;}:host(.dp-material) .dp-calendar-container {  background: #FFFFFF;}:host(.dp-material) .dp-calendar-container:not(:first-of-type) {  border-left: 1px solid #B0AFAF;}:host(.dp-material) .dp-calendar-nav-container {  height: 30px;  border: none;}:host(.dp-material) .dp-calendar-nav-left,:host(.dp-material) .dp-calendar-nav-right {  border: none;  background: #FFFFFF;  outline: none;  font-size: 16px;}:host(.dp-material) .dp-nav-header-btn {  height: 20px;  width: 80px;  border: none;  background: #FFFFFF;  outline: none;}:host(.dp-material) .dp-nav-header-btn:hover {  background: rgba(0, 0, 0, 0.05);}:host(.dp-material) .dp-nav-header-btn:active {  background: rgba(0, 0, 0, 0.1);}:host(.dp-material) >>> dp-month-calendar .dp-calendar-weekday,:host(.dp-material) >>> dp-day-calendar .dp-calendar-weekday {  height: 25px;  width: 30px;  line-height: 25px;  background: #E0E0E0;  border: none;}:host(.dp-material) >>> dp-month-calendar .dp-calendar-wrapper,:host(.dp-material) >>> dp-day-calendar .dp-calendar-wrapper {  border: none;}:host(.dp-material) >>> dp-month-calendar .dp-calendar-month,:host(.dp-material) >>> dp-day-calendar .dp-calendar-month,:host(.dp-material) >>> dp-month-calendar .dp-calendar-day,:host(.dp-material) >>> dp-day-calendar .dp-calendar-day {  box-sizing: border-box;  background: #FFFFFF;  border-radius: 50%;  border: none;  outline: none;}:host(.dp-material) >>> dp-month-calendar .dp-calendar-month:hover,:host(.dp-material) >>> dp-day-calendar .dp-calendar-month:hover,:host(.dp-material) >>> dp-month-calendar .dp-calendar-day:hover,:host(.dp-material) >>> dp-day-calendar .dp-calendar-day:hover {  background: #E0E0E0;}:host(.dp-material) >>> dp-month-calendar .dp-selected,:host(.dp-material) >>> dp-day-calendar .dp-selected {  background: #106CC8;  color: #FFFFFF;}:host(.dp-material) >>> dp-month-calendar .dp-selected:hover,:host(.dp-material) >>> dp-day-calendar .dp-selected:hover {  background: #106CC8;}:host(.dp-material) >>> dp-month-calendar .dp-current-day,:host(.dp-material) >>> dp-day-calendar .dp-current-day {  border: 1px solid #106CC8;}:host(.dp-material) >>> dp-month-calendar .dp-current-month {  border: 1px solid #106CC8;}'],
                providers: [calendar_service_1.CalendarService],
            },] },
];
/** @nocollapse */
CalendarComponent.ctorParameters = function () { return [
    { type: day_picker_service_1.DayPickerService, },
    { type: calendar_service_1.CalendarService, },
]; };
CalendarComponent.propDecorators = {
    'selected': [{ type: core_1.Input },],
    'config': [{ type: core_1.Input },],
    'theme': [{ type: core_1.Input },],
    'openOn': [{ type: core_1.Input },],
    'themeClass': [{ type: core_1.HostBinding, args: ['class',] },],
    'selectedChange': [{ type: core_1.Output },],
    'dayClick': [{ type: core_1.Output },],
    'dayContextMenu': [{ type: core_1.Output },],
    'calendarMove': [{ type: core_1.Output },],
};
exports.CalendarComponent = CalendarComponent;
//# sourceMappingURL=dp-calendar.component.js.map