"use strict";
var core_1 = require("@angular/core");
var day_calendar_service_1 = require("./day-calendar.service");
var DayCalendarComponent = (function () {
    function DayCalendarComponent(calendarService) {
        this.calendarService = calendarService;
        this.dayClick = new core_1.EventEmitter();
        this.dayContextMenu = new core_1.EventEmitter();
    }
    DayCalendarComponent.prototype.ngOnInit = function () {
        this.weeks = this.calendarService.generateMonthArray(this.config, this.selected);
        this.weekdays = this.calendarService.generateWeekdays(this.config.firstDayOfWeek, this.config.weekdayNames);
    };
    DayCalendarComponent.prototype.ngOnChanges = function (changes) {
        var selected = changes.selected;
        if (selected && !selected.isFirstChange()) {
            this.weeks = this.calendarService
                .generateMonthArray(this.config, this.selected);
        }
    };
    DayCalendarComponent.prototype.isDisabledDay = function (day) {
        return this.calendarService.isDateDisabled(day, this.config);
    };
    return DayCalendarComponent;
}());
DayCalendarComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'dp-day-calendar',
                template: '<div class="dp-calendar-wrapper" [ngClass]="{\'dp-hide-near-month\': !config.showNearMonthDays}">   <div class="dp-weekdays">     <span class="dp-calendar-weekday" *ngFor="let weekday of weekdays">{{weekday}}</span>   </div>   <div class="dp-calendar-week" *ngFor="let week of weeks">     <span *ngIf="config.showWeekNumbers" class="dp-week-number">{{week[0].date.isoWeek()}}</span>     <button class="dp-calendar-day"             *ngFor="let day of week"             (click)="dayClick.emit({day: day, event: $event})"             [disabled]="isDisabledDay(day)"             [ngClass]="{               \'dp-selected\': day.selected,               \'dp-current-month\': day.currentMonth,               \'dp-prev-month\': day.prevMonth,               \'dp-next-month\': day.nextMonth,               \'dp-current-day\': day.currentDay             }">       {{day.date.format(\'DD\')}}     </button>   </div> </div> ',
                styles: [':host {  display: inline-block;}.dp-calendar-wrapper {  box-sizing: border-box;  border: 1px solid #000000;}.dp-calendar-wrapper .dp-calendar-weekday:first-child {  border-left: none;}.dp-calendar-weekday {  box-sizing: border-box;  display: inline-block;  width: 30px;  text-align: center;  border-left: 1px solid #000000;  border-bottom: 1px solid #000000;}.dp-calendar-day {  box-sizing: border-box;  width: 30px;  height: 30px;  cursor: pointer;}.dp-selected {  background: #106CC8;  color: #FFFFFF;}.dp-prev-month,.dp-next-month {  opacity: 0.5;}.dp-hide-near-month .dp-prev-month,.dp-hide-near-month .dp-next-month {  visibility: hidden;}.dp-week-number {  position: absolute;  font-size: 9px;}'],
                providers: [day_calendar_service_1.CalendarMonthService]
            },] },
];
/** @nocollapse */
DayCalendarComponent.ctorParameters = function () { return [
    { type: day_calendar_service_1.CalendarMonthService, },
]; };
DayCalendarComponent.propDecorators = {
    'config': [{ type: core_1.Input },],
    'selected': [{ type: core_1.Input },],
    'dayClick': [{ type: core_1.Output },],
    'dayContextMenu': [{ type: core_1.Output },],
};
exports.DayCalendarComponent = DayCalendarComponent;
//# sourceMappingURL=dp-day-calendar.component.js.map