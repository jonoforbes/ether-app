"use strict";
var core_1 = require("@angular/core");
var moment = require("moment");
var utils_service_1 = require("../common/services/utils/utils.service");
var CalendarMonthService = (function () {
    function CalendarMonthService(utilsService) {
        this.utilsService = utilsService;
        this.DAYS = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];
    }
    CalendarMonthService.prototype.generateDaysIndexMap = function (firstDayOfWeek) {
        var firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);
        var daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));
        return daysArr.reduce(function (map, day, index) {
            map[index] = day;
            return map;
        }, {});
    };
    CalendarMonthService.prototype.generateDaysMap = function (firstDayOfWeek) {
        var firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);
        var daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));
        return daysArr.reduce(function (map, day, index) {
            map[day] = index;
            return map;
        }, {});
    };
    CalendarMonthService.prototype.generateMonthArray = function (config, selectedDays) {
        if (selectedDays === void 0) { selectedDays = null; }
        var dayInMonth = config.month;
        var monthArray = [];
        var firstDayOfMonth = dayInMonth.clone().startOf('month');
        var firstDayOfWeekIndex = this.DAYS.indexOf(config.firstDayOfWeek);
        var firstDayOfBoard = firstDayOfMonth;
        while (firstDayOfBoard.day() !== firstDayOfWeekIndex) {
            firstDayOfBoard.subtract(1, 'day');
        }
        var current = firstDayOfBoard.clone();
        var daysOfCalendar = this.utilsService.createArray(42).reduce(function (array) {
            array.push({
                date: current.clone(),
                selected: (selectedDays ? selectedDays
                    .find(function (selectedDay) { return current.isSame(selectedDay, 'day'); }) : undefined) !== undefined,
                currentMonth: current.isSame(dayInMonth, 'month'),
                prevMonth: current.isSame(dayInMonth.clone().subtract(1, 'month'), 'month'),
                nextMonth: current.isSame(dayInMonth.clone().add(1, 'month'), 'month'),
                currentDay: current.isSame(moment(), 'day')
            });
            current.add(1, 'd');
            return array;
        }, []);
        daysOfCalendar.forEach(function (day, index) {
            var weekIndex = Math.floor(index / 7);
            if (!monthArray[weekIndex]) {
                monthArray.push([]);
            }
            monthArray[weekIndex].push(day);
        });
        if (!config.showNearMonthDays) {
            monthArray = this.removeNearMonthWeeks(dayInMonth, monthArray);
        }
        return monthArray;
    };
    CalendarMonthService.prototype.removeNearMonthWeeks = function (currentMonth, monthArray) {
        if (monthArray[monthArray.length - 1].find(function (day) { return day.date.isSame(currentMonth, 'month'); })) {
            return monthArray;
        }
        else {
            return monthArray.slice(0, -1);
        }
    };
    CalendarMonthService.prototype.generateWeekdays = function (firstDayOfWeek, weekdayNames) {
        var weekdays = [];
        var daysMap = this.generateDaysMap(firstDayOfWeek);
        for (var dayKey in daysMap) {
            if (daysMap.hasOwnProperty(dayKey)) {
                weekdays[daysMap[dayKey]] = weekdayNames[dayKey];
            }
        }
        return weekdays;
    };
    CalendarMonthService.prototype.isDateDisabled = function (day, config) {
        if (config.isDisabledCallback) {
            return config.isDisabledCallback(day.date);
        }
        if (config.min && day.date.isBefore(config.min, 'day')) {
            return true;
        }
        return !!(config.max && day.date.isAfter(config.max, 'day'));
    };
    return CalendarMonthService;
}());
CalendarMonthService.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
CalendarMonthService.ctorParameters = function () { return [
    { type: utils_service_1.UtilsService, },
]; };
exports.CalendarMonthService = CalendarMonthService;
//# sourceMappingURL=day-calendar.service.js.map