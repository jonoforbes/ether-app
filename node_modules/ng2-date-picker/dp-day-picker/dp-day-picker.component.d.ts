import { OnChanges, OnInit, SimpleChanges, ElementRef, AfterViewInit, Renderer, OnDestroy } from '@angular/core';
import { Moment } from 'moment';
import { DayPickerService } from './day-picker.service';
import { IDayPickerConfig } from './day-picker-config.model';
import { ControlValueAccessor, FormControl, Validator } from '@angular/forms';
import { UtilsService } from '../common/services/utils/utils.service';
import { IDpDayPickerApi } from './dp-day-picker.api';
import { DomHelper } from '../common/services/dom-appender/dom-appender.service';
export declare type CalendarValue = string | string[] | Moment | Moment[];
export declare class DpDayPickerComponent implements OnChanges, OnInit, AfterViewInit, OnDestroy, ControlValueAccessor, Validator {
    dayPickerService: DayPickerService;
    private domHelper;
    private elemRef;
    private renderer;
    private utilsService;
    private shouldNgInit;
    public userConfig;
    placeholder: string;
    disabled: boolean;
    theme: string;
    public minDate;
    public maxDate;
    calendarContainer: ElementRef;
    _areCalendarsShown: boolean;
    private hideStateHelper;
    pickerConfig: IDayPickerConfig;
    private _value;
    private userValue;
    viewValue: string;
    private calendarWrapper;
    private appendToElement;
    private inputElement;
    private popupElem;
    private handleInnerElementClickUnlisteners;
    openOn: Moment[];
    validateFn: (FormControl, string) => {
        [key: string]: any;
    };
    value: Moment[];
    private areCalendarsShown;
    api: IDpDayPickerApi;
    constructor(dayPickerService: DayPickerService, domHelper: DomHelper, elemRef: ElementRef, renderer: Renderer, utilsService: UtilsService);
    onClick(): void;
    onBodyClick(): void;
    onScroll(): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    handleInnerElementClick(element: HTMLElement): void;
    writeValue(value: Moment): void;
    processOnChangeCallback(value: Moment[]): CalendarValue;
    onChangeCallback(_: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    validate(formControl: FormControl): {
        [key: string]: any;
    };
    isDateValid(value: string): void;
    init(): void;
    initValidators(): void;
    initApi(): void;
    daySelected(): void;
    inputFocused(): void;
    showCalendars(): void;
    hideCalendar(): void;
    onViewDateChange(dates: string): void;
    onKeydown(e: KeyboardEvent): void;
    moveToCurrent(): void;
    ngOnDestroy(): void;
}
