"use strict";
var calendar_service_1 = require("../dp-calendar/calendar.service");
var core_1 = require("@angular/core");
var moment = require("moment");
var day_picker_service_1 = require("./day-picker.service");
var forms_1 = require("@angular/forms");
var utils_service_1 = require("../common/services/utils/utils.service");
var dom_appender_service_1 = require("../common/services/dom-appender/dom-appender.service");
var DpDayPickerComponent = (function () {
    function DpDayPickerComponent(dayPickerService, domHelper, elemRef, renderer, utilsService) {
        this.dayPickerService = dayPickerService;
        this.domHelper = domHelper;
        this.elemRef = elemRef;
        this.renderer = renderer;
        this.utilsService = utilsService;
        this.shouldNgInit = true;
        this.placeholder = '';
        this.disabled = false;
        this._areCalendarsShown = false;
        this.hideStateHelper = false;
        this._value = [];
        this.handleInnerElementClickUnlisteners = [];
        this.api = {};
    }
    Object.defineProperty(DpDayPickerComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            var _this = this;
            this._value = value;
            this.viewValue = this._value ? this._value.map(function (val) { return val.format(_this.pickerConfig.format); }).join(', ') : '';
            this.onChangeCallback(this.processOnChangeCallback(value));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DpDayPickerComponent.prototype, "areCalendarsShown", {
        get: function () {
            return this._areCalendarsShown;
        },
        set: function (value) {
            if (value) {
                this.domHelper.appendElementToPosition({
                    container: this.appendToElement,
                    element: this.calendarWrapper,
                    anchor: this.inputElement,
                    dimElem: this.popupElem,
                    drops: this.pickerConfig.drops,
                    opens: this.pickerConfig.opens
                });
            }
            else {
                this.dayPickerService.pickerClosed();
            }
            this._areCalendarsShown = value;
        },
        enumerable: true,
        configurable: true
    });
    DpDayPickerComponent.prototype.onClick = function () {
        this.hideStateHelper = true;
    };
    DpDayPickerComponent.prototype.onBodyClick = function () {
        if (!this.hideStateHelper) {
            this.hideCalendar();
        }
        this.hideStateHelper = false;
    };
    DpDayPickerComponent.prototype.onScroll = function () {
        if (this.areCalendarsShown) {
            this.domHelper.setElementPosition({
                container: this.appendToElement,
                element: this.calendarWrapper,
                anchor: this.inputElement,
                dimElem: this.popupElem,
                drops: this.pickerConfig.drops,
                opens: this.pickerConfig.opens
            });
        }
    };
    DpDayPickerComponent.prototype.ngOnInit = function () {
        if (this.shouldNgInit) {
            this.init();
        }
    };
    DpDayPickerComponent.prototype.ngOnChanges = function (changes) {
        this.shouldNgInit = false;
        var minDate = changes.minDate, maxDate = changes.maxDate;
        this.init();
        if (minDate || maxDate) {
            this.initValidators();
        }
    };
    DpDayPickerComponent.prototype.ngAfterViewInit = function () {
        this.calendarWrapper = this.calendarContainer.nativeElement;
        this.inputElement = this.elemRef.nativeElement.querySelector('input');
        this.popupElem = this.elemRef.nativeElement.querySelector('.dp-popup');
        this.handleInnerElementClick(this.popupElem);
        if (this.pickerConfig.appendTo) {
            if (typeof this.pickerConfig.appendTo === 'string') {
                this.appendToElement = document.querySelector(this.pickerConfig.appendTo);
            }
            else {
                this.appendToElement = this.pickerConfig.appendTo;
            }
        }
        else {
            this.appendToElement = this.elemRef.nativeElement;
        }
        this.appendToElement.appendChild(this.calendarWrapper);
    };
    DpDayPickerComponent.prototype.handleInnerElementClick = function (element) {
        var _this = this;
        this.handleInnerElementClickUnlisteners.push(this.renderer.listen(element, 'click', function () {
            _this.hideStateHelper = true;
        }));
    };
    DpDayPickerComponent.prototype.writeValue = function (value) {
        if (value) {
            this.pickerConfig.userValueType =
                this.pickerConfig.userValueType || (typeof value === 'string' ? 'string' : 'object');
            this.userValue = value;
            this.init();
        }
    };
    DpDayPickerComponent.prototype.processOnChangeCallback = function (value) {
        if (!value || value.length === 0) {
            return null;
        }
        if (value.length > 0 && !this.pickerConfig.allowMultiSelect) {
            return this.pickerConfig.userValueType === 'string' ? this.viewValue : value[0];
        }
        return this.pickerConfig.userValueType === 'string' ? this.viewValue.split(', ') : value;
    };
    DpDayPickerComponent.prototype.onChangeCallback = function (_) {
    };
    ;
    DpDayPickerComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    DpDayPickerComponent.prototype.registerOnTouched = function (fn) {
    };
    DpDayPickerComponent.prototype.validate = function (formControl) {
        if (this.minDate || this.maxDate) {
            return this.validateFn(formControl, this.pickerConfig.format);
        }
        else {
            return function () { return null; };
        }
    };
    DpDayPickerComponent.prototype.isDateValid = function (value) {
        if (day_picker_service_1.DayPickerService.isDateValid(value, this.pickerConfig.format)) {
            this.value = this.value.concat(moment(value, this.pickerConfig.format));
        }
    };
    DpDayPickerComponent.prototype.init = function () {
        var _this = this;
        this.pickerConfig = this.dayPickerService.getConfig(this.userConfig);
        if (this.userValue) {
            if (Array.isArray(this.userValue)) {
                if (this.userConfig.allowMultiSelect === undefined) {
                    // set allowMultiSelect to true unless explicitly set by user
                    this.pickerConfig.allowMultiSelect = true;
                }
                if (this.pickerConfig.allowMultiSelect) {
                    this.value = this.userValue.map(function (val) { return _this.utilsService.convertToMoment(val, _this.pickerConfig.format); });
                }
                else {
                    this.value = [this.utilsService.convertToMoment(this.userValue[0], this.pickerConfig.format)];
                }
            }
            else if (typeof this.userValue === 'string') {
                if (this.userConfig.userValueType === undefined) {
                    // set userValueType to 'string' unless explicitly set by user
                    this.pickerConfig.userValueType = 'string';
                }
                if (this.userValue.includes(',') && this.userConfig.allowMultiSelect === undefined) {
                    // set allowMultiSelect to true unless explicitly set by user
                    this.pickerConfig.allowMultiSelect = true;
                }
                if (this.pickerConfig.allowMultiSelect) {
                    this.value = this.userValue.split(',')
                        .map(function (val) { return _this.utilsService.convertToMoment(val.trim(), _this.pickerConfig.format); });
                }
                else {
                    this.value = [this.utilsService.convertToMoment(this.userValue, this.pickerConfig.format)];
                }
            }
            else {
                this.value = [this.utilsService.convertToMoment(this.userValue, this.pickerConfig.format)];
            }
        }
        this.openOn = this.value;
        this.initApi();
    };
    DpDayPickerComponent.prototype.initValidators = function () {
        this.validateFn = this.dayPickerService.createValidator({
            minDate: typeof this.minDate === 'string' ?
                moment(this.minDate, this.pickerConfig.format) : this.minDate,
            maxDate: typeof this.maxDate === 'string' ?
                moment(this.maxDate, this.pickerConfig.format) : this.maxDate
        }, this.pickerConfig.format);
        this.onChangeCallback(this.processOnChangeCallback(this.value));
    };
    DpDayPickerComponent.prototype.initApi = function () {
        this.api = {
            open: this.showCalendars.bind(this),
            close: this.hideCalendar.bind(this)
        };
    };
    DpDayPickerComponent.prototype.daySelected = function () {
        if (this.pickerConfig.closeOnSelect && !this.pickerConfig.allowMultiSelect) {
            setTimeout(this.hideCalendar.bind(this), this.pickerConfig.closeOnSelectDelay);
        }
    };
    DpDayPickerComponent.prototype.inputFocused = function () {
        var _this = this;
        this.hideStateHelper = false;
        setTimeout(function () {
            _this.areCalendarsShown = true;
        }, this.pickerConfig.onOpenDelay);
    };
    DpDayPickerComponent.prototype.showCalendars = function () {
        this.hideStateHelper = true;
        this.areCalendarsShown = true;
    };
    DpDayPickerComponent.prototype.hideCalendar = function () {
        this.areCalendarsShown = false;
    };
    DpDayPickerComponent.prototype.onViewDateChange = function (dates) {
        var _this = this;
        var dateStrings = dates.split(',').map(function (date) { return date.trim(); });
        var validDateStrings = dateStrings.filter(function (date) { return day_picker_service_1.DayPickerService.isDateValid(date, _this.pickerConfig.format); });
        if (!this.pickerConfig.allowMultiSelect && validDateStrings.length > 0) {
            // Single selection
            this.value = validDateStrings[0] !== '' ? [moment(validDateStrings[0], this.pickerConfig.format)] : [];
        }
        else if (validDateStrings.length === dateStrings.length && this.pickerConfig.allowMultiSelect) {
            // Multi selection
            this.value = validDateStrings
                .map(function (date) { return date !== '' ? moment(date, _this.pickerConfig.format) : null; })
                .filter(function (date) { return date !== null; });
        }
    };
    DpDayPickerComponent.prototype.onKeydown = function (e) {
        switch (e.keyCode) {
            case 13:
                if (!this.pickerConfig.allowMultiSelect &&
                    day_picker_service_1.DayPickerService.isDateValid(this.viewValue, this.pickerConfig.format)) {
                    this.openOn = this.value;
                }
                break;
            case 27:
                this.areCalendarsShown = false;
                e.preventDefault();
                break;
            case 9:
                this.areCalendarsShown = false;
                break;
        }
        if (this.pickerConfig.disableKeypress) {
            e.preventDefault();
        }
    };
    DpDayPickerComponent.prototype.moveToCurrent = function () {
        this.openOn = [moment()];
    };
    DpDayPickerComponent.prototype.ngOnDestroy = function () {
        this.handleInnerElementClickUnlisteners.forEach(function (ul) { return ul(); });
        this.appendToElement.removeChild(this.calendarWrapper);
    };
    return DpDayPickerComponent;
}());
DpDayPickerComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'dp-day-picker',
                template: '<div class="{{theme}}">   <div class="dp-input-container">     <input type="text"            class="dp-daypicker-input"            [placeholder]="placeholder"            [ngModel]="viewValue"            (ngModelChange)="onViewDateChange($event)"            (focus)="inputFocused()"            (keydown)="onKeydown($event)"            [disabled]="disabled"/>     <button class="dp-current-location-btn"             *ngIf="pickerConfig.showGoToCurrent"             (click)="moveToCurrent()"             [hidden]="!_areCalendarsShown">     </button>   </div>   <div #container>     <div class="dp-popup {{theme}}" [hidden]="!_areCalendarsShown">       <dp-calendar [(selected)]="value"                    [config]="pickerConfig"                    [openOn]="openOn"                    (dayClick)="daySelected()">       </dp-calendar>     </div>   </div> </div> ',
                styles: [':host {  display: inline-block;}.dp-material .dp-daypicker-input {  box-sizing: border-box;  height: 30px;  width: 212px;  font-size: 13px;  outline: none;}.dp-material .dp-current-location-btn {  top: calc(50% - 9px);  right: 5px;  height: 18px;  width: 18px;  border: 2px solid rgba(0, 0, 0, 0.6);}.dp-input-container {  position: relative;}.dp-popup {  position: relative;  background: #FFFFFF;  box-shadow: 1px 1px 5px 0 rgba(0, 0, 0, 0.1);  border-left: 1px solid rgba(0, 0, 0, 0.1);  border-right: 1px solid rgba(0, 0, 0, 0.1);  border-bottom: 1px solid rgba(0, 0, 0, 0.1);  z-index: 9999;  white-space: nowrap;}.dp-popup.dp-material >>> dp-calendar .dp-calendar-container {  background: #FFFFFF;}.dp-popup.dp-material >>> dp-calendar .dp-calendar-container:not(:first-of-type) {  border-left: 1px solid #B0AFAF;}.dp-popup.dp-material >>> dp-calendar .dp-calendar-nav-container {  height: 30px;  border: none;}.dp-popup.dp-material >>> dp-calendar .dp-calendar-nav-left,.dp-popup.dp-material >>> dp-calendar .dp-calendar-nav-right {  border: none;  background: #FFFFFF;  outline: none;  font-size: 16px;}.dp-popup.dp-material >>> dp-calendar .dp-nav-header-btn {  height: 20px;  width: 80px;  border: none;  background: #FFFFFF;  outline: none;}.dp-popup.dp-material >>> dp-calendar .dp-nav-header-btn:hover {  background: rgba(0, 0, 0, 0.05);}.dp-popup.dp-material >>> dp-calendar .dp-nav-header-btn:active {  background: rgba(0, 0, 0, 0.1);}.dp-popup.dp-material >>> dp-calendar >>> dp-month-calendar .dp-calendar-weekday,.dp-popup.dp-material >>> dp-calendar >>> dp-day-calendar .dp-calendar-weekday {  height: 25px;  width: 30px;  line-height: 25px;  background: #E0E0E0;  border: none;}.dp-popup.dp-material >>> dp-calendar >>> dp-month-calendar .dp-calendar-wrapper,.dp-popup.dp-material >>> dp-calendar >>> dp-day-calendar .dp-calendar-wrapper {  border: none;}.dp-popup.dp-material >>> dp-calendar >>> dp-month-calendar .dp-calendar-month,.dp-popup.dp-material >>> dp-calendar >>> dp-day-calendar .dp-calendar-month,.dp-popup.dp-material >>> dp-calendar >>> dp-month-calendar .dp-calendar-day,.dp-popup.dp-material >>> dp-calendar >>> dp-day-calendar .dp-calendar-day {  box-sizing: border-box;  background: #FFFFFF;  border-radius: 50%;  border: none;  outline: none;}.dp-popup.dp-material >>> dp-calendar >>> dp-month-calendar .dp-calendar-month:hover,.dp-popup.dp-material >>> dp-calendar >>> dp-day-calendar .dp-calendar-month:hover,.dp-popup.dp-material >>> dp-calendar >>> dp-month-calendar .dp-calendar-day:hover,.dp-popup.dp-material >>> dp-calendar >>> dp-day-calendar .dp-calendar-day:hover {  background: #E0E0E0;}.dp-popup.dp-material >>> dp-calendar >>> dp-month-calendar .dp-selected,.dp-popup.dp-material >>> dp-calendar >>> dp-day-calendar .dp-selected {  background: #106CC8;  color: #FFFFFF;}.dp-popup.dp-material >>> dp-calendar >>> dp-month-calendar .dp-selected:hover,.dp-popup.dp-material >>> dp-calendar >>> dp-day-calendar .dp-selected:hover {  background: #106CC8;}.dp-popup.dp-material >>> dp-calendar >>> dp-month-calendar .dp-current-day,.dp-popup.dp-material >>> dp-calendar >>> dp-day-calendar .dp-current-day {  border: 1px solid #106CC8;}.dp-popup.dp-material >>> dp-calendar >>> dp-month-calendar .dp-current-month {  border: 1px solid #106CC8;}.dp-selected {  background: #106CC8;  color: #FFFFFF;}.dp-current-location-btn {  position: absolute;  top: calc(50% - 7px);  right: 5px;  height: 14px;  width: 13px;  background: rgba(0, 0, 0, 0.6);  border: 1px solid rgba(0, 0, 0, 0.6);  outline: none;  border-radius: 50%;  box-shadow: inset 0 0 0 3px #FFFFFF;  cursor: pointer;}.dp-current-location-btn:hover {  background: #000000;}'],
                providers: [
                    calendar_service_1.CalendarService,
                    day_picker_service_1.DayPickerService,
                    {
                        provide: forms_1.NG_VALUE_ACCESSOR,
                        useExisting: core_1.forwardRef(function () { return DpDayPickerComponent; }),
                        multi: true
                    },
                    {
                        provide: forms_1.NG_VALIDATORS,
                        useExisting: core_1.forwardRef(function () { return DpDayPickerComponent; }),
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
DpDayPickerComponent.ctorParameters = function () { return [
    { type: day_picker_service_1.DayPickerService, },
    { type: dom_appender_service_1.DomHelper, },
    { type: core_1.ElementRef, },
    { type: core_1.Renderer, },
    { type: utils_service_1.UtilsService, },
]; };
DpDayPickerComponent.propDecorators = {
    'userConfig': [{ type: core_1.Input, args: ['config',] },],
    'placeholder': [{ type: core_1.Input },],
    'disabled': [{ type: core_1.Input },],
    'theme': [{ type: core_1.Input },],
    'minDate': [{ type: core_1.Input },],
    'maxDate': [{ type: core_1.Input },],
    'calendarContainer': [{ type: core_1.ViewChild, args: ['container',] },],
    'onClick': [{ type: core_1.HostListener, args: ['click',] },],
    'onBodyClick': [{ type: core_1.HostListener, args: ['document:click',] },],
    'onScroll': [{ type: core_1.HostListener, args: ['document:scroll',] }, { type: core_1.HostListener, args: ['window:resize',] },],
};
exports.DpDayPickerComponent = DpDayPickerComponent;
//# sourceMappingURL=dp-day-picker.component.js.map