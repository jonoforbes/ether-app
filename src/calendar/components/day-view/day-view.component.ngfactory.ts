/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './day-view.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/linker/debug_context';
import * as import5 from '@angular/core/src/render/api';
import * as import6 from '@angular/core/src/metadata/view';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/constants';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '../day-detail/day-detail.component';
import * as import11 from '../day-detail/day-detail.component.ngfactory';
import * as import12 from '@angular/common/src/pipes/date_pipe';
import * as import13 from '@angular/core/src/i18n/tokens';
export class Wrapper_DayViewComponent {
  /*private*/ _eventHandler:Function;
  context:import0.DayViewComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  constructor() {
    this._changed = false;
    this.context = new import0.DayViewComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
  }
  check_date(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.date = currValue;
      this._expr_0 = currValue;
    }
  }
  check_appointments(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.appointments = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.addAppointment.subscribe(_eventHandler.bind(view,'addAppointment'))); }
    if (emit1) { (this.subscription1 = this.context.updateAppointment.subscribe(_eventHandler.bind(view,'updateAppointment'))); }
    if (emit2) { (this.subscription2 = this.context.removeAppointment.subscribe(_eventHandler.bind(view,'removeAppointment'))); }
  }
}
const nodeDebugInfos_DayViewComponent_Host0:import4.StaticNodeDebugInfo[] = [new import4.StaticNodeDebugInfo([import0.DayViewComponent],import0.DayViewComponent,{})];
var renderType_DayViewComponent_Host:import5.RenderComponentType = import3.createRenderComponentType('',0,import6.ViewEncapsulation.None,([] as any[]),{});
class View_DayViewComponent_Host0 extends import2.DebugAppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.DayViewComponent>;
  _DayViewComponent_0_3:Wrapper_DayViewComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_DayViewComponent_Host0,renderType_DayViewComponent_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_DayViewComponent_Host0);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'day-view',import3.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_DayViewComponent0(this.viewUtils,this,0,this._el_0);
    this._DayViewComponent_0_3 = new Wrapper_DayViewComponent();
    this.compView_0.create(this._DayViewComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import9.ComponentRef_<any>(0,this,this._el_0,this._DayViewComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.DayViewComponent) && (0 === requestNodeIndex))) { return this._DayViewComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._DayViewComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._DayViewComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const DayViewComponentNgFactory:import9.ComponentFactory<import0.DayViewComponent> = new import9.ComponentFactory<import0.DayViewComponent>('day-view',View_DayViewComponent_Host0,import0.DayViewComponent);
const styles_DayViewComponent:any[] = ([] as any[]);
const nodeDebugInfos_DayViewComponent0:import4.StaticNodeDebugInfo[] = [
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo([import10.DayDetailComponent],import10.DayDetailComponent,{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_DayViewComponent:import5.RenderComponentType = import3.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/src/calendar/components/day-view/day-view.component.ts class DayViewComponent - inline template',0,import6.ViewEncapsulation.None,styles_DayViewComponent,{});
export class View_DayViewComponent0 extends import2.DebugAppView<import0.DayViewComponent> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _text_3:any;
  _el_4:any;
  compView_4:import2.AppView<import10.DayDetailComponent>;
  _DayDetailComponent_4_3:import11.Wrapper_DayDetailComponent;
  _text_5:any;
  _text_6:any;
  /*private*/ _expr_9:any;
  _pipe_date_0:import12.DatePipe;
  _pipe_date_0_0:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_DayViewComponent0,renderType_DayViewComponent,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_DayViewComponent0);
    this._expr_9 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',this.debug(0,0,0));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'h2',import3.EMPTY_INLINE_ARRAY,this.debug(1,1,8));
    this._text_2 = this.renderer.createText(this._el_1,'',this.debug(2,1,12));
    this._text_3 = this.renderer.createText(parentRenderNode,'\n        ',this.debug(3,1,48));
    this._el_4 = import3.createRenderElement(this.renderer,parentRenderNode,'day-detail',import3.EMPTY_INLINE_ARRAY,this.debug(4,2,8));
    this.compView_4 = new import11.View_DayDetailComponent0(this.viewUtils,this,4,this._el_4);
    this._DayDetailComponent_4_3 = new import11.Wrapper_DayDetailComponent();
    this._text_5 = this.renderer.createText((null as any),'\n        ',this.debug(5,7,46));
    this.compView_4.create(this._DayDetailComponent_4_3.context);
    this._text_6 = this.renderer.createText(parentRenderNode,'\n        \n',this.debug(6,8,21));
    this.debug((null as any),(null as any),(null as any));
    this._pipe_date_0 = new import12.DatePipe(this.parentView.injectorGet(import13.LOCALE_ID,this.parentIndex));
    this._pipe_date_0_0 = import3.pureProxy2(this._pipe_date_0.transform.bind(this._pipe_date_0));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_4,new import3.InlineArray8(6,'addAppointment',(null as any),'removeAppointment',(null as any),'updateAppointment',(null as any)),this.eventHandler(this.handleEvent_4));
    this._DayDetailComponent_4_3.subscribe(this,this.eventHandler(this.handleEvent_4),true,true,true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._text_6
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import10.DayDetailComponent) && ((4 <= requestNodeIndex) && (requestNodeIndex <= 5)))) { return this._DayDetailComponent_4_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const valUnwrapper:any = new import1.ValueUnwrapper();
    this.debug(4,6,16);
    const currVal_4_0_0:any = this.context.date;
    this._DayDetailComponent_4_3.check_date(currVal_4_0_0,throwOnChange,false);
    this.debug(4,7,16);
    const currVal_4_0_1:any = this.context.appointments;
    this._DayDetailComponent_4_3.check_appointments(currVal_4_0_1,throwOnChange,false);
    this._DayDetailComponent_4_3.ngDoCheck(this,this._el_4,throwOnChange);
    this.debug(2,1,12);
    valUnwrapper.reset();
    const currVal_9:any = import3.inlineInterpolate(1,'Day: ',valUnwrapper.unwrap(import3.castByValue(this._pipe_date_0_0,this._pipe_date_0.transform)(this.context.date,'dd/MM/yyyy')),'');
    if ((valUnwrapper.hasWrappedValue || import3.checkBinding(throwOnChange,this._expr_9,currVal_9))) {
      this.renderer.setText(this._text_2,currVal_9);
      this._expr_9 = currVal_9;
    }
    this.compView_4.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_4.destroy();
    this._DayDetailComponent_4_3.ngOnDestroy();
  }
  handleEvent_4(eventName:string,$event:any):boolean {
    this.debug(4,2,8);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'addAppointment')) {
      const pd_sub_0:any = ((<any>this.context.addAppointment.emit($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'removeAppointment')) {
      const pd_sub_1:any = ((<any>this.context.removeAppointment.emit($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'updateAppointment')) {
      const pd_sub_2:any = ((<any>this.context.updateAppointment.emit($event)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
}