/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './calendar-detail.container';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/debug_context';
import * as import3 from '@angular/core/src/render/api';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '../../appointments.sandbox';
import * as import10 from '@angular/router/src/router_state';
import * as import11 from '@angular/router/src/router';
import * as import12 from '../../components/topbar/topbar.component';
import * as import13 from '../../components/day-view/day-view.component';
import * as import14 from '../../components/week-view/week-view.component';
import * as import15 from '../../components/month-view/month-view.component';
import * as import16 from '../../components/topbar/topbar.component.ngfactory';
import * as import17 from '../../components/day-view/day-view.component.ngfactory';
import * as import18 from '../../components/week-view/week-view.component.ngfactory';
import * as import19 from '../../components/month-view/month-view.component.ngfactory';
import * as import20 from '@angular/common/src/pipes/async_pipe';
import * as import21 from '@angular/core/src/change_detection/change_detection_util';
export class Wrapper_CalendarDetailContainer {
  /*private*/ _eventHandler:Function;
  context:import0.CalendarDetailContainer;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import0.CalendarDetailContainer(p0,p1,p2);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_CalendarDetailContainer_Host0:import2.StaticNodeDebugInfo[] = [new import2.StaticNodeDebugInfo([import0.CalendarDetailContainer],import0.CalendarDetailContainer,{})];
var renderType_CalendarDetailContainer_Host:import3.RenderComponentType = import4.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_CalendarDetailContainer_Host0 extends import1.DebugAppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.CalendarDetailContainer>;
  _CalendarDetailContainer_0_3:Wrapper_CalendarDetailContainer;
  constructor(viewUtils:import4.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_CalendarDetailContainer_Host0,renderType_CalendarDetailContainer_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_CalendarDetailContainer_Host0);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer,'calendar-detail',import4.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_CalendarDetailContainer0(this.viewUtils,this,0,this._el_0);
    this._CalendarDetailContainer_0_3 = new Wrapper_CalendarDetailContainer(this.injectorGet(import9.AppointmentsSandbox,this.parentIndex),this.injectorGet(import10.ActivatedRoute,this.parentIndex),this.injectorGet(import11.Router,this.parentIndex));
    this.compView_0.create(this._CalendarDetailContainer_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._CalendarDetailContainer_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.CalendarDetailContainer) && (0 === requestNodeIndex))) { return this._CalendarDetailContainer_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._CalendarDetailContainer_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const CalendarDetailContainerNgFactory:import8.ComponentFactory<import0.CalendarDetailContainer> = new import8.ComponentFactory<import0.CalendarDetailContainer>('calendar-detail',View_CalendarDetailContainer_Host0,import0.CalendarDetailContainer);
const styles_CalendarDetailContainer:any[] = ([] as any[]);
const nodeDebugInfos_CalendarDetailContainer0:import2.StaticNodeDebugInfo[] = [
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import2.StaticNodeDebugInfo([import12.TopbarComponent],import12.TopbarComponent,{}),
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import2.StaticNodeDebugInfo([import13.DayViewComponent],import13.DayViewComponent,{}),
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import2.StaticNodeDebugInfo([import14.WeekViewComponent],import14.WeekViewComponent,{}),
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import2.StaticNodeDebugInfo([import15.MonthViewComponent],import15.MonthViewComponent,{}),
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_CalendarDetailContainer:import3.RenderComponentType = import4.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/src/calendar/containers/calendar-detail/calendar-detail.container.ts class CalendarDetailContainer - inline template',0,import5.ViewEncapsulation.None,styles_CalendarDetailContainer,{});
export class View_CalendarDetailContainer0 extends import1.DebugAppView<import0.CalendarDetailContainer> {
  _text_0:any;
  _el_1:any;
  compView_1:import1.AppView<import12.TopbarComponent>;
  _TopbarComponent_1_3:import16.Wrapper_TopbarComponent;
  _text_2:any;
  _el_3:any;
  compView_3:import1.AppView<import13.DayViewComponent>;
  _DayViewComponent_3_3:import17.Wrapper_DayViewComponent;
  _text_4:any;
  _text_5:any;
  _el_6:any;
  compView_6:import1.AppView<import14.WeekViewComponent>;
  _WeekViewComponent_6_3:import18.Wrapper_WeekViewComponent;
  _text_7:any;
  _text_8:any;
  _el_9:any;
  compView_9:import1.AppView<import15.MonthViewComponent>;
  _MonthViewComponent_9_3:import19.Wrapper_MonthViewComponent;
  _text_10:any;
  _text_11:any;
  _pipe_async_0:import20.AsyncPipe;
  _pipe_async_1:import20.AsyncPipe;
  _pipe_async_2:import20.AsyncPipe;
  _pipe_async_3:import20.AsyncPipe;
  _pipe_async_4:import20.AsyncPipe;
  _pipe_async_5:import20.AsyncPipe;
  _pipe_async_6:import20.AsyncPipe;
  _pipe_async_7:import20.AsyncPipe;
  constructor(viewUtils:import4.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_CalendarDetailContainer0,renderType_CalendarDetailContainer,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_CalendarDetailContainer0);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',this.debug(0,0,0));
    this._el_1 = import4.createRenderElement(this.renderer,parentRenderNode,'topbar',import4.EMPTY_INLINE_ARRAY,this.debug(1,1,4));
    this.compView_1 = new import16.View_TopbarComponent0(this.viewUtils,this,1,this._el_1);
    this._TopbarComponent_1_3 = new import16.Wrapper_TopbarComponent();
    this.compView_1.create(this._TopbarComponent_1_3.context);
    this._text_2 = this.renderer.createText(parentRenderNode,'\n        \n            ',this.debug(2,6,18));
    this._el_3 = import4.createRenderElement(this.renderer,parentRenderNode,'day-view',import4.EMPTY_INLINE_ARRAY,this.debug(3,8,12));
    this.compView_3 = new import17.View_DayViewComponent0(this.viewUtils,this,3,this._el_3);
    this._DayViewComponent_3_3 = new import17.Wrapper_DayViewComponent();
    this._text_4 = this.renderer.createText((null as any),'\n            ',this.debug(4,14,13));
    this.compView_3.create(this._DayViewComponent_3_3.context);
    this._text_5 = this.renderer.createText(parentRenderNode,'\n            ',this.debug(5,15,23));
    this._el_6 = import4.createRenderElement(this.renderer,parentRenderNode,'week-view',import4.EMPTY_INLINE_ARRAY,this.debug(6,16,12));
    this.compView_6 = new import18.View_WeekViewComponent0(this.viewUtils,this,6,this._el_6);
    this._WeekViewComponent_6_3 = new import18.Wrapper_WeekViewComponent();
    this._text_7 = this.renderer.createText((null as any),'\n            ',this.debug(7,23,13));
    this.compView_6.create(this._WeekViewComponent_6_3.context);
    this._text_8 = this.renderer.createText(parentRenderNode,'\n            ',this.debug(8,24,24));
    this._el_9 = import4.createRenderElement(this.renderer,parentRenderNode,'month-view',import4.EMPTY_INLINE_ARRAY,this.debug(9,25,12));
    this.compView_9 = new import19.View_MonthViewComponent0(this.viewUtils,this,9,this._el_9);
    this._MonthViewComponent_9_3 = new import19.Wrapper_MonthViewComponent();
    this._text_10 = this.renderer.createText((null as any),'\n        ',this.debug(10,32,13));
    this.compView_9.create(this._MonthViewComponent_9_3.context);
    this._text_11 = this.renderer.createText(parentRenderNode,'\n        \n\n\n    ',this.debug(11,33,21));
    var disposable_0:Function = import4.subscribeToRenderElement(this,this._el_1,new import4.InlineArray8(8,'next',(null as any),'previous',(null as any),'setViewMode',(null as any),'searchChanged',(null as any)),this.eventHandler(this.handleEvent_1));
    this._TopbarComponent_1_3.subscribe(this,this.eventHandler(this.handleEvent_1),true,true,true,true);
    var disposable_1:Function = import4.subscribeToRenderElement(this,this._el_3,new import4.InlineArray4(4,'removeAppointment',(null as any),'addAppointment',(null as any)),this.eventHandler(this.handleEvent_3));
    this._DayViewComponent_3_3.subscribe(this,this.eventHandler(this.handleEvent_3),true,false,true);
    this.debug((null as any),(null as any),(null as any));
    this._pipe_async_0 = new import20.AsyncPipe(this.ref);
    this._pipe_async_1 = new import20.AsyncPipe(this.ref);
    var disposable_2:Function = import4.subscribeToRenderElement(this,this._el_6,new import4.InlineArray4(4,'removeAppointment',(null as any),'addAppointment',(null as any)),this.eventHandler(this.handleEvent_6));
    this._WeekViewComponent_6_3.subscribe(this,this.eventHandler(this.handleEvent_6),true,false,true);
    this._pipe_async_2 = new import20.AsyncPipe(this.ref);
    this._pipe_async_3 = new import20.AsyncPipe(this.ref);
    this._pipe_async_4 = new import20.AsyncPipe(this.ref);
    var disposable_3:Function = import4.subscribeToRenderElement(this,this._el_9,new import4.InlineArray4(4,'removeAppointment',(null as any),'addAppointment',(null as any)),this.eventHandler(this.handleEvent_9));
    this._MonthViewComponent_9_3.subscribe(this,this.eventHandler(this.handleEvent_9),true,false,true);
    this._pipe_async_5 = new import20.AsyncPipe(this.ref);
    this._pipe_async_6 = new import20.AsyncPipe(this.ref);
    this._pipe_async_7 = new import20.AsyncPipe(this.ref);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5,
      this._el_6,
      this._text_7,
      this._text_8,
      this._el_9,
      this._text_10,
      this._text_11
    ]
    ),[
      disposable_0,
      disposable_1,
      disposable_2,
      disposable_3
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.TopbarComponent) && (1 === requestNodeIndex))) { return this._TopbarComponent_1_3.context; }
    if (((token === import13.DayViewComponent) && ((3 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._DayViewComponent_3_3.context; }
    if (((token === import14.WeekViewComponent) && ((6 <= requestNodeIndex) && (requestNodeIndex <= 7)))) { return this._WeekViewComponent_6_3.context; }
    if (((token === import15.MonthViewComponent) && ((9 <= requestNodeIndex) && (requestNodeIndex <= 10)))) { return this._MonthViewComponent_9_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const valUnwrapper:any = new import21.ValueUnwrapper();
    this.debug(1,1,4);
    this._TopbarComponent_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    this.debug(3,11,20);
    valUnwrapper.reset();
    const currVal_3_0_0:any = valUnwrapper.unwrap(this._pipe_async_0.transform(this.context.currentDate$));
    this._DayViewComponent_3_3.check_date(currVal_3_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    this.debug(3,10,20);
    valUnwrapper.reset();
    const currVal_3_0_1:any = valUnwrapper.unwrap(this._pipe_async_1.transform(this.context.filteredAppointments$));
    this._DayViewComponent_3_3.check_appointments(currVal_3_0_1,throwOnChange,valUnwrapper.hasWrappedValue);
    this._DayViewComponent_3_3.ngDoCheck(this,this._el_3,throwOnChange);
    this.debug(6,20,20);
    valUnwrapper.reset();
    const currVal_6_0_0:any = valUnwrapper.unwrap(this._pipe_async_2.transform(this.context.currentWeek$));
    this._WeekViewComponent_6_3.check_week(currVal_6_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    this.debug(6,19,20);
    valUnwrapper.reset();
    const currVal_6_0_1:any = valUnwrapper.unwrap(this._pipe_async_3.transform(this.context.currentYear$));
    this._WeekViewComponent_6_3.check_year(currVal_6_0_1,throwOnChange,valUnwrapper.hasWrappedValue);
    this.debug(6,18,20);
    valUnwrapper.reset();
    const currVal_6_0_2:any = valUnwrapper.unwrap(this._pipe_async_4.transform(this.context.filteredAppointments$));
    this._WeekViewComponent_6_3.check_appointments(currVal_6_0_2,throwOnChange,valUnwrapper.hasWrappedValue);
    this._WeekViewComponent_6_3.ngDoCheck(this,this._el_6,throwOnChange);
    this.debug(9,27,20);
    valUnwrapper.reset();
    const currVal_9_0_0:any = valUnwrapper.unwrap(this._pipe_async_5.transform(this.context.currentMonth$));
    this._MonthViewComponent_9_3.check_month(currVal_9_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    this.debug(9,28,20);
    valUnwrapper.reset();
    const currVal_9_0_1:any = valUnwrapper.unwrap(this._pipe_async_6.transform(this.context.currentYear$));
    this._MonthViewComponent_9_3.check_year(currVal_9_0_1,throwOnChange,valUnwrapper.hasWrappedValue);
    this.debug(9,29,20);
    valUnwrapper.reset();
    const currVal_9_0_2:any = valUnwrapper.unwrap(this._pipe_async_7.transform(this.context.filteredAppointments$));
    this._MonthViewComponent_9_3.check_appointments(currVal_9_0_2,throwOnChange,valUnwrapper.hasWrappedValue);
    this._MonthViewComponent_9_3.ngDoCheck(this,this._el_9,throwOnChange);
    this.compView_1.internalDetectChanges(throwOnChange);
    this.compView_3.internalDetectChanges(throwOnChange);
    this.compView_6.internalDetectChanges(throwOnChange);
    this.compView_9.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_1.destroy();
    this.compView_3.destroy();
    this.compView_6.destroy();
    this.compView_9.destroy();
    this._TopbarComponent_1_3.ngOnDestroy();
    this.debug(1,1,4);
    this._DayViewComponent_3_3.ngOnDestroy();
    this.debug(3,8,12);
    this._WeekViewComponent_6_3.ngOnDestroy();
    this.debug(6,16,12);
    this._MonthViewComponent_9_3.ngOnDestroy();
    this.debug(9,25,12);
    this._pipe_async_0.ngOnDestroy();
    this._pipe_async_1.ngOnDestroy();
    this._pipe_async_2.ngOnDestroy();
    this._pipe_async_3.ngOnDestroy();
    this._pipe_async_4.ngOnDestroy();
    this._pipe_async_5.ngOnDestroy();
    this._pipe_async_6.ngOnDestroy();
    this._pipe_async_7.ngOnDestroy();
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.debug(1,1,4);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'next')) {
      const pd_sub_0:any = ((<any>this.context.onNext()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'previous')) {
      const pd_sub_1:any = ((<any>this.context.onPrevious()) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'setViewMode')) {
      const pd_sub_2:any = ((<any>this.context.onSetViewMode($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'searchChanged')) {
      const pd_sub_3:any = ((<any>this.context.onSearchChanged($event)) !== false);
      result = (pd_sub_3 && result);
    }
    return result;
  }
  handleEvent_3(eventName:string,$event:any):boolean {
    this.debug(3,8,12);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'removeAppointment')) {
      const pd_sub_0:any = ((<any>this.context.onRemoveAppointment($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'addAppointment')) {
      const pd_sub_1:any = ((<any>this.context.onAddAppointment($event)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
  handleEvent_6(eventName:string,$event:any):boolean {
    this.debug(6,16,12);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'removeAppointment')) {
      const pd_sub_0:any = ((<any>this.context.onRemoveAppointment($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'addAppointment')) {
      const pd_sub_1:any = ((<any>this.context.onAddAppointment($event)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
  handleEvent_9(eventName:string,$event:any):boolean {
    this.debug(9,25,12);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'removeAppointment')) {
      const pd_sub_0:any = ((<any>this.context.onRemoveAppointment($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'addAppointment')) {
      const pd_sub_1:any = ((<any>this.context.onAddAppointment($event)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
}