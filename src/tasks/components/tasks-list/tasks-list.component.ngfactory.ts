/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './tasks-list.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/linker/debug_context';
import * as import5 from '@angular/core/src/render/api';
import * as import6 from '@angular/core/src/metadata/view';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/constants';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '../task-item/task-item.component';
import * as import11 from '../task-item/task-item.component.ngfactory';
import * as import12 from '@angular/core/src/linker/view_container';
import * as import13 from '@angular/core/src/linker/template_ref';
import * as import14 from '@angular/common/src/directives/ng_for';
import * as import15 from '../../../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import16 from '../../../common/pipes/order-by.pipe';
import * as import17 from '@angular/core/src/change_detection/differs/iterable_differs';
export class Wrapper_TasksListComponent {
  /*private*/ _eventHandler:Function;
  context:import0.TasksListComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  subscription4:any;
  subscription5:any;
  subscription6:any;
  subscription7:any;
  constructor() {
    this._changed = false;
    this.context = new import0.TasksListComponent();
    this._expr_0 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
    (this.subscription4 && this.subscription4.unsubscribe());
    (this.subscription5 && this.subscription5.unsubscribe());
    (this.subscription6 && this.subscription6.unsubscribe());
    (this.subscription7 && this.subscription7.unsubscribe());
  }
  check_tasks(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.tasks = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean,emit4:boolean,emit5:boolean,emit6:boolean,emit7:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.updateTask.subscribe(_eventHandler.bind(view,'updateTask'))); }
    if (emit1) { (this.subscription1 = this.context.updateContact.subscribe(_eventHandler.bind(view,'updateContact'))); }
    if (emit2) { (this.subscription2 = this.context.updateClientAccount.subscribe(_eventHandler.bind(view,'updateClientAccount'))); }
    if (emit3) { (this.subscription3 = this.context.updateSale.subscribe(_eventHandler.bind(view,'updateSale'))); }
    if (emit4) { (this.subscription4 = this.context.updateAssignee.subscribe(_eventHandler.bind(view,'updateAssignee'))); }
    if (emit5) { (this.subscription5 = this.context.updateDueDate.subscribe(_eventHandler.bind(view,'updateDueDate'))); }
    if (emit6) { (this.subscription6 = this.context.updateStatus.subscribe(_eventHandler.bind(view,'updateStatus'))); }
    if (emit7) { (this.subscription7 = this.context.removeTask.subscribe(_eventHandler.bind(view,'removeTask'))); }
  }
}
const nodeDebugInfos_TasksListComponent_Host0:import4.StaticNodeDebugInfo[] = [new import4.StaticNodeDebugInfo([import0.TasksListComponent],import0.TasksListComponent,{})];
var renderType_TasksListComponent_Host:import5.RenderComponentType = import3.createRenderComponentType('',0,import6.ViewEncapsulation.None,([] as any[]),{});
class View_TasksListComponent_Host0 extends import2.DebugAppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.TasksListComponent>;
  _TasksListComponent_0_3:Wrapper_TasksListComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TasksListComponent_Host0,renderType_TasksListComponent_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_TasksListComponent_Host0);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'tasks-list',import3.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_TasksListComponent0(this.viewUtils,this,0,this._el_0);
    this._TasksListComponent_0_3 = new Wrapper_TasksListComponent();
    this.compView_0.create(this._TasksListComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import9.ComponentRef_<any>(0,this,this._el_0,this._TasksListComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.TasksListComponent) && (0 === requestNodeIndex))) { return this._TasksListComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._TasksListComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._TasksListComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const TasksListComponentNgFactory:import9.ComponentFactory<import0.TasksListComponent> = new import9.ComponentFactory<import0.TasksListComponent>('tasks-list',View_TasksListComponent_Host0,import0.TasksListComponent);
const styles_TasksListComponent:any[] = ([] as any[]);
const nodeDebugInfos_TasksListComponent1:import4.StaticNodeDebugInfo[] = [
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo([import10.TaskItemComponent],import10.TaskItemComponent,{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
class View_TasksListComponent1 extends import2.DebugAppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  compView_2:import2.AppView<import10.TaskItemComponent>;
  _TaskItemComponent_2_3:import11.Wrapper_TaskItemComponent;
  _text_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import12.ViewContainer) {
    super(View_TasksListComponent1,renderType_TasksListComponent,import7.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_TasksListComponent1,declaredViewContainer);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),'div',import3.EMPTY_INLINE_ARRAY,this.debug(0,1,8));
    this._text_1 = this.renderer.createText(this._el_0,'\n            ',this.debug(1,1,62));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'task-item',new import3.InlineArray2(2,'class','task-item'),this.debug(2,2,12));
    this.compView_2 = new import11.View_TaskItemComponent0(this.viewUtils,this,2,this._el_2);
    this._TaskItemComponent_2_3 = new import11.Wrapper_TaskItemComponent();
    this.compView_2.create(this._TaskItemComponent_2_3.context);
    this._text_3 = this.renderer.createText(this._el_0,'\n            \n        ',this.debug(3,13,25));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray16(16,'updateTask',(null as any),'updateContact',(null as any),'updateClientAccount',(null as any),'updateSale',(null as any),'updateAssignee',(null as any),'updateDueDate',(null as any),'updateStatus',(null as any),'removeTask',(null as any)),this.eventHandler(this.handleEvent_2));
    this._TaskItemComponent_2_3.subscribe(this,this.eventHandler(this.handleEvent_2),true,true,true,true,true,true,true,true);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import10.TaskItemComponent) && (2 === requestNodeIndex))) { return this._TaskItemComponent_2_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(2,4,16);
    const currVal_2_0_0:any = this.context.$implicit;
    this._TaskItemComponent_2_3.check_task(currVal_2_0_0,throwOnChange,false);
    if (this._TaskItemComponent_2_3.ngDoCheck(this,this._el_2,throwOnChange)) { this.compView_2.markAsCheckOnce(); }
    this.compView_2.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_2.destroy();
    this._TaskItemComponent_2_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.debug(2,2,12);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'updateTask')) {
      const pd_sub_0:any = ((<any>this.parentView.context.onUpdateTask(this.context.$implicit._id,$event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'updateContact')) {
      const pd_sub_1:any = ((<any>this.parentView.context.onUpdateContact(this.context.$implicit,$event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'updateClientAccount')) {
      const pd_sub_2:any = ((<any>this.parentView.context.onUpdateClientAccount(this.context.$implicit,$event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'updateSale')) {
      const pd_sub_3:any = ((<any>this.parentView.context.onUpdateSale(this.context.$implicit,$event)) !== false);
      result = (pd_sub_3 && result);
    }
    if ((eventName == 'updateAssignee')) {
      const pd_sub_4:any = ((<any>this.parentView.context.onUpdateAssignee(this.context.$implicit,$event)) !== false);
      result = (pd_sub_4 && result);
    }
    if ((eventName == 'updateDueDate')) {
      const pd_sub_5:any = ((<any>this.parentView.context.onUpdateDueDate(this.context.$implicit,$event)) !== false);
      result = (pd_sub_5 && result);
    }
    if ((eventName == 'updateStatus')) {
      const pd_sub_6:any = ((<any>this.parentView.context.onUpdateStatus(this.context.$implicit)) !== false);
      result = (pd_sub_6 && result);
    }
    if ((eventName == 'removeTask')) {
      const pd_sub_7:any = ((<any>this.parentView.context.onRemoveTask(this.context.$implicit)) !== false);
      result = (pd_sub_7 && result);
    }
    return result;
  }
}
const nodeDebugInfos_TasksListComponent0:import4.StaticNodeDebugInfo[] = [
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo([
    import13.TemplateRef,
    import14.NgFor
  ]
  ,(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_TasksListComponent:import5.RenderComponentType = import3.createRenderComponentType('/Users/jonoforbes/Developer/Ether/ether-app/src/tasks/components/tasks-list/tasks-list.component.ts class TasksListComponent - inline template',0,import6.ViewEncapsulation.None,styles_TasksListComponent,{});
export class View_TasksListComponent0 extends import2.DebugAppView<import0.TasksListComponent> {
  _text_0:any;
  _anchor_1:any;
  /*private*/ _vc_1:import12.ViewContainer;
  _TemplateRef_1_5:any;
  _NgFor_1_6:import15.Wrapper_NgFor;
  _text_2:any;
  _pipe_orderByPipe_0:import16.OrderByPipe;
  _pipe_orderByPipe_0_0:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TasksListComponent0,renderType_TasksListComponent,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_TasksListComponent0);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',this.debug(0,0,0));
    this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode,this.debug(1,1,8));
    this._vc_1 = new import12.ViewContainer(1,(null as any),this,this._anchor_1);
    this._TemplateRef_1_5 = new import13.TemplateRef_(this,1,this._anchor_1);
    this._NgFor_1_6 = new import15.Wrapper_NgFor(this._vc_1.vcRef,this._TemplateRef_1_5,this.parentView.injectorGet(import17.IterableDiffers,this.parentIndex),this.ref);
    this._text_2 = this.renderer.createText(parentRenderNode,'\n\n      \n    ',this.debug(2,15,14));
    this.debug((null as any),(null as any),(null as any));
    this._pipe_orderByPipe_0 = new import16.OrderByPipe();
    this._pipe_orderByPipe_0_0 = import3.pureProxy2(this._pipe_orderByPipe_0.transform.bind(this._pipe_orderByPipe_0));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._anchor_1,
      this._text_2
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import13.TemplateRef) && (1 === requestNodeIndex))) { return this._TemplateRef_1_5; }
    if (((token === import14.NgFor) && (1 === requestNodeIndex))) { return this._NgFor_1_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const valUnwrapper:any = new import1.ValueUnwrapper();
    this.debug(1,1,14);
    valUnwrapper.reset();
    const currVal_1_0_0:any = valUnwrapper.unwrap(import3.castByValue(this._pipe_orderByPipe_0_0,this._pipe_orderByPipe_0.transform)(this.context.tasks,this.context.order));
    this._NgFor_1_6.check_ngForOf(currVal_1_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    this._NgFor_1_6.ngDoCheck(this,this._anchor_1,throwOnChange);
    this._vc_1.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_1.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 1)) { return new View_TasksListComponent1(this.viewUtils,this,1,this._anchor_1,this._vc_1); }
    return (null as any);
  }
}