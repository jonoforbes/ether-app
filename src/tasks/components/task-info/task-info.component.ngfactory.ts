/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './task-info.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/linker/debug_context';
import * as import5 from '@angular/core/src/render/api';
import * as import6 from '@angular/core/src/metadata/view';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/constants';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '@angular/flex-layout/flexbox/api/layout';
import * as import11 from '../../../contacts/components/assignment-info/assignment-info.component';
import * as import12 from '../../../../node_modules/@angular/flex-layout/flexbox/api/layout.ngfactory';
import * as import13 from '../../../contacts/components/assignment-info/assignment-info.component.ngfactory';
import * as import14 from '@angular/flex-layout/media-query/media-monitor';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from '../../../contacts/contacts.sandbox';
export class Wrapper_TaskInfoComponent {
  /*private*/ _eventHandler:Function;
  context:import0.TaskInfoComponent;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor() {
    this._changed = false;
    this.context = new import0.TaskInfoComponent();
    this._expr_0 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_task(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.task = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_TaskInfoComponent_Host0:import4.StaticNodeDebugInfo[] = [new import4.StaticNodeDebugInfo([import0.TaskInfoComponent],import0.TaskInfoComponent,{})];
var renderType_TaskInfoComponent_Host:import5.RenderComponentType = import3.createRenderComponentType('',0,import6.ViewEncapsulation.None,([] as any[]),{});
class View_TaskInfoComponent_Host0 extends import2.DebugAppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.TaskInfoComponent>;
  _TaskInfoComponent_0_3:Wrapper_TaskInfoComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TaskInfoComponent_Host0,renderType_TaskInfoComponent_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_TaskInfoComponent_Host0);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'task-info',import3.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_TaskInfoComponent0(this.viewUtils,this,0,this._el_0);
    this._TaskInfoComponent_0_3 = new Wrapper_TaskInfoComponent();
    this.compView_0.create(this._TaskInfoComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import9.ComponentRef_<any>(0,this,this._el_0,this._TaskInfoComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.TaskInfoComponent) && (0 === requestNodeIndex))) { return this._TaskInfoComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._TaskInfoComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const TaskInfoComponentNgFactory:import9.ComponentFactory<import0.TaskInfoComponent> = new import9.ComponentFactory<import0.TaskInfoComponent>('task-info',View_TaskInfoComponent_Host0,import0.TaskInfoComponent);
const styles_TaskInfoComponent:any[] = ([] as any[]);
const nodeDebugInfos_TaskInfoComponent0:import4.StaticNodeDebugInfo[] = [
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo([import10.LayoutDirective],(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo([import11.ContactAssignmentInfoComponent],import11.ContactAssignmentInfoComponent,{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_TaskInfoComponent:import5.RenderComponentType = import3.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/src/tasks/components/task-info/task-info.component.ts class TaskInfoComponent - inline template',0,import6.ViewEncapsulation.None,styles_TaskInfoComponent,{});
export class View_TaskInfoComponent0 extends import2.DebugAppView<import0.TaskInfoComponent> {
  _text_0:any;
  _el_1:any;
  _LayoutDirective_1_3:import12.Wrapper_LayoutDirective;
  _text_2:any;
  _el_3:any;
  compView_3:import2.AppView<import11.ContactAssignmentInfoComponent>;
  _ContactAssignmentInfoComponent_3_3:import13.Wrapper_ContactAssignmentInfoComponent;
  _text_4:any;
  _text_5:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TaskInfoComponent0,renderType_TaskInfoComponent,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_TaskInfoComponent0);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    \n    ',this.debug(0,0,0));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'fxLayout','row'),this.debug(1,2,4));
    this._LayoutDirective_1_3 = new import12.Wrapper_LayoutDirective(this.parentView.injectorGet(import14.MediaMonitor,this.parentIndex),new import15.ElementRef(this._el_1),this.renderer);
    this._text_2 = this.renderer.createText(this._el_1,'\n        ',this.debug(2,2,24));
    this._el_3 = import3.createRenderElement(this.renderer,this._el_1,'contact-assignment-info',import3.EMPTY_INLINE_ARRAY,this.debug(3,3,8));
    this.compView_3 = new import13.View_ContactAssignmentInfoComponent0(this.viewUtils,this,3,this._el_3);
    this._ContactAssignmentInfoComponent_3_3 = new import13.Wrapper_ContactAssignmentInfoComponent(this.parentView.injectorGet(import16.ContactsSandbox,this.parentIndex));
    this.compView_3.create(this._ContactAssignmentInfoComponent_3_3.context);
    this._text_4 = this.renderer.createText(this._el_1,'\n\n    ',this.debug(4,3,76));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n    ',this.debug(5,5,10));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import11.ContactAssignmentInfoComponent) && (3 === requestNodeIndex))) { return this._ContactAssignmentInfoComponent_3_3.context; }
    if (((token === import10.LayoutDirective) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._LayoutDirective_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(1,2,9);
    const currVal_1_0_0:any = 'row';
    this._LayoutDirective_1_3.check_layout(currVal_1_0_0,throwOnChange,false);
    this._LayoutDirective_1_3.ngDoCheck(this,this._el_1,throwOnChange);
    this.debug(3,3,33);
    const currVal_3_0_0:any = this.context.contactId;
    this._ContactAssignmentInfoComponent_3_3.check_id(currVal_3_0_0,throwOnChange,false);
    if (this._ContactAssignmentInfoComponent_3_3.ngDoCheck(this,this._el_3,throwOnChange)) { this.compView_3.markAsCheckOnce(); }
    this.compView_3.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_3.destroy();
    this.debug(3,3,8);
    this._LayoutDirective_1_3.ngOnDestroy();
  }
}