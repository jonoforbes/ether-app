/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './tasks-widget.container';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/linker/debug_context';
import * as import5 from '@angular/core/src/render/api';
import * as import6 from '@angular/core/src/metadata/view';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/change_detection/constants';
import * as import9 from '@angular/core/src/linker/component_factory';
import * as import10 from '../../tasks.sandbox';
import * as import11 from '@angular/router/src/router_state';
import * as import12 from '@angular/router/src/router';
import * as import13 from '../../components/tasks-list/tasks-list.component';
import * as import14 from '../../components/tasks-list/tasks-list.component.ngfactory';
import * as import15 from '@angular/common/src/pipes/async_pipe';
export class Wrapper_TasksWidgetContainer {
  /*private*/ _eventHandler:Function;
  context:import0.TasksWidgetContainer;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import0.TasksWidgetContainer(p0,p1,p2);
    this._expr_0 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.mode = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_TasksWidgetContainer_Host0:import4.StaticNodeDebugInfo[] = [new import4.StaticNodeDebugInfo([import0.TasksWidgetContainer],import0.TasksWidgetContainer,{})];
var renderType_TasksWidgetContainer_Host:import5.RenderComponentType = import3.createRenderComponentType('',0,import6.ViewEncapsulation.None,([] as any[]),{});
class View_TasksWidgetContainer_Host0 extends import2.DebugAppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.TasksWidgetContainer>;
  _TasksWidgetContainer_0_3:Wrapper_TasksWidgetContainer;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TasksWidgetContainer_Host0,renderType_TasksWidgetContainer_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_TasksWidgetContainer_Host0);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'tasks-widget',import3.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_TasksWidgetContainer0(this.viewUtils,this,0,this._el_0);
    this._TasksWidgetContainer_0_3 = new Wrapper_TasksWidgetContainer(this.injectorGet(import10.TasksSandbox,this.parentIndex),this.injectorGet(import11.ActivatedRoute,this.parentIndex),this.injectorGet(import12.Router,this.parentIndex));
    this.compView_0.create(this._TasksWidgetContainer_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import9.ComponentRef_<any>(0,this,this._el_0,this._TasksWidgetContainer_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.TasksWidgetContainer) && (0 === requestNodeIndex))) { return this._TasksWidgetContainer_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._TasksWidgetContainer_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._TasksWidgetContainer_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const TasksWidgetContainerNgFactory:import9.ComponentFactory<import0.TasksWidgetContainer> = new import9.ComponentFactory<import0.TasksWidgetContainer>('tasks-widget',View_TasksWidgetContainer_Host0,import0.TasksWidgetContainer);
const styles_TasksWidgetContainer:any[] = ([] as any[]);
const nodeDebugInfos_TasksWidgetContainer0:import4.StaticNodeDebugInfo[] = [
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo([import13.TasksListComponent],import13.TasksListComponent,{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_TasksWidgetContainer:import5.RenderComponentType = import3.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/src/tasks/containers/tasks-widget/tasks-widget.container.ts class TasksWidgetContainer - inline template',0,import6.ViewEncapsulation.None,styles_TasksWidgetContainer,{});
export class View_TasksWidgetContainer0 extends import2.DebugAppView<import0.TasksWidgetContainer> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _text_3:any;
  _el_4:any;
  compView_4:import2.AppView<import13.TasksListComponent>;
  _TasksListComponent_4_3:import14.Wrapper_TasksListComponent;
  _text_5:any;
  _pipe_async_0:import15.AsyncPipe;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TasksWidgetContainer0,renderType_TasksWidgetContainer,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import8.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_TasksWidgetContainer0);
  }
  createInternal(rootSelector:string):import9.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',this.debug(0,0,0));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'h2',new import3.InlineArray2(2,'class','widget widget-head'),this.debug(1,1,4));
    this._text_2 = this.renderer.createText(this._el_1,'Tasks',this.debug(2,1,35));
    this._text_3 = this.renderer.createText(parentRenderNode,'\n    ',this.debug(3,1,45));
    this._el_4 = import3.createRenderElement(this.renderer,parentRenderNode,'tasks-list',import3.EMPTY_INLINE_ARRAY,this.debug(4,2,4));
    this.compView_4 = new import14.View_TasksListComponent0(this.viewUtils,this,4,this._el_4);
    this._TasksListComponent_4_3 = new import14.Wrapper_TasksListComponent();
    this.compView_4.create(this._TasksListComponent_4_3.context);
    this._text_5 = this.renderer.createText(parentRenderNode,'\n    \n    \n    \n    ',this.debug(5,10,18));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_4,new import3.InlineArray16(12,'updateTask',(null as any),'updateAssignee',(null as any),'updateContact',(null as any),'updateClientAccount',(null as any),'removeTask',(null as any),'updateStatus',(null as any)),this.eventHandler(this.handleEvent_4));
    this._TasksListComponent_4_3.subscribe(this,this.eventHandler(this.handleEvent_4),true,true,true,false,true,false,true,true);
    this.debug((null as any),(null as any),(null as any));
    this._pipe_async_0 = new import15.AsyncPipe(this.ref);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._text_3,
      this._el_4,
      this._text_5
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import13.TasksListComponent) && (4 === requestNodeIndex))) { return this._TasksListComponent_4_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const valUnwrapper:any = new import1.ValueUnwrapper();
    this.debug(4,3,8);
    valUnwrapper.reset();
    const currVal_4_0_0:any = valUnwrapper.unwrap(this._pipe_async_0.transform(this.context.tasks$));
    this._TasksListComponent_4_3.check_tasks(currVal_4_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    if (this._TasksListComponent_4_3.ngDoCheck(this,this._el_4,throwOnChange)) { this.compView_4.markAsCheckOnce(); }
    this.compView_4.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_4.destroy();
    this._TasksListComponent_4_3.ngOnDestroy();
    this.debug(4,2,4);
    this._pipe_async_0.ngOnDestroy();
  }
  handleEvent_4(eventName:string,$event:any):boolean {
    this.debug(4,2,4);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'updateTask')) {
      const pd_sub_0:any = ((<any>this.context.onUpdateTask($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'updateAssignee')) {
      const pd_sub_1:any = ((<any>this.context.onUpdateAssignee($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'updateContact')) {
      const pd_sub_2:any = ((<any>this.context.onUpdateContact($event)) !== false);
      result = (pd_sub_2 && result);
    }
    if ((eventName == 'updateClientAccount')) {
      const pd_sub_3:any = ((<any>this.context.onUpdateClientAccount($event)) !== false);
      result = (pd_sub_3 && result);
    }
    if ((eventName == 'removeTask')) {
      const pd_sub_4:any = ((<any>this.context.onRemoveTask($event)) !== false);
      result = (pd_sub_4 && result);
    }
    if ((eventName == 'updateStatus')) {
      const pd_sub_5:any = ((<any>this.context.onUpdateCompleted($event)) !== false);
      result = (pd_sub_5 && result);
    }
    return result;
  }
}