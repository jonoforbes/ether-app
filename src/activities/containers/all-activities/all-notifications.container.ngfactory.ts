/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './all-notifications.container';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/debug_context';
import * as import3 from '@angular/core/src/render/api';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '../../notifications.sandbox';
import * as import10 from '../../components/notifications-list/notifications-list.component';
import * as import11 from '../../components/notifications-list/notifications-list.component.ngfactory';
import * as import12 from '@angular/common/src/pipes/async_pipe';
import * as import13 from '@angular/core/src/change_detection/change_detection_util';
export class Wrapper_AllNotificationsContainer {
  /*private*/ _eventHandler:Function;
  context:import0.AllNotificationsContainer;
  /*private*/ _changed:boolean;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.AllNotificationsContainer(p0);
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_AllNotificationsContainer_Host0:import2.StaticNodeDebugInfo[] = [new import2.StaticNodeDebugInfo([import0.AllNotificationsContainer],import0.AllNotificationsContainer,{})];
var renderType_AllNotificationsContainer_Host:import3.RenderComponentType = import4.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_AllNotificationsContainer_Host0 extends import1.DebugAppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.AllNotificationsContainer>;
  _AllNotificationsContainer_0_3:Wrapper_AllNotificationsContainer;
  constructor(viewUtils:import4.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AllNotificationsContainer_Host0,renderType_AllNotificationsContainer_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_AllNotificationsContainer_Host0);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import4.selectOrCreateRenderHostElement(this.renderer,'all-notifications',import4.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_AllNotificationsContainer0(this.viewUtils,this,0,this._el_0);
    this._AllNotificationsContainer_0_3 = new Wrapper_AllNotificationsContainer(this.injectorGet(import9.NotificationsSandbox,this.parentIndex));
    this.compView_0.create(this._AllNotificationsContainer_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._AllNotificationsContainer_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.AllNotificationsContainer) && (0 === requestNodeIndex))) { return this._AllNotificationsContainer_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._AllNotificationsContainer_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._AllNotificationsContainer_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const AllNotificationsContainerNgFactory:import8.ComponentFactory<import0.AllNotificationsContainer> = new import8.ComponentFactory<import0.AllNotificationsContainer>('all-notifications',View_AllNotificationsContainer_Host0,import0.AllNotificationsContainer);
const styles_AllNotificationsContainer:any[] = ([] as any[]);
const nodeDebugInfos_AllNotificationsContainer0:import2.StaticNodeDebugInfo[] = [
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import2.StaticNodeDebugInfo([import10.NotificationsListComponent],import10.NotificationsListComponent,{}),
  new import2.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_AllNotificationsContainer:import3.RenderComponentType = import4.createRenderComponentType('/Users/jonoforbes/Developer/Ether/winecellar/src/notifications/containers/all-notifications/all-notifications.container.ts class AllNotificationsContainer - inline template',0,import5.ViewEncapsulation.None,styles_AllNotificationsContainer,{});
export class View_AllNotificationsContainer0 extends import1.DebugAppView<import0.AllNotificationsContainer> {
  _text_0:any;
  _el_1:any;
  compView_1:import1.AppView<import10.NotificationsListComponent>;
  _NotificationsListComponent_1_3:import11.Wrapper_NotificationsListComponent;
  _text_2:any;
  _pipe_async_0:import12.AsyncPipe;
  constructor(viewUtils:import4.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AllNotificationsContainer0,renderType_AllNotificationsContainer,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_AllNotificationsContainer0);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n        ',this.debug(0,0,0));
    this._el_1 = import4.createRenderElement(this.renderer,parentRenderNode,'notifications-list',import4.EMPTY_INLINE_ARRAY,this.debug(1,1,8));
    this.compView_1 = new import11.View_NotificationsListComponent0(this.viewUtils,this,1,this._el_1);
    this._NotificationsListComponent_1_3 = new import11.Wrapper_NotificationsListComponent();
    this.compView_1.create(this._NotificationsListComponent_1_3.context);
    this._text_2 = this.renderer.createText(parentRenderNode,'\n    ',this.debug(2,2,76));
    this.debug((null as any),(null as any),(null as any));
    this._pipe_async_0 = new import12.AsyncPipe(this.ref);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import10.NotificationsListComponent) && (1 === requestNodeIndex))) { return this._NotificationsListComponent_1_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const valUnwrapper:any = new import13.ValueUnwrapper();
    this.debug(1,2,8);
    valUnwrapper.reset();
    const currVal_1_0_0:any = valUnwrapper.unwrap(this._pipe_async_0.transform(this.context.matchingNotifications$));
    this._NotificationsListComponent_1_3.check_notifications(currVal_1_0_0,throwOnChange,valUnwrapper.hasWrappedValue);
    if (this._NotificationsListComponent_1_3.ngDoCheck(this,this._el_1,throwOnChange)) { this.compView_1.markAsCheckOnce(); }
    this.compView_1.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_1.destroy();
    this._NotificationsListComponent_1_3.ngOnDestroy();
    this.debug(1,1,8);
    this._pipe_async_0.ngOnDestroy();
  }
}